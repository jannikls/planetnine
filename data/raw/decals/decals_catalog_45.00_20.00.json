

<html xmlns="https://www.w3.org/1999/xhtml" xml:lang="en">

<head>

<link rel="icon" type="image/png" href="/viewer/static/favicon.png" />
<link rel="shortcut icon" href="/viewer/static/favicon.ico" />


<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-5565065-29', 'auto');
  ga('send', 'pageview');
</script>
<link rel="stylesheet" href="/viewer/static/leaflet-1.7.1.css" />
<script src="/viewer/static/leaflet-1.7.1.js"></script>

<script src="/viewer/static/leaflet-pip-20170913.js"></script>

<script src="/viewer/static/L.Control.Layers.Tree-1.0.2.js"></script>
<link rel="stylesheet" href="/viewer/static/L.Control.Layers.Tree-1.0.2.css" />
<script src="/viewer/static/jquery-3.5.1.min.js"></script>

<link rel="stylesheet" href="/viewer/static/leaflet-zoomslider-0.7.1.css" />
<script src="/viewer/static/leaflet-zoomslider-0.7.1.js"></script>

<script src="/viewer/static/l.ellipse.js"></script>
<script src="/viewer/static/utils.js"></script>
<link rel="stylesheet" href="/viewer/static/styles.css" />
<style id='tile-filters'></style>



<title>

Legacy Survey Sky Browser

</title>
<style type="text/css">


</style>
</head>




<body id="thebody">
<div id="map"></div>
<script>
//'use strict';

 
// Variables from django.
var layer_initial = 'ls-dr9';
var ra_initial = 226.6219940185547;
var dec_initial = 1.6056100130081177;
var zoom_initial = 12;
var galname_initial = 'NGC 5846';
var smallcat_url = '/viewer/{id}/{ver}/cat.json?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}';
var usercat2_url = '/viewer/usercatalog/1/cat.json?start={start}&N={N}&cat={cat}';
var usercat_url = '/viewer/usercatalog/1/cat.json?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}&cat={cat}';
var tile_url = 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg';
var maxNativeZoom = 15;
var tile_layers = {'sdss': ['SDSS', [[14, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'sdss'], 'galex': ['GALEX', [[0, 9, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 12, 'galex'], 'sfd': ['SFD Dust', [[7, 10, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 10, 'sfd'], 'wssa': ['WISE 12-micron dust map', [[9, 10, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 10, 'wssa'], 'halpha': ['Halpha map', [[7, 10, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 10, 'halpha'], 'ls-dr10-south': ['Legacy Surveys DR10-south images', [[0, 5, 'https://{s}.legacysurvey.org/viewer/static//tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-south-grz': ['Legacy Surveys DR10-south images (grz)', [[0, 5, 'https://{s}.legacysurvey.org/viewer/static//tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-south-model': ['Legacy Surveys DR10-south models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-south-model-grz': ['Legacy Surveys DR10-south models (grz)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-south-resid': ['Legacy Surveys DR10-south residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-south-resid-grz': ['Legacy Surveys DR10-south residuals (grz)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-mid': ['Legacy Surveys DR10 images', [[0, 5, 'https://{s}.legacysurvey.org/viewer/static//tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-mid-grz': ['Legacy Surveys DR10 images (grz)', [[0, 5, 'https://{s}.legacysurvey.org/viewer/static//tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-mid-model': ['Legacy Surveys DR10 models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-mid-model-grz': ['Legacy Surveys DR10 models (grz)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-mid-resid': ['Legacy Surveys DR10 residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr10-mid-resid-grz': ['Legacy Surveys DR10 residuals (grz)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-north': ['Legacy Surveys DR9-north images', [[0, 14, 'https://s3.us-west-2.amazonaws.com/dr9-north.legacysurvey.org/{z}/{x}/{y}.jpg', []], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-north-model': ['Legacy Surveys DR9-north models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-north-resid': ['Legacy Surveys DR9-north residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-south': ['Legacy Surveys DR9-south images', [[0, 14, 'https://s3.us-west-2.amazonaws.com/dr9-south.legacysurvey.org/{z}/{x}/{y}.jpg', []], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-south-model': ['Legacy Surveys DR9-south models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-south-resid': ['Legacy Surveys DR9-south residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-mid': ['Legacy Surveys DR9 images', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-mid-model': ['Legacy Surveys DR9 images', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9-mid-resid': ['Legacy Surveys DR9 images', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr9.1.1': ['Legacy Surveys DR9.1.1 COSMOS deep images', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 16, 'ls'], 'ls-dr9.1.1-model': ['Legacy Surveys DR9.1.1 COSMOS deep models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 16, 'ls'], 'ls-dr9.1.1-resid': ['Legacy Surveys DR9.1.1 COSMOS deep residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 16, 'ls'], 'ls-dr8-north': ['Legacy Surveys DR8-north images', [[0, 14, 'https://s3.us-west-1.amazonaws.com/{id}.legacysurvey.org/{z}/{x}/{y}.jpg', []], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls', {'id': 'dr8-north'}], 'ls-dr8-mid': ['Legacy Surveys DR8 images', [[0, 14, 'https://s3.us-west-1.amazonaws.com/{id}.legacysurvey.org/{z}/{x}/{y}.jpg', []], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls', {'id': 'dr8'}], 'ls-dr8-south': ['Legacy Surveys DR8-south images', [[0, 14, 'https://s3.us-west-1.amazonaws.com/{id}.legacysurvey.org/{z}/{x}/{y}.jpg', []], [0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls', {'id': 'dr8-south'}], 'ls-dr8-north-model': ['Legacy Surveys DR8-north models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr8-mid-model': ['Legacy Surveys DR8 models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr8-south-model': ['Legacy Surveys DR8-south models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr8-north-resid': ['Legacy Surveys DR8-north residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr8-mid-resid': ['Legacy Surveys DR8 residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr8-south-resid': ['Legacy Surveys DR8-south residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decals-dr7': ['DECaLS DR7 images', [[11, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decals-dr7-model': ['DECaLS DR7 models', [[10, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decals-dr7-resid': ['DECaLS DR7 residuals', [[10, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'mzls+bass-dr6': ['MzLS+BASS DR6 images', [[13, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'mzls+bass-dr6-model': ['MzLS+BASS DR6 models', [[13, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'mzls+bass-dr6-resid': ['MzLS+BASS DR6 residuals', [[13, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'ls-dr67-mid': ['Legacy Surveys DR6+DR7 images', [[0, 5, 'https://{s}.legacysurvey.org/viewer/static//tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [6, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decals-dr5': ['DECaLS DR5 images', [[14, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decals-dr5-model': ['DECaLS DR5 models', [[14, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decals-dr5-resid': ['DECaLS DR5 residuals', [[14, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decaps2': ['DECaPS2 images', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decaps2-model': ['DECaPS2 models', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decaps2-resid': ['DECaPS2 residuals', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decaps2-riy': ['DECaPS2 images (riY)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decaps2-model-riy': ['DECaPS2 models (riY)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'decaps2-resid-riy': ['DECaPS2 residuals (riY)', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'ls'], 'unwise-neo4': ['unWISE W1/W2 NEO4', [[6, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 12, 'unwise'], 'unwise-neo6': ['unWISE W1/W2 NEO6', [[1, 11, 'https://s3.us-west-2.amazonaws.com/{id}.legacysurvey.org/{z}/{x}/{y}.jpg', []]], 11, 'unwise'], 'unwise-neo7': ['unWISE W1/W2 NEO7', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 11, 'unwise'], 'unwise-cat-model': ['unWISE Catalog model', [[6, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']], [0, 16, 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 12, 'unwise'], 'hsc-dr2': ['HSC DR2', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'hsc2'], 'hsc-dr3': ['HSC DR3', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'hsc3'], 'vlass1.2': ['VLASS 1.2', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'vlass'], 'des-dr1': ['DES DR1', [[0, 16, 'https://{s}.legacysurvey.org/viewer/{id}/{ver}/{z}/{x}/{y}.jpg', ['a', 'b', 'c', 'd']]], 14, 'des']};
var hostname_url = 'https://www.legacysurvey.org/';  // eg "http://legacysurvey.org"
var root_url = '/viewer/';  // eg /viewer-dev
var ccds_url = '/viewer/ccds/?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}&layer={id}';
var exposures_url = '/viewer/exps/?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}&layer={id}';
var bricks_url = '/viewer/bricks/?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}&layer={layer}';
var sdss_plates_url = '/viewer/sdss-plates/?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}';
var cat_url = '/viewer/{id}/{ver}/{z}/{x}/{y}.cat.json';
var desitile_url = '/viewer/desi-tile/1/cat.json?ralo={ralo}&rahi={rahi}&declo={declo}&dechi={dechi}&tile={tile}';
var usercat_upload_url = '/viewer/upload-cat/';
var name_query_url = '/viewer/namequery/?obj={obj}';
var static_tile_url = 'https://{s}.legacysurvey.org/viewer/static//tiles/{id}/{ver}/{z}/{x}/{y}.jpg';
var subdomains = ['a','b','c','d'];;
var static_tile_url_B = 'https://{s}.imagine.legacysurvey.org/static/tiles/{id}/{ver}/{z}/{x}/{y}.jpg';
var subdomains_B = ['a','b','c','d'];;
var aws_tile_url = 'https://s3.us-west-1.amazonaws.com/{id}.legacysurvey.org/{z}/{x}/{y}.jpg';
var max_aws_zoom = 14;
var aws_unwise_url = 'https://s3.us-west-2.amazonaws.com/{id}.legacysurvey.org/{z}/{x}/{y}.jpg'
var minZoom = 1;
var maxZoom = 16;
//console.log('window.location is', window.location);

// Function to search the current page URL's GET query portion URL?x=y
var QueryItems = function() {
    var terms = window.location.search.substr(1);
    terms += '';
    console.log('search terms:', terms);
    terms = terms.split('&');
    var items = {};
    for (var i = 0; i < terms.length; ++i) {
        var words = terms[i].split('=');
        if (words.length == 1) {
            items[words[0]] = true;
        } else if (words.length == 2) {
            items[words[0]] = decodeURIComponent(words[1].replace(/\+/g, ' '));
        }
    }
    return items;
};
var qstr = QueryItems();

if ('plate' in qstr) {
  zoom_initial = 8;
}
if ('zoom' in qstr) {
  zoom_initial = parseInt(qstr['zoom']);
  if (isNaN(zoom_initial))
    zoom_initial = 12;
  zoom_initial = Math.max(1, Math.min(maxZoom, zoom_initial));
}

var sparseMode = ('sparse' in qstr);


var TileWatcher = L.Evented.extend({

    initialize: function() {
        // string keys z:x:y of currently visible tiles
        this._visibleTiles = {};
    },

    listenToLayer: function(layer) {
        layer.on('tileloadstart', this.tileLoadStart.bind(this));
        layer.on('tileunload',    this.tileUnload.bind(this));
        layer.on('tileerror',     this.tileError.bind(this));
        layer.on('tileabort',     this.tileAbort.bind(this));
    },

    getVisibleTiles: function() {
        return this._visibleTiles;
    },

    _eventToKey: function(e) {
        var coord = e.coords;
        var x = coord.x;
        var zoom = coord.z;
        var maxtile = 1 << zoom;
        x = x % maxtile;
        var key = '' + zoom + ':' + x + ':' + coord.y;
        return key;
    },

    tileLoadStart: function(e) {
        var key = this._eventToKey(e);
        console.log('Tile load start: ' + key);
        if (key in this._visibleTiles) {
            //console.log('tile was already in visible tiles');
        } else {
            e.key = key;

            var maxtile = 1 << e.coords.z;
            e.coords.wrapx = e.coords.x % maxtile;

            //console.log('firing tilevisible: ' + key + ', event ', e);
            this._visibleTiles[key] = true;
            this.fire('tilevisible', e);
        }
    },
    
    tileUnload: function(e) {
        //console.log('Tile unload: ' + this._eventToKey(e));
        this._tileGone(e);
    },

    tileAbort: function(e) {
        //console.log('Tile abort: ' + this._eventToKey(e));
        this._tileGone(e);
    },

    tileError: function(e) {
        //console.log('Tile error: ' + this._eventToKey(e));
        this._tileGone(e);
    },

    _tileGone: function(e) {
        var key = this._eventToKey(e);
        delete this._visibleTiles[key];
        e.key = key;
        this.fire('tileinvisible', e);
        //console.log('firing tileinvisible: ' + key + ', event ', e);
    },

});


var tileWatcher = new TileWatcher();

function register_layer(layer) {
    console.log('register_layer: ' + layer.name + ', "' + layer.pretty + '"');
    baseMaps[layer.pretty] = layer;
    namedLayers[layer.name] = layer;
    tileWatcher.listenToLayer(layer);
    if (layer_name == layer.name) {
        layer.addTo(map);
        added = true;
    }
}


function arcsecToMeters(arcsec) {
    return arcsec * 30.87;
}

var MyTileLayer = L.TileLayer.extend({

    /*
    getTiles: function() {
        var tiles = [];
   	    for (var key in this._tiles) {
            var c = this._tiles[key].coords;
            var code = '' + c.z + ':' + c.x + ':' + c.y;
            tiles.push(code);
        }
        return tiles;
    },
    */

    _abortLoading: function() {
		var i, tile;
		for (i in this._tiles) {
			if (this._tiles[i].coords.z !== this._tileZoom) {
                tile = this._tiles[i].el;
				if (!tile.complete) {
                    var coords = this._tiles[i].coords;
                    this.fire('tileabort', {
                        tile: tile,
                        coords: coords
                    });
                }
			}
		}
        L.TileLayer.prototype._abortLoading.call(this);
    },

});

// A subclass that switches URL patterns depending on zoom range (incl subdomains)
var ZoomRangeTileLayer = MyTileLayer.extend({
    options: {
        urlPatterns: [],
    },
    initialize: function(options) {
        L.TileLayer.prototype.initialize.call(this, '', options);
        //this.urlPatterns = patterns;
    },
	getTileUrl: function (tilePoint) {
        var zoom = tilePoint.z;
        for (var i=0; i<this.options.urlPatterns.length; i++) {
            var zlo  = this.options.urlPatterns[i][0];
            var zhi  = this.options.urlPatterns[i][1];
            if ((zoom < zlo) || (zoom > zhi))
                continue;
            var zurl = this.options.urlPatterns[i][2];
            var zsubs = this.options.urlPatterns[i][3];
		    var index = Math.abs(tilePoint.x + tilePoint.y) % zsubs.length;
		    var sub = zsubs[index];
		    return L.Util.template(zurl, L.extend({
			    s: sub,
			    z: tilePoint.z,
			    x: tilePoint.x,
			    y: tilePoint.y
		    }, this.options));
        }
	},
});
  
var SplitTileLayer = MyTileLayer.extend({
    initialize: function(ysplits, north_layer, mid_layer, south_layer, options) {
        L.TileLayer.prototype.initialize.call(this, '', options);
        this._ysplits = ysplits;
        this._north_layer = north_layer;
        this._mid_layer = mid_layer;
        this._south_layer = south_layer;
        //console.log('SplitTileLayer: north ' + this._north_layer);
        //console.log('SplitTileLayer: mid ' + this._mid_layer);
        //console.log('SplitTileLayer: south ' + this._south_layer);
    },
	getTileUrl: function (tile) {
        tilesize = this.getTileSize();
        tw = tilesize.x;
        th = tilesize.y;
        px = tw * tile.x + tw/2;
        py = th * tile.y + th/2;
        tilelatlng = map.unproject(L.point(px, py), tile.z);
        var ysplit = this._ysplits[tile.z];
        // check NGC/SGC
        if (!latlong_is_ngc(tilelatlng)) {
            //console.log('SplitTileLayer.getTileUrl: SGC');
            // SGC -- south, except for way zoomed-out layers
            if ((tile.z < 5) && (tile.y == ysplit)) {
                //console.log('SGC / mid');
                layer = this._mid_layer;
            } else {
                //console.log('SGC / south');
                layer = this._south_layer;
            }
        } else {
            // y=0 is the top!
            var urlpat;
            var opts;
            //console.log('NGC: tile.y ' + tile.y + ', ysplit ' + ysplit);
            if (tile.y < ysplit) {
                //console.log('NGC/north');
                layer = this._north_layer;
            } else if (tile.y > ysplit) {
                //console.log('NGC/south');
                layer = this._south_layer;
            } else {
                //console.log('NGC/mid');
                layer = this._mid_layer;
            }
        }
        var url = layer.getTileUrl(tile);
        return url;
	},
});

function split_layer(name, pretty, decsplit,
                     north_layer, mid_layer, south_layer, kwargs) {
    var args = {
        maxZoom: maxZoom,
        minZoom: minZoom,
        maxNativeZoom: maxNativeZoom,
    };
    for (var key in kwargs) {
        args[key] = kwargs[key];
    }
    var ysplits = {};
    for (var zoom=0; zoom<20; zoom++) {
        // Thanks, https://en.wikipedia.org/wiki/Web_Mercator
        y = Math.pow(2, zoom) / (2. * Math.PI) *
            (Math.PI - Math.log(Math.tan(Math.PI/4. + (Math.PI / 180. * decsplit) / 2.)));
        ysplits[zoom] = Math.floor(y);
    }
    var layer = new SplitTileLayer(ysplits, north_layer, mid_layer, south_layer, args);
    layer.name = name;
    layer.pretty = pretty;
    // like in findlayer
    register_layer(layer);

    return layer;
};

// for attaching leaflet.Labels to circles
L.Circle.include(L.BaseMarkerMethods);

var CatalogOverlay = L.Evented.extend({

    initialize: function(name, pretty, kwargs) {
        //console.log('CatalogOverlay: ' + name + ',' + pretty);
        //console.log('CatalogOverlay: ' + name + ': options');
        //console.log('    ' + this.options);
        this.options = {};
        this._counter = 1;
        this._url = kwargs['url'] || smallcat_url;
        this._url_term = kwargs['urlTerm'] || name;
        this._checkbox = null;
        this._status = null;
        this._show = false;
        this._name = name;
        this._url_name = kwargs['url_name'] || this._name;
        this._dr_name  = kwargs['dr_name'] || this._url_name;
        this._url_args = kwargs['url_args'] || {};
        this._pretty = pretty;
        this._layers = {};
        this._group = L.layerGroup([]);
	    // ~ 100 arcsec
        this._radius = kwargs['radius'] || 3000;
        this._minZoom = kwargs['minZoom'] || 3;
        this._labelsMinZoom = kwargs['labelsMinZoom'] || 6;
        this._color = kwargs['color'] || '#ffffff';
        this._style = {'fillOpacity':0,
                       'weight':5,
                      };
        this._oldZoom = zoom_initial;
        map.on('overlayadd',    this.overlayAdded.bind(this));
        map.on('overlayremove', this.overlayRemoved.bind(this));
        map.on('moveend',       this.mapBoundsChanged.bind(this));
        map.on('zoomend',       this.onMapZoomEnd.bind(this));

        $(document).ready(this.ready.bind(this));
    },

    ready: function() {
        console.log(this._name + ' ready function called');
        this._checkbox = getOverlayCheckbox(this._pretty);
        // _checkbox is a jQuery node
        //console.log('checkbox:', this._checkbox);
        if (!this._checkbox) {
            // this happens if we have an inconsistency between the declared overlays
            // and the menu items listing them.
            console.log('BUG line 278');
            return;
        }

        // add status span after the layer name span
        var nxt = this._checkbox.next();
        var stat = L.DomUtil.create('span', 'layer-status');
        var statid = this._name + '_status';
        stat.id = statid
        nxt.after(stat);
        nxt.after('&nbsp;');
        // find it with jQuery
        this._status = $('#' + statid);
    },

    getGroup: function() {
        return this._group;
    },

    overlayAdded: function(e) {
        if (layerMatchesEvent(this, e)) {
            console.log('overlayAdded: ' + this._name);
            this._show = true;
	        if (map.getZoom() >= this._minZoom) {
                console.log(this._name + ': LOADING!')
	            this.load();
	        }
        }
    },

    overlayRemoved: function(e) {
        if (layerMatchesEvent(this, e)) {
	        this._show = false;
            this.removeAllLayers();
        }
    },

    mapBoundsChanged: function() {
        //console.log('Map bounds changed: zoom: ' + map.getZoom());
        if (this._show && map.getZoom() >= this._minZoom) {
            this.load();
        }
    },

    onMapZoomEnd: function() {
        //console.log(this._name + ': map zoom end; oldzoom: ' + this._oldZoom +
        //', new zoom: ' + map.getZoom());
        var zoom = map.getZoom();
        if ((this._oldZoom >= this._minZoom) && (zoom < this._minZoom)) {
            //console.log(this._name + ': zoomed out past boundary');
            if (this._show) {
                //console.log(this._name + ': removing');
                // By the time we get here, onTileUnload() has already fired.
                this._show = false;
                // remove any extra ones that have stuck around (fast zoom-outs)
                this.removeAllLayers();
            }
            if (this._checkbox) {
                this._checkbox.attr('disabled', 'disabled');
            }

        } else if ((this._oldZoom < this._minZoom) && (zoom >= this._minZoom)) {
            //console.log(this._name + ': zoomed in past boundary');
            if (this._checkbox) {
                this._checkbox.removeAttr('disabled');
                if (this._checkbox.prop('checked')) {
                    // SEE layerMatchesEvent()
                    this.overlayAdded({layer:{_name:this._name}});
                }
            }
        }
        this._oldZoom = zoom;
    },

    load: function() {
        var b = map.getBounds();
        var url = L.Util.template(this._url, L.extend({
            s: subdomains[0],
	        ralo: long2ra(b.getEast()).toFixed(4),
	        rahi: long2ra(b.getWest()).toFixed(4),
	        declo: lat2dec(b.getSouth()).toFixed(4),
	        dechi: lat2dec(b.getNorth()).toFixed(4),
            id: this._url_name,
            layer: layer_name,
            ver: getcatversion(this._name),
        }, this._url_args));
        this._counter += 1;
        this._status && this._status.html('loading...');
        console.log('Loading: ' + this._name + ' for counter ' + this._counter);
        $.getJSON(url, this.loaded.bind(this, this._counter));
        console.log('Called getJSON');
    },

    loaded: function(counter, result) {
        console.log('Loaded catalog for ' + this._name);
        if (counter != this._counter) {
            console.log(this._name + ': loaded counter ' + counter + ' but ' +
                        this._counter + ' is current.');
            return;
        }
        this._status && this._status.html('');
        if (!this._show) {
            console.log('Not showing layer ' + this._name);
            return;
        }
        var circles = this.getLayer(result);
        //console.log('Got marker layer ' + circles);
        // remove old layers
        for (var k in this._layers) {
	        if (k < counter) {
	            //console.log(this._name + ': removing previous counter ' + k);
	            this._group.removeLayer(this._layers[k]);
	            delete this._layers[k];
                //console.log(this._name + ': now contains layers:', this._group.getLayers());
	        } else {
	            console.log(this._name + ': k ' + k + ' vs counter ' + counter);
	        }
        }
        this._group.clearLayers();
        this._group.addLayer(circles);
        // save this new layer
        this._layers[counter] = circles;
        //console.log(this._name + ': saved counter ' + counter);
        this.fire('loaded', {'counter':counter, 'result':result});
    },

    removeAllLayers: function() {
        for (var key in this._layers) {
	        //console.log(this._name + ' removeAllLayers: removing ' + key);
	        var circles = this._layers[key];
	        this._group.removeLayer(circles);
	        delete this._layers[key];
        }
        this._group.clearLayers();
    },

    getLayer: function(result) {
        console.log('CatalogOverlay.getLayer()');
        var showlabels = (map.getZoom() >= this._labelsMinZoom);
        var rdlist = result['rd'];
        var circleList = new Array(rdlist.length);
        var clong = map.getCenter().lng;
        var radii = result['radiusArcsec'];
        var abratio = result['abRatio'];
        var posAngle = result['posAngle'];
        var weights = result['weight'];
        var tooltipStyle = this.getTooltipStyle();

        // HACK
        //console.log('showlabels: ' + showlabels + ', rdlist length: ' + rdlist.length +
        //', tooltypeStyle: ' + tooltipStyle);
        if (rdlist.length > 100) {
            //showlabels = false;
            //console.log('Tooltip style before: ' + tooltipStyle);
            tooltipStyle['permanent'] = false;
            //console.log('Tooltip style after: ' + tooltipStyle);
        }

        for (var i=0, len=rdlist.length; i<len; i++) {
            var r = rdlist[i][0];
            var d = rdlist[i][1];
            var lat = dec2lat(d);
            var lng = ra2long_C(r, clong);
            var style = this._style;
            if (style == undefined) {
                style = {};
            }
            var color = this.getColor(result, i);
            if (color !== undefined) {
                style = Object.assign(style, {'color':color});
            }
            if (weights !== undefined) {
                style = Object.assign(style, {'weight':weights[i]});
            }
            var radius = this._radius;
            if (radii) {
	            // arcsec to meters:
	            var meters = (radii[i] * 30.87) || 30;
                radius = meters;
            }
            if (abratio && posAngle) {
                var circ = L.ellipse([lat, lng], [radius,radius*abratio[i]], posAngle[i], style);
            } else {
                var circ = L.circle([lat, lng], radius, style);
            }
	        if (showlabels) {
                var txt = this.getLabel(result, i);
                if (txt.length > 0) {
                    circ.bindTooltip(txt, tooltipStyle);
                }
	        }
            var txt = this.getPopupText(result, i);
            if (txt.length > 0) {
                circ.popupText = txt;
                circ.on('click', function(e) {
                    popup.setLatLng(e.latlng)
                         .setContent(e.target.popupText)
                         .openOn(map);
                    L.DomEvent.stopPropagation(e);
                });
            }
            circleList[i] = circ;
        }
        return L.layerGroup(circleList);
    },

    getTooltipStyle() {
        return { permanent: true, interactive: true,
                 className: 'spectrumTooltip' };
    },

    getLabel: function(json, i) {
        return json['name'][i];
    },

    getPopupText: function(json, i) {
        return '';
    },
    
    getColor: function(json, i) {
        if (!('color' in json)) {
            //return undefined;
            return self._color;
        }
        return json['color'][i];
    },

    getLinkHere: function() {
        return this._url_term;
    },

    initLinkHere: function(val) {
    },

});

var BrightCatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
        var oname = json['name'][i];
        var name = oname;
        var altnames = json['altname'];
        if (altnames[i].length > 0) {
            name = name + ' (' + altnames[i] + ')';
        }
	    name = '<a href="http://simbad.u-strasbg.fr/simbad/sim-basic?Ident=' +
            oname.replace(' ','+') + '">' + name + '</a>';
        return name;
    },
});

var GalaxyCatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
        var oname = json['name'][i];
        var name = oname;
	    name = '<a href="http://simbad.u-strasbg.fr/simbad/sim-basic?Ident=' +
            oname.replace(' ','+') + '">' + name + '</a>';
        return name;
    },
});

var GCsPNeCatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
        var oname = json['name'][i];
        var name = oname;
        if ('altname' in json) {
            var altnames = json['altname'];
            if (altnames[i].length > 0) {
                name = name + ' (' + altnames[i] + ')';
            }
        }
	    name = '<a href="http://simbad.u-strasbg.fr/simbad/sim-basic?Ident=' +
            oname.replace(' ','+') + '">' + name + '</a>';
        return name;
    },
});

var StarMaskCatalog = CatalogOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this._style = {'fillOpacity':0,
                       'weight':3,
                      };
      },

    getLabel: function(json, i) {
        return json['name'][i];
    },
    getPopupText: function(json, i) {
        return '';
    },
    getTooltipStyle() {
        return { permanent: false, interactive: true,
        className: 'tooltipbg',
      };
    },
});

var sga_popup = function(json, i) {
        var ra = json['rd'][i][0];
        var dec = json['rd'][i][1];
        var name = json['name'][i];
        var pgc = json['pgc'][i];
    var groupname = json['groupname'][i];
    s = '<a href="http://leda.univ-lyon1.fr/ledacat.cgi?o=' + name + '">' + name + '</a>';
    s += '<br/>Group: ' + groupname;
        // matching map/cats.py : cat_sga
        r = json['radiusArcsec'][i] * 2 / 60.;
        s += '<br/>RA Dec='+ra.toFixed(6)+' '+dec.toFixed(6);
        s += '<br/>D(26)='+r.toFixed(3)+' arcmin, b/a='+json['abRatio'][i].toFixed(2)+', PA='+json['posAngleDisplay'][i].toFixed(1)+' deg<br/>';
        z = json['redshift'][i];
        t = json['type'][i];
        if (t.length > 0)
            s += 'Type: '+t+' ';
        if (z != -1.0)
            s += ', Redshift='+z.toFixed(4);
        return s;
}

var SGACatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
        return sga_popup(json, i);
    },

    getPopupText: function(json, i) {
        return sga_popup(json, i);
    },

    getTooltipStyle() {
        return { permanent: false, interactive: true,
	         className: 'tooltipbg', };
    },

    getLayer: function(result) {
        layergroup = CatalogOverlay.prototype.getLayer.call(this, result);
        // Add crosshairs
        var rdlist = result['rd'];
        if (rdlist.length == 0) {
            return layergroup;
        }
        var clong = map.getCenter().lng;
        var radii = result['radiusArcsec'];
        var abratio = result['abRatio'];
        var posAngle = result['posAngle'];
        var plines = [];
        console.log('this._style:', this._style);
        for (var i=0, len=rdlist.length; i<len; i++) {
            var r = rdlist[i][0];
            var d = rdlist[i][1];
            var lat = dec2lat(d);
            var lng = ra2long_C(r, clong);
            var style = Object.create(this._style);
            console.log('style:', style);
            var color = this.getColor(result, i);
            if (color !== undefined) {
                style = Object.assign(style, {'color':color});
                console.log('style after setting color:', style);
            }
            var radius = this._radius;
            if (radii) {
                // arcsec -> degrees
                radius = radii[i] / 3600.;
            }
            if (abratio && posAngle) {
                var ab = abratio[i];
                var pa = -posAngle[i];
            } else {
                var ab = 1.0;
                var pa = 0.;
            }
            var cosdec = Math.cos(lat * Math.PI / 180.0);
            pa = pa * Math.PI / 180.0;
            lng1 = lng + radius * Math.cos(pa) / cosdec;
            lng2 = lng - radius * Math.cos(pa) / cosdec;
            lat1 = lat + radius * Math.sin(pa);
            lat2 = lat - radius * Math.sin(pa);
            plines.push([[lat1, lng1], [lat2, lng2]]);
            lng1 = lng + ab * radius * -Math.sin(pa) / cosdec;
            lng2 = lng - ab * radius * -Math.sin(pa) / cosdec;
            lat1 = lat + ab * radius * Math.cos(pa);
            lat2 = lat - ab * radius * Math.cos(pa);
            plines.push([[lat1, lng1], [lat2, lng2]]);
        }
        console.log('rdlist:', rdlist.length);
        console.log('style:', style)
        style = Object.assign(style, {'weight': 1});
        layergroup.addLayer(L.polyline(plines, style));
        return layergroup;
    },

});

var PhotozCatalog = CatalogOverlay.extend({
    //initialize: function(name, pretty, kwargs) {
    //    CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
    //    this._radius = 
    //},
    getLabel: function(json, i) {
        return 'z = ' + json['phot_z_mean'][i].toFixed(3) + ' &plusmn; ' +
            json['phot_z_std'][i].toFixed(3);
    },
    //getPopupText: function(json, i) {
    //    return sga_popup(json, i);
    //},
    getTooltipStyle() {
        return { permanent: false, interactive: true, };
    },
    getLayer: function(result) {
        //console.log('getLayer: style', self._style);
        var wt = [];
        var rads = [];
        var dz = result['phot_z_std'];
        for (var i=0, len=dz.length; i<len; i++) {
            if (dz[i] > 0.2) {
                wt.push(2);
                rads.push(40 / 30.);
            } else {
                wt.push(5);
                rads.push(50 / 30.);
            }
        }
        result['weight'] = wt;
        result['radiusArcsec'] = rads;
        return CatalogOverlay.prototype.getLayer.call(this, result);
    },
});

var MangaCatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
      var label = '<a href="https://dr16.sdss.org/marvin/galaxy/' + json['plate'][i] + '-' + json['ifudsgn'][i] + '/">' + json['name'][i]
                        + '  (' + json['plate'][i]+'-'+json['ifudsgn'][i] + ')</a>';
        return label;
    },

    getLayer: function(result) {
        var showlabels = (map.getZoom() >= this._labelsMinZoom);
        var rdlist = result['rd'];
        var group = [];
        var clong = map.getCenter().lng;
        var tooltipStyle = this.getTooltipStyle();
        for (var i=0, len=rdlist.length; i<len; i++) {
            var r = rdlist[i][0];
            var d = rdlist[i][1];
            var lat = dec2lat(d);
            var lng = ra2long_C(r, clong);
            var style = this._style;
  /*
            var color = this.getColor(result, i);
            if (color !== undefined) {
                style = Object.assign(style, {'color':color});
            }
   */
            var color = 'yellow';
            var poly = [];
            var jhex = result['hexes'][i];
            console.log('Manga row ' + i + ': hex size ' + jhex.length);
            for (var j=0, plen=jhex.length; j<plen; j++) {
                poly.push([dec2lat(jhex[j][1]), ra2long_C(jhex[j][0], clong)]);
            }
            var hex = L.polygon(poly, {fill:false, color:color, weight:4});

	        if (showlabels) {
                var txt = this.getLabel(result, i);
                if (txt.length > 0) {
                    hex.bindTooltip(txt, tooltipStyle);
                }
	        }
            var txt = this.getPopupText(result, i);
            if (txt.length > 0) {
                hex.popupText = txt;
                hex.on('click', function(e) {
                    popup.setLatLng(e.latlng)
                         .setContent(e.target.popupText)
                         .openOn(map);
                    L.DomEvent.stopPropagation(e);
                });
            }

            group.push(hex);

            var fibers = [];
            var jfibs = result['fibers'][i];
            for (var j=0, plen=jfibs.length; j<plen; j++) {
                circ = L.circle([dec2lat(jfibs[j][1]), ra2long_C(jfibs[j][0], clong)],
                                arcsecToMeters(1.0),
                                {'color':'yellow', 'fillOpacity':0.0, 'weight':1,
                                 'opacity': 0.3});
                fibers.push(circ);

                group.push(circ);
            }
            //group.push(L.layerGroup(fibers));

        }

        return L.layerGroup(group);
    },


});

var SdssSpectraCatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
        zw = '';
        zwval = json['zwarning'][i];
        //console.log('zwarning: ' + zwval);
        if (zwval > 0) {
            zw = ' (Zwarn=0x' + zwval.toString(16) + ')';
        }
        var label = '<a href="https://dr16.sdss.org/optical/spectrum/view?mjd=' +
            json['mjd'][i] + '&fiberid=' + json['fiber'][i] + '&plateid=' +
            json['plate'][i] + '&zwarning=0&matches=any">' + json.name[i] + zw + '</a>';
        return label;
    },

    getColor: function(json, i) {
        var label = json.name[i];
        if (label.startsWith("QSO")) {
            return "#4444ff";
        } else if (label.startsWith("GALAXY")) {
            return "#ffffff";
        } else if (label.startsWith("STAR")) {
            return "#ff4444";
        } else {
            return "#888888";
        }
    },
});

var Deep2SpectraCatalog = CatalogOverlay.extend({
    getLabel: function(json, i) {
        var label = json.name[i];
        return label;
    },
});

var DesiTargetCatalog = CatalogOverlay.extend({
    getLayer: function(result) {
        var targetids = result['targetid'];
        var rdlist = result['rd'];
        var fluxes = result['fluxes'];
        var nobs = result['nobs'];
        var labels = result['name'];
        var colors = result['color'];
        var radii = result['radius'];

        var circleList = new Array(rdlist.length);
        var clong = map.getCenter().lng;
        var zoom = map.getZoom();

        for (var i=0, len=rdlist.length; i<len; i++) {
            var r = rdlist[i][0];
            var d = rdlist[i][1];
            var lat = dec2lat(d);
            var lng = ra2long_C(r, clong);
            var color = 'blue';
            var weight = 5;
            if (typeof(defaultcolor) != 'undefined') {
                color = defaultcolor;
            }
            if (colors !== undefined) {
                color = colors[i];
            }
            if (radii === undefined) {
                rad = this._radius;
            } else {
                // radius is in meters
                rad = radii[i];
                rad = arcsecToMeters(rad);
            }

            var circ = L.circle([lat, lng], rad,
                                {'color':color, 'fillOpacity':0,
                                'weight':5, 'opacity': 0.2});
            if (labels !== undefined && zoom > 13) {
                var txt = labels[i];
                if (txt.length > 0) {
                    circ.bindTooltip(txt, { permanent: true, interactive: true });
                }
            }
    
            circ.ra = r;
            circ.dec = d;
            //circ.type = typ;
            circ.fluxes = (fluxes     ? fluxes[i] : {});
            circ.nobs   = (nobs       ? nobs  [i] : {});
            circ.targetid = targetids ? targetids[i] : '';
            circ.on('click', onTargetClick);
            circleList[i] = circ;
        }
        return L.layerGroup(circleList);
    },
});

function onTargetClick(e) {
    console.log('onTargetClick');
    src = e.target;
    fluxstr = '';
    if ('g' in src.fluxes) {
        fluxstr += 'g=' + fluxToMag(src.fluxes.g).toFixed(2);
    }
    if ('r' in src.fluxes) {
        fluxstr += ', r=' + fluxToMag(src.fluxes.r).toFixed(2);
    }
    if ('z' in src.fluxes) {
        fluxstr += ', z=' + fluxToMag(src.fluxes.z).toFixed(2);
    }
    if ('W1' in src.fluxes) {
        fluxstr += ', W1=' + fluxToMag(src.fluxes.W1).toFixed(2);
    }
    if ('W2' in src.fluxes) {
        fluxstr += ', W2=' + fluxToMag(src.fluxes.W2).toFixed(2);
    }
    nobs_str = '';
    if (src.nobs) {
        nobs_g = 0
        if ('g' in src.nobs) {
    	    nobs_g = src.nobs.g;
        }
        nobs_r = 0
        if ('r' in src.nobs) {
    	    nobs_r = src.nobs.r;
        }
        nobs_z = 0
        if ('z' in src.nobs) {
    	    nobs_z = src.nobs.z;
        }
        nobs_str = '<br/>Number of exposures: g=' + nobs_g + ', r=' + nobs_r + ', z=' + nobs_z;
    }
    txt = 'Target RA,Dec = ' + src.ra.toFixed(4) + ', ' + src.dec.toFixed(4) +
        '<br/>Mags: ' + fluxstr +
        nobs_str +
        '<br/>Targetid: ' + src.targetid;
    console.log('Popup text: ' + txt);
    popup.setLatLng(e.latlng).setContent(txt).openOn(map);
    explode;
    L.DomEvent.stopPropagation(e);
}










function layerMatchesEvent(layer, event) {
    return (layer._name == event.layer._name);
}

var TiledOverlay = CatalogOverlay.extend({

    initialize: function(tw, name, pretty, kwargs) {
        CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        // count of how many tile loads are outstanding
        this._loadingTiles = 0;
        this._tw = tw;
        tw.on('tilevisible',   this.tileVisible.bind(this));
        tw.on('tileinvisible', this.tileInvisible.bind(this));
    },

    tileVisible: function(e) {
        if (!this._show) {
            return;
        }
        var coords = e.coords;
        console.log('Layer ' + this._name + ': tile visible: z ' + coords.z + ', x,y' +
                           coords.wrapx + ', ' + coords.y);
        if (coords.z === undefined) {
            return;
        }
        if (coords.z < this._minZoom) {
            return;
        }
        this.load(coords.z, coords.wrapx, coords.y);
    },

    load: function(zoom, x, y) {
        //console.log('Loading tiled catalog: URL pattern: ' + this._url +
        //            ' x,y,zoom: ' + x + ',' + y + ', ' + zoom);
        var s = getSubdomain(x, y);
	    var url = L.Util.template(this._url, L.extend({
            s: s,
            z: zoom,
            x: x,
            y: y,
            id: this._url_name,
            ver: getcatversion(this._name),
	    }));
        this._loadingTiles += 1;
        this.setStatusText();
        $.getJSON(url, this.loaded.bind(this, zoom, x, y));
    },

    setStatusText: function() {
        if (this._loadingTiles == 0) {
            this._status && this._status.html('');
        } else {
            this._status && this._status.html('loading ' + this._loadingTiles
                                              + '...');
        }
    },

    tileInvisible: function(e) {
        var key = e.key;
        if (!(key in this._layers)) {
            return;
        }
        var circles = this._layers[key];
        this._group.removeLayer(circles);
    },

    // override superclass
    mapBoundsChanged: function() {
    },

    overlayAdded: function(e) {
        console.log('overlayAdded (in TiledOverlay): ' + this._name);
        if (!layerMatchesEvent(this, e)) {
            console.log('!layerMatchesEvent');
            return;
        }
        this._show = true;
	    if (map.getZoom() < this._minZoom) {
            console.log('zoom < my minZoom');
            return;
        }
        // load all visible tiles
        console.log('Loading visible tiles: tileWatcher is ' + this._tw);
        console.log('Loading', this._tw.getVisibleTiles().length, 'visible tiles');
        for (var key in this._tw.getVisibleTiles()) {
            console.log('Adding overlay ' + this._name + ': tile ' + key);
            // parse into zoom:x:y
            var words = key.split(':');
            var zoom = parseInt(words[0]);
            var x = parseInt(words[1]);
            var y = parseInt(words[2]);
            this.load(zoom, x, y);
        }
    },

    loaded: function(zoom, tilex, tiley, result) {
        //console.log('Loaded: zoom ' + zoom + ' x,y ' + tilex + ',' + tiley);
        // waiting for how many tiles now?
        this._loadingTiles -= 1;
        this.setStatusText();
        if (!this._show) {
            console.log('not shown');
            return;
        }
        var circles = this.getLayer(result);
        this._group.addLayer(circles);
        // save this new layer
        var key = ''+zoom+':'+tilex+':'+tiley;
        this._layers[key] = circles;
        this.fire('loaded', {'zoom':zoom, 'x':tilex, 'y':tiley, 'result':result});
    },
});

var decals_getLayer = function(result, radius, defaultcolor, tooltipStyle) {
    var rdlist = result['rd'];
    var objtype = result['sourcetype'];
    var fluxes = result['fluxes'];
    var nobs = result['nobs'];
    var bricknames = result['bricknames'];
    var objids = result['objids'];
    var labels = result['names'];
    var circleList = new Array(rdlist.length);
    var clong = map.getCenter().lng;
    var radii = result['radius'];
    var colors = result['color'];

    var abratios = result['abratio'];
    var posangles = result['posangle'];
    
    for (var i=0, len=rdlist.length; i<len; i++) {
        var r = rdlist[i][0];
        var d = rdlist[i][1];
        var lat = dec2lat(d);

        //console.log('RA,Dec ' + r + ', ' + d);

        var lng = ra2long_C(r, clong);
        var color = 'blue';
        if (typeof(defaultcolor) != 'undefined') {
            color = defaultcolor;
        }
        var typ = 'nil';
        if (colors !== undefined) {
            color = colors[i];
        } else if (objtype !== undefined) {
            typ = objtype[i];
            // PSF
            if (objtype[i] == 'P') {
                color = '#9AFE2E'; //#D8F781'; //'green';
            } else if (objtype[i] == 'R') {
	            // Rex
                color = 'orange';
            } else if (objtype[i] == 'D') {
                color = 'red';
            } else if (objtype[i] == 'E') {
                color = '#58ACFA'; // blue
            } else if ((objtype[i] == 'C') || (objtype[i] == 'S')) {
                // COMP / SER
                color = '#DA81F5'; // magenta
            }
        }
        if (radii === undefined) {
            rad = radius;
        } else {
            // radius is in meters
            rad = radii[i];
        }
        //console.log('Lat,Long,Radius ' + lat + ', ' + lng + ', ' + rad);
        rad = arcsecToMeters(rad);

        if ((abratios === undefined) || (posangles === undefined)) {
            var circ = L.circle([lat, lng], rad,
                                {'color':color, 'fillOpacity':0, 'weight':5});
        } else {
            var circ = L.ellipse([lat, lng], [rad, rad*abratios[i]], posangles[i],
                                 {'color':color, 'fillOpacity':0, 'weight':5});
        }
        if (labels === undefined) {
        } else {
            var txt = labels[i];
            if (typeof(tooltipStyle) != 'undefined') {
              ttstyle = tooltipStyle;
            } else {
              ttstyle = { permanent: true, interactive: true };
            }
            txt = '' + txt;
            if (txt.length > 0) {
                circ.bindTooltip(txt, ttstyle);
            }
        }

        circ.ra = r;
        circ.dec = d;
        circ.type = typ;
        circ.fluxes = (fluxes ? fluxes[i] : {});
        circ.nobs   = (nobs   ? nobs  [i] : {});
        circ.brickname = bricknames ? bricknames[i] : '';
        circ.objid     = objids     ? objids    [i] : '';
        circ.on('click', onSourceClick);
        circleList[i] = circ;
    }
    return L.layerGroup(circleList);
};

// DECaLS catalog
var DecalsCatalogLayer = TiledOverlay.extend({
    getLayer: function(result) {
        return decals_getLayer(result, 1);
    },

    /* Consider accessing list of available tiles directly via MyTileLayer.getTiles()
       rather than using the TileWatcher stuff.

        overlayAdded: function(e) {
            console.log('DecalsCatalogLayer: overlayAdded: map layers:');
            var alltiles = [];
            map.eachLayer(function(layer) {
                console.log('Layer: ' + layer._name + ' / ' + layer.name + ': ', layer);
                try {
                    tiles = layer.getTiles();
                    for (var k in tiles) {
                        code = tiles[k];
                        if (code in alltiles) {
                        } else {
                            alltiles.push(code);
                            console.log('  tile ' + code);
                        }
                    }
                    console.log('Total of', alltiles.length);
                } catch {}
            });
            TiledOverlay.prototype.overlayAdded.call(this, e);
        },
    */
    
});

// User catalogs
var userCatN = 100;

var UserCatalogLayer = CatalogOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this.color = '#00ff00';
        this._catname = this._url_args['cat'];
        this._catdata = null;
        this._catindex = 0;
        this._catoffset = 0;
    },

    ready: function() {
        console.log(this._name + ' ready function called (UserCatalogLayer)');
        this._checkbox = getOverlayCheckbox(this._pretty);
        // _checkbox is a jQuery node
        //console.log('checkbox:', this._checkbox);
        var nxt = this._checkbox.next();

        // add a 'next' button after the layer name span
        var nextbutton = L.DomUtil.create('a', 'layer-next');
        var nextbuttonid = this._name + '_next';
        nextbutton.id = nextbuttonid;
        nxt.after(nextbutton);
        nxt.after('&nbsp;');
        // find it with jQuery
        var jbutton = $('#' + nextbuttonid);
        jbutton.attr('href', '#');
        jbutton.click(this.nextObject.bind(this));
        jbutton.html('next');

        // catalog index
        var indx = L.DomUtil.create('span', 'layer-index');
        var indxid = this._name + '_indx';
        indx.id = indxid;
        nxt.after(indx);
        nxt.after('&nbsp;');
        // find it with jQuery
        this._index = $('#' + indxid);
        this._index.html('[' + (this._catoffset + this._catindex) + ']');

        // prev catalog entry
        var prevbutton = L.DomUtil.create('a', 'layer-prev');
        var prevbuttonid = this._name + '_prev';
        prevbutton.id = prevbuttonid;
        nxt.after(prevbutton);
        nxt.after('&nbsp;');
        // find it with jQuery
        var jbutton = $('#' + prevbuttonid);
        jbutton.attr('href', '#');
        jbutton.click(this.prevObject.bind(this));
        jbutton.html('prev');

        // add status span after the layer name span
        var stat = L.DomUtil.create('span', 'layer-status');
        var statid = this._name + '_status';
        stat.id = statid
        nxt.after(stat);
        nxt.after('&nbsp;');
        // find it with jQuery
        this._status = $('#' + statid);

    },

    nextObject: function() {
      console.log('next object for catalog ' + this._catname);
      if (this._catdata != null) {
        this._catindex += 1;
        console.log('catalog index now ', this._catindex);
        if (this._catindex >= this._catdata.length) {
          console.log('index exceeds catalog length: ' + this._catdata.length);
          this._catoffset += this._catdata.length;
          this._catindex = -1;
        } else {
          this._index.html('[' + (this._catoffset + this._catindex) + ']');
          ra  = this._catdata[this._catindex][0];
          dec = this._catdata[this._catindex][1];
          console.log('New RA,Dec ' + ra + ', ' + dec);
          lat = dec2lat(dec);
          lng = ra2long_C(ra, 0);
          map.panTo(L.latLng(lat,lng));
          return;
        }
      }

      // retrieve next chunk.

      var url = L.Util.template(usercat2_url, {
        s: subdomains[0],
        cat: this._catname,
        start: this._catoffset,
        N: userCatN,
      });
      console.log('Loading catalog: ' + this._catname + ' from ' + url);
      $.getJSON(url, this.catLoaded.bind(this, true));
    },

    prevObject: function() {
      console.log('prev object for catalog ' + this._catname);
      if (this._catindex + this._catoffset < 0) {
        // don't go negative
        return;
      }
      if (this._catdata != null) {
        this._catindex -= 1;
        console.log('catalog index now ', this._catindex);
        if (this._catindex < 0) {
          console.log('index negative');
          this._catoffset -= this._catdata.length;
          this._catindex = -1;
        } else {
          this._index.html('[' + (this._catoffset + this._catindex) + ']');
          ra  = this._catdata[this._catindex][0];
          dec = this._catdata[this._catindex][1];
          console.log('New RA,Dec ' + ra + ', ' + dec);
          lat = dec2lat(dec);
          lng = ra2long_C(ra, 0);
          map.panTo(L.latLng(lat,lng));
          return;
        }
      }

      // retrieve prev chunk.
      var url = L.Util.template(usercat2_url, {
        s: subdomains[0],
        cat: this._catname,
        start: this._catoffset,
        N: userCatN,
      });
      console.log('Loading catalog: ' + this._catname + ' from ' + url);
      $.getJSON(url, this.catLoaded.bind(this, false));
    },

    catLoaded: function(nxt, result) {
      console.log('User catalog loaded: ' + this._catname);
      this._catdata = result['rd'];
      if (nxt) {
        this.nextObject();
      } else {
        this._catindex = this._catdata.length;
        this.prevObject();
      }
    },

    getLayer: function(result) {
        return decals_getLayer(result, 10, this.color, this.getTooltipStyle());
    },

    getTooltipStyle() {
        return { permanent: true, interactive: true,
                 className: 'tooltipbg', };
    },
});


var addUserCatalogs = function() {
  
}
                             

// DESI tiles

var DesiTileLayer = CatalogOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this.color = '#00ff00';
        this.rscale = kwargs['rscale'] || 1.0;
    },

    getLayer: function(result) {
        //return decals_getLayer(result, 10, this.color, this.getTooltipStyle());
        var targetids = result['targetid'];
        var rdlist = result['rd'];
        var fiber = result['fiberid'];
        var bitnames = result['bits'];
        if (bitnames === undefined) {
            // target functions vs tile function
            bitnames = result['name'];
        }

        var circleList = [];
        var clong = map.getCenter().lng;
        var zoom = map.getZoom();
        for (var i=0, len=rdlist.length; i<len; i++) {
            var r = rdlist[i][0];
            var d = rdlist[i][1];
            var lat = dec2lat(d);
            var lng = ra2long_C(r, clong);

            var poptxt = ('RA,Dec ' + r.toFixed(4) + ', ' + d.toFixed(4) + '<br/>' +
                       bitnames[i] + '<br/>' +
                          'Targetid: ' + targetids[i]);
            var popf = function(t, e) {
                popup.setLatLng(e.latlng).setContent(t).openOn(map);
                L.DomEvent.stopPropagation(e);
            };
            var dopop = popf.bind(null, poptxt);

            if (fiber != undefined)
                var txt = 'Fiber ' + fiber[i] + ': ' + bitnames[i];
            else
                var txt = bitnames[i];
            //var txt = '';
            //var bits = bitnames[i].split(', ');
            // var bset = new Set();
            // for (var j=0, blen=bits.length; j<blen; j++) {
            //     var words = bits[j].split('_');
            //     bset.add(words[0]);
            // }
            // //var txt = bitnames[i];
            // var txt = '';
            // for (let b of bset) {
            //     if (txt.length)
            //         txt += ', ';
            //     txt += b;
            // }
            var rscale = this.rscale;
            
            var got = false;
            if (bitnames[i].includes('ELG')) {
                var circ = L.circle([lat, lng], 300. * rscale,
                                    {'color': '#88CCEE', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            if (bitnames[i].includes('QSO')) {
                var circ = L.circle([lat, lng], 500. * rscale,
                                    {'color': 'green', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            if (bitnames[i].includes('LRG')) {
                var circ = L.circle([lat, lng], 400. * rscale,
                                    {'color': 'red', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            if (bitnames[i].includes('MWS')) {
                var circ = L.circle([lat, lng], 600. * rscale,
                                    {'color': 'yellow', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            if (bitnames[i].includes('BGS')) {
                var circ = L.circle([lat, lng], 700. * rscale,
                                    {'color': 'white', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            if (bitnames[i].includes('STD')) {
                var circ = L.circle([lat, lng], 700. * rscale,
                                    {'color': '#CCCCCC', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            if (bitnames[i].includes('SCND')) {
                var circ = L.circle([lat, lng], 700. * rscale,
                                    {'color': 'orange', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
                got = true;
            }
            // SKY
            if (!got) {
                var circ = L.circle([lat, lng], 400. * rscale,
                                    {'color': '#888888', 'fillOpacity':0,
                                     'weight': 3, 'opacity': 0.8});
                //circ.bindTooltip(txt, {permanent:true, interactive:true});
                circ.bindTooltip(txt, {permanent:false, interactive:true});
                circ.on('click', dopop);
                circleList.push(circ);
            }
    
            // circ.ra = r;
            // circ.dec = d;
            // //circ.type = typ;
            // circ.fluxes = (fluxes     ? fluxes[i] : {});
            // circ.nobs   = (nobs       ? nobs  [i] : {});
            // circ.targetid = targetids ? targetids[i] : '';
            // circ.on('click', onTargetClick);
            // circleList[i] = circ;
        }
        return L.layerGroup(circleList);
    },

    //getTooltipStyle() {
    //    return { permanent: true, interactive: true,
    //             className: 'tooltipbg', };
    //},
});


var added_desi_tiles = [];

// Overlay tree objects.
var desi_tile_list = [];

var addDesiTile = function(tileid) {
    console.log('addDesiTile('+tileid+')');
    // no duplicates!
    if (added_desi_tiles.includes(tileid)) {
        return;
    }
    added_desi_tiles.push(tileid);
    
    var name = 'desitile-' + tileid;
    var pretty = 'DESI Tile ' + tileid + ' (fiberassign)';
    var layer = new DesiTileLayer(name, pretty,
        {'url': desitile_url, 'url_args': {'tile': ''+tileid}});
    var group = layer.getGroup();
    group._name = name;
    //overlayTree.push({ label: pretty,
    //                   layer: group });
    var layer = { label: pretty,
                  layer: group };
    desi_tile_list.push(layer);
    map.addLayer(group);

    // Spectra
    var name = 'desi-spec-daily-tile' + tileid;
    var pretty = 'DESI Tile ' + tileid + ' (spectra)';
    var layer = new DesiSpectraCatalog(name, pretty, 'daily',
                                       {'url': smallcat_url + '&tile=' + tileid,
                                        'url_name': 'desi-spec-daily',
                                        'urlTerm': 'tile='+tileid,
                                        'radius': 600,
                                       });
    //'url_args': {'tile': ''+tileid}});
    var group = layer.getGroup();
    group._name = name;
    //overlayTree.push({ label: pretty,
    //                   layer: group });
    var layer = { label: pretty,
                  layer: group };
    desi_tile_list.push(layer);
    map.addLayer(group);

    
    return layer;
}
                             


function getkeys(obj) {
    var s = '';
    for (var k in obj) {
        if (s.length) {
            s += ', ';
        }
        s += k;
    }
    return s;
}

function getSubdomain(x,y) {
	return subdomains[Math.abs(x + y) % subdomains.length];
}

function fluxToMag(f) {
    return -2.5 * (Math.log(f)/Math.log(10.) - 9);
}

function exposures_radec_url(ra, dec) {
    return '/viewer/exposures/?ra=' + ra.toFixed(4) + '&dec=' + dec.toFixed(4) + '&layer=' + layer_name;
}

function exposures_radec_link(ra, dec) {
    
    url = exposures_radec_url(ra, dec);
    return '<a href="' + url + '">' +
        ra.toFixed(4) + ', ' + dec.toFixed(4) + '</a>';
    
}

function onSourceClick(e) {
    console.log('onSourceClick');
    src = e.target;
    fluxstr = '';
    if ('g' in src.fluxes) {
        fluxstr += 'g=' + fluxToMag(src.fluxes.g).toFixed(2);
    }
    if ('r' in src.fluxes) {
        fluxstr += ', r=' + fluxToMag(src.fluxes.r).toFixed(2);
    }
    if ('i' in src.fluxes) {
        if (src.fluxes.i != 0 && src.nobs.i > 0) {
            fluxstr += ', i=' + fluxToMag(src.fluxes.i).toFixed(2);
        }
    }
    if ('z' in src.fluxes) {
        fluxstr += ', z=' + fluxToMag(src.fluxes.z).toFixed(2);
    }
    nobsstr = '';
    if ('g' in src.nobs) {
	    nobsstr += 'g=' + src.nobs.g;
    }
    if ('r' in src.nobs) {
	    nobsstr += ', r=' + src.nobs.r;
    }
    if ('i' in src.nobs) {
	    nobsstr += ', i=' + src.nobs.i;
    }
    if ('z' in src.nobs) {
	    nobsstr += ', z=' + src.nobs.z;
    }
    console.log('layer_name ' + layer_name);
    txt = 'Source RA,Dec = ' + exposures_radec_link(src.ra, src.dec) +
        '<br/>Source type: ' + src.type +
        '<br/>Mags: ' + fluxstr +
        '<br/>Brick: ' + src.brickname + ', Objid: ' +
        '<a href="' + "/viewer/XXX/cat".replace("XXX", layer_name) +
        '?ralo=' + (src.ra - 0.001).toFixed(4) + '&rahi=' + (src.ra + 0.001).toFixed(4) +
        '&declo=' + (src.dec - 0.001).toFixed(4) + '&dechi=' + (src.dec + 0.001).toFixed(4) +
        '&objid=' + src.objid + '">' +
        src.objid +
        '</a>' +
	    '<br/>Number of exposures: ' + nobsstr;
    console.log('Popup text: ' + txt);
    popup.setLatLng(e.latlng).setContent(txt).openOn(map);
    L.DomEvent.stopPropagation(e);
}

function brick_detail(ovname, name, aparams) {
    return 'Brick: <a href="/viewer/brick/' + name
        + '/?layer=' + layer_name + '">' + name + '</a>';
}

function ccd_detail(layer_name, name, aparams) {
    return 'CCD: <a href="/viewer/ccd/' + layer_name + '/'
                     + name.replace(' ','-')
                     + '/"' + aparams + '>' + name + '</a>';
}

function sdss_ccd_detail(layer_name, name, aparams) {
    // HACK -- name is 'SDSS R/C/F ##/##/##' -- parse!
    var words = name.split(' ');
    var rcf = words[2].split('/');
    var run = rcf[0];
    var camcol = rcf[1];
    var field = rcf[2];
    return 'CCD: <a href="https://dr12.sdss.org/fields/runCamcolField?run='
          + run + '&camcol=' + camcol + '&field=' + field
          + '"' + aparams + '>' + name + '</a>';
}

function exp_detail(layer_name, name, aparams) {
    return 'Exposure: <a href="/viewer/exposure/' + layer_name + '/' +
        name.replace(' ','-') + '/"' + aparams + '>' + name + '</a>';
}

function plate_detail(layer_name, name, aparams) {
    //console.log('Plate_detail: ' + layer_name + ', ' + name + ', ' + aparams);
    return '<a href="https://dr16.sdss.org/optical/spectrum/search?plateid=' + name + '&action=search"' + aparams + '>Plate ' + name + '</a>';
}

function linkHereURL(latlng) {
    var ra  = long2ra(latlng.lng);
    var dec = lat2dec(latlng.lat);

    var radecstr = 'ra=' + ra.toFixed(4) + '&dec=' + dec.toFixed(4);
    var linkqstr = radecstr + '&layer=' + layer_name;
    var zoomstr = '&zoom=' + map.getZoom();

    var linkurl = '?' + linkqstr + zoomstr;
    if ('plate' in qstr) {
        linkurl += '&plate=' + qstr['plate'];
    }
    for (var i=0,len=overlays.length; i<len; i++) {
        console.log('Overlay ' + overlays[i]._name + ' shown? ' + overlays[i]._show);
        if (overlays[i]._show) {
            linkurl += '&' + overlays[i].getLinkHere()
        }
    }
    if ('mark' in qstr) {
        linkurl += '&mark=' + qstr['mark'];
    }
    if ('poly' in qstr) {
        linkurl += '&poly=' + qstr['poly'];
    }
    if ('tile' in qstr) {
        linkurl += '&tile=' + qstr['tile'];
    }
    return linkurl;
}
 
function onMapClick(e) {
    var ra  = long2ra(e.latlng.lng);
    var dec = lat2dec(e.latlng.lat);

    var radecstr = 'ra=' + ra.toFixed(4) + '&dec=' + dec.toFixed(4);
    var linkqstr = radecstr + '&layer=' + layer_name;
    var zoomstr = '&zoom=' + map.getZoom();

    var pixscale = 0.25 * Math.pow(2, 14 - map.getZoom());
    var pixstr = '&pixscale=' + pixscale.toFixed(2);

    var cutout = '/viewer/cutout.jpg?' + linkqstr + pixstr;
    var cutout_fits = '/viewer/cutout.fits?' + linkqstr + pixstr;
    var linkurl = linkHereURL(e.latlng);

    //var abs_cutout = hostname_url + cutout;
    var abs_cutout = 'https://www.legacysurvey.org/viewer/cutout.jpg?' + linkqstr + pixstr;
    var abs_link = hostname_url + '/viewer/' + linkurl;

    var discuss = 'http://discuss.legacysurvey.org/new-topic?title=Interesting+object&body=' +
        '%3Cimg+src%3D%22' + encodeURIComponent(abs_cutout) + '%22%3E' +
        '%0A' +
        encodeURIComponent(abs_link) +
        '&category=Interesting+things';

    var datalink = '/viewer/data-for-radec/?' + radecstr + '&layer=' + layer_name;

    // add ra,dec lo,hi bounds to data-for-radec link
    var b = map.getBounds();
    datalink += ('&ralo=' + long2ra(b.getEast()).toFixed(4) +
                 '&rahi=' + long2ra(b.getWest()).toFixed(4) +
                 '&declo=' + lat2dec(b.getSouth()).toFixed(4) +
                 '&dechi=' + lat2dec(b.getNorth()).toFixed(4));

    var spacer = ' &nbsp;|&nbsp; ';

    var txt =
        'RA,Dec = ' + ra.toFixed(4) + ', ' + dec.toFixed(4) +
        '<br/><a href="' + linkurl +
        '">Link Here</a>' + spacer +
        
          '<a href="' + datalink + '">Data</a>' + spacer +
          '<a href="' + cutout + '">Cutout</a> (<a href="' + cutout_fits + '">FITS</a>)' + spacer +
          
            '<a href="' + exposures_radec_url(ra,dec) + '">Single Exposures</a>' + spacer +
          
        '<a href="http://simbad.u-strasbg.fr/simbad/sim-coo?Coord=' + ra.toFixed(4) + 'd' + dec.toFixed(4) + 'd' + '&CooFrame=ICRS&CooEpoch=2000&CooEqui=2000&Radius=2&Radius.unit=arcmin&submit=submit+query&CoordList=">Look up in Simbad</a>' + spacer +
        
        '<a href="' + discuss + '">Discuss This Object</a>';

    for (var i=0; i<polygonOverlays.length; i++) {
        var overlay = polygonOverlays[i];
        var objs = overlay.under(e.latlng);
        for (var j=0; j<objs.length; j++) {
            if (typeof(overlay._detail) != 'undefined') {
                txt += '<br/>' + overlay._detail(overlay._url_name, objs[j], '');
            }
        }
    }

    popup.setLatLng(e.latlng).setContent(txt).openOn(map);
}

function updateInfoBox(latlng) {
    var ra  = long2ra(latlng.lng);
    var dec = lat2dec(latlng.lat);
    lastLatLng = latlng;
    if (infoBoxActive) {
	    info._div.innerHTML = 'RA,Dec = ' + ra.toFixed(4) + ", " + dec.toFixed(4) +
            ", zoom " + map.getZoom();
    }
}

function onMouseMove(e) {
    //console.log('mouse move: ' + e.latlng);
    updateInfoBox(e.latlng);
    if (inbrickccdAdded) {
        inbrickccdUpdate(e);
    }
}

function inbrickccdUpdate(props) {
    if (props == undefined) {
        props = { 'latlng': lastLatLng };
    }
    if (!inbrickccdAdded) {
        inbrickccdAdded = true;
        inbrickccd.addTo(map);
    }

    var txt = '';
    for (var i=0; i<polygonOverlays.length; i++) {
        var overlay = polygonOverlays[i];
        if (overlay._detail_list == undefined) {
            continue;
        }
        var objs = overlay.under(props.latlng);
        txt += overlay._detail_list(overlay, objs);
    }
                                      
    inbrickccd._div.innerHTML = txt;
}


// "Bricks", "CCDs", etc button checked
function overlayAdded(e) {
    //console.log('OverlayAdded:', e);
    console.log('  added overlay name: ' + e.layer._name);
    if (inbrickccdAdded) {
        return;
    }
    for (var i=0; i<polygonOverlays.length; i++) {
        if (polygonOverlays[i]._show) {
            inbrickccdAdded = true;
            inbrickccd.addTo(map);
            break;
        }
    }
}

// "Sources", "Bricks", "CCDs" button unchecked
function overlayRemoved(e) {
    if (!inbrickccdAdded) {
        return;
    }
    var show = false;
    for (var i=0; i<polygonOverlays.length; i++) {
        if (polygonOverlays[i]._show) {
            show = true;
        }
    }
    if (!show) {
        map.removeControl(inbrickccd);
        inbrickccdAdded = false;
    }
}

// List of bricks / CCDs under the mouse position
var inbrickccd = L.control({'position': 'bottomleft'});
inbrickccd.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'inbrickccd');
    return this._div;
};
var inbrickccdAdded = false;

var map = L.map('map', {
    zoomsliderControl: false,
    zoomControl: false,
    //worldCopyJump: true,
    tap: false,
});
var popup = L.popup();

//var login_info = L.control({'position':'topright'});
//login_info.onAdd = function (map) {
//    this._div = L.DomUtil.create('div', 'login_info');
//    this._div.innerHTML = 'Signed in as  | <a href="logout">Sign Out</a>';
//    return this._div;
//};
//login_info.addTo(map);

map.attributionControl.options.prefix = '<a href="https://www.legacysurvey.org/svtips/">Tips &amp; Tricks | ' +
     map.attributionControl.options.prefix + ' | <a href="https://github.com/legacysurvey/imagine">Source</a>';

// default to 1.
var tileversions = {
    'sfd':2,
    'decaps2': 2,
    'decaps2-model': 2,
    'decaps2-resid': 2,
    'decaps': 2,
    'decaps-model': 2,
    'decaps-resid': 2,
    'dr9k-north': 2,
    'dr9k-north-model': 2,
    'dr9k-north-resid': 2,
    'dr9k-south': 2,
    'dr9k-south-model': 2,
    'dr9k-south-resid': 2,
};
var catversions  = {
};

function getversion(layer) {
    if (layer in tileversions) {
        return tileversions[layer];
    }
    return 1;
}

function getcatversion(layer) {
    if (layer in catversions) {
        return catversions[layer];
    }
    return 1;
}

var attribs = {
    'ls': '<a href="https://www.legacysurvey.org/acknowledgment">&copy; Legacy Surveys / D.Lang (Perimeter Institute)</a>',
    'hsc2': '<a href="https://www.nao.ac.jp/en/terms/copyright.html">&copy;</a> <a href="https://hsc-release.mtk.nao.ac.jp/doc/index.php/tools-2/">NAOJ / HSC Collaboration</a>',
    'hsc3': '<a href="https://www.nao.ac.jp/en/terms/copyright.html">&copy;</a> <a href="https://hsc-release.mtk.nao.ac.jp/doc/index.php/data-access__pdr3/">NAOJ / HSC Collaboration</a>',
    'sdss': '<a href="http://sdss.org/collaboration/#image-use">&copy;</a> <a href="http://sdss.org">Sloan Digital Sky Survey SDSS</a>',
    'galex': '<a href="https://www.jpl.nasa.gov/imagepolicy/">&copy;</a> <a href="http://www.galex.caltech.edu/">GALEX, Courtesy NASA/JPL-Caltech</a>',
    'sfd': '<a href="https://dustmaps.readthedocs.io/en/latest/maps.html#sfd">&copy; SFD</a>',
    'wssa': '<a href="https://faun.rc.fas.harvard.edu/ameisner/wssa/processing.html">WISE 12-micron map processed by Aaron Meisner</a>',
    'halpha': '<a href="https://faun.rc.fas.harvard.edu/dfink/skymaps/halpha/">&copy;</a> <a href="https://amundsen.swarthmore.edu/SHASSA/">SHASSA</a>/<a href="https://www1.phys.vt.edu/~halpha/">VTSS</a>/<a href="http://www.astro.wisc.edu/wham-site/">WHAM</a> <a href="https://faun.rc.fas.harvard.edu/dfink/skymaps/halpha/">composite by Doug Finkbeiner (skymaps.info)</a>',
    'vlass': '<a href="https://public.nrao.edu/media-use/">&copy;</a> <a href="https://public.nrao.edu/vlass/">NRAO / VLA Sky Survey</a>',
    'des': '<a href="https://des.ncsa.illinois.edu/terms">&copy;</a> <a href="https://www.darkenergysurvey.org/">The Dark Energy Survey Data Release 1</a>',
    'ps1': 'Pan-STARRS1',
    'unwise': '<a href="https://www.legacysurvey.org/acknowledgment">&copy; unWISE / NASA/JPL-Caltech / D.Lang (Perimeter Institute)</a>',
};

var decals_attrib = '<a href="https://www.legacysurvey.org/acknowledgment">&copy; Legacy Surveys / D.Lang (Perimeter Institute)</a>';

var tiles;

var defaultTile = null;

var get_tile_layer = function(name) {
    var layer = tile_layers[name];
    //console.log('Layer', name, ':', layer);

    var pretty = layer[0];
    var urls = layer[1];
    var maxnativezoom = layer[2];
    var attrib = layer[3];
    if (attrib in attribs)
        attrib = attribs[attrib];
    var kwargs = {};
    if (layer.length == 5)
        kwargs = layer[4];

    var args = {
        maxZoom: maxZoom,
        minZoom: minZoom,
        maxNativeZoom: maxnativezoom,
        attribution: attrib,
        id: name,
        ver: getversion(name),
        unloadInvisibleTiles: true,
        urlPatterns: urls,
    };
    for (var key in kwargs) {
        args[key] = kwargs[key];
    }
    var tiles = new ZoomRangeTileLayer(args);
    tiles.name = name;
    tiles.pretty = pretty;
    return tiles;
}

var added = false;
var layer_name = layer_initial;
var baseMaps = {};
var namedLayers = {};


var testLayers = [];
var testTree = [];


// initialize layers


findlayer('ls-dr9-north');
findlayer('ls-dr9-north-model');
findlayer('ls-dr9-north-resid');



findlayer('ls-dr10-south');
findlayer('ls-dr10-south-model');
findlayer('ls-dr10-south-resid');

findlayer('ls-dr10-mid');
findlayer('ls-dr10-mid-model');
findlayer('ls-dr10-mid-resid');

// grz
findlayer('ls-dr10-south-grz');
findlayer('ls-dr10-south-model-grz');
findlayer('ls-dr10-south-resid-grz');

findlayer('ls-dr10-mid-grz');
findlayer('ls-dr10-mid-model-grz');
findlayer('ls-dr10-mid-resid-grz');

split_layer('ls-dr10', 'Legacy Surveys DR10 images', 32.375,
            namedLayers['ls-dr9-north'],
            namedLayers['ls-dr10-mid'],
            namedLayers['ls-dr10-south'],
            {attribution: attribs['ls']});

split_layer('ls-dr10-model', 'Legacy Surveys DR10 models', 32.375,
            namedLayers['ls-dr9-north-model'],
            namedLayers['ls-dr10-mid-model'],
            namedLayers['ls-dr10-south-model'],
            {attribution: attribs['ls']});

split_layer('ls-dr10-resid', 'Legacy Surveys DR10 residuals', 32.375,
            namedLayers['ls-dr9-north-resid'],
            namedLayers['ls-dr10-mid-resid'],
            namedLayers['ls-dr10-south-resid'],
            {attribution: attribs['ls']});

split_layer('ls-dr10-grz', 'Legacy Surveys DR10 images (grz)', 32.375,
            namedLayers['ls-dr9-north'],
            namedLayers['ls-dr10-mid-grz'],
            namedLayers['ls-dr10-south-grz'],
            {attribution: attribs['ls']});

split_layer('ls-dr10-model-grz', 'Legacy Surveys DR10 models (grz)', 32.375,
            namedLayers['ls-dr9-north-model'],
            namedLayers['ls-dr10-mid-model-grz'],
            namedLayers['ls-dr10-south-model-grz'],
            {attribution: attribs['ls']});

split_layer('ls-dr10-resid-grz', 'Legacy Surveys DR10 residuals (grz)', 32.375,
            namedLayers['ls-dr9-north'],
            namedLayers['ls-dr10-mid-resid-grz'],
            namedLayers['ls-dr10-south-resid-grz'],
            {attribution: attribs['ls']});



findlayer('ls-dr9-south');
findlayer('ls-dr9-mid');

split_layer('ls-dr9', 'Legacy Surveys DR9 images', 32.375,
            namedLayers['ls-dr9-north'],
            namedLayers['ls-dr9-mid'],
            namedLayers['ls-dr9-south'],
            {attribution: attribs['ls']});


findlayer('ls-dr9-mid-model');
findlayer('ls-dr9-south-model');
split_layer('ls-dr9-model', 'Legacy Surveys DR9 models', 32.375,
            namedLayers['ls-dr9-north-model'],
            namedLayers['ls-dr9-mid-model'],
            namedLayers['ls-dr9-south-model'],
            {attribution: attribs['ls']});



findlayer('ls-dr9-mid-resid');
findlayer('ls-dr9-south-resid');
split_layer('ls-dr9-resid', 'Legacy Surveys DR9 residuals', 32.375,
            namedLayers['ls-dr9-north-resid'],
            namedLayers['ls-dr9-mid-resid'],
            namedLayers['ls-dr9-south-resid'],
            {attribution: attribs['ls']});


 // enable_dr9


findlayer('ls-dr8-north');
findlayer('ls-dr8-mid');
findlayer('ls-dr8-south');

findlayer('ls-dr8-north-model');
findlayer('ls-dr8-mid-model');
findlayer('ls-dr8-south-model');


findlayer('ls-dr8-north-resid');
findlayer('ls-dr8-mid-resid');
findlayer('ls-dr8-south-resid');


split_layer('ls-dr8', 'Legacy Surveys DR8 images', 32.375,
            namedLayers['ls-dr8-north'],
            namedLayers['ls-dr8-mid'],
            namedLayers['ls-dr8-south'],
            {attribution: attribs['ls']});


split_layer('ls-dr8-model', 'Legacy Surveys DR8 models', 32.375,
                    namedLayers['ls-dr8-north-model'],
                    namedLayers['ls-dr8-mid-model'],
                    namedLayers['ls-dr8-south-model'],
                    {attribution: attribs['ls']});



split_layer('ls-dr8-resid', 'Legacy Surveys DR8 residuals', 32.375,
                    namedLayers['ls-dr8-north-resid'],
                    namedLayers['ls-dr8-mid-resid'],
                    namedLayers['ls-dr8-south-resid'],
                    {attribution: attribs['ls']});


 // enable_dr8



findlayer('decals-dr7')
findlayer('mzls+bass-dr6')
findlayer('ls-dr67-mid')

split_layer('ls-dr67', 'Legacy Surveys DR6+DR7', 32.375,
            namedLayers['mzls+bass-dr6'],
            namedLayers['ls-dr67-mid'],
            namedLayers['decals-dr7'],
            {attribution: attribs['ls']});


// may be overridden by 'qstr' below.
var last_layer_name = layer_name;

function doGoto(fly) {
    ra  = $('#gotora').val();
    dec = $('#gotodec').val();
    zoom = $('#gotozoom').val();
    console.log('RA ' + ra + ', Dec ' + dec + ', Zoom ' + zoom);
    ra = parseFloat(ra);
    dec = parseFloat(dec);
    zoom = parseInt(zoom);
    console.log('RA ' + ra + ', Dec ' + dec + ', Zoom ' + zoom);
    if (fly) {
      clong = map.getCenter().lng;
      duration = $('#gotodur').val();
      dest = L.latLng(dec2lat(dec), ra2long_C(ra, clong));
      console.log('Fly from', map.getCenter(), 'to', dest, 'zoom', zoom, 'duration', duration);
      updateInfoBox(map.getCenter());
      map.flyTo(dest, zoom,
                { animate:true, duration:duration });
    } else {
      map.setView(L.latLng(dec2lat(dec), ra2long_C(ra, 0)), zoom);
    }
}

function submitGoto(e) {
    console.log('submit goto ' + typeof(e) + getkeys(e));
    e.stopPropagation();
    doGoto(false);
}

function submitGotoFly(e) {
    console.log('submit goto fly ' + typeof(e) + getkeys(e));
    e.stopPropagation();
    infoBoxActive = true;
    doGoto(true);
}

function cancelGoto(e) {
    console.log('cancel goto ' + typeof(e));
    infoBoxActive = true;
    onMouseMove({ latlng: map.getCenter() });
    e.stopPropagation();
}

function gotoKeypress(e) {
    if (e.which == 13) {
	    // Enter key
	    doGoto(false);
    }
}
function gotoDurKeypress(e) {
    if (e.which == 13) {
	    // Enter key (in Duration box)
	    doGoto(true);
    }
}

function infoBoxClicked(e) {
    console.log('Info box clicked');
    if (!infoBoxActive) {
	    return;
    }
    infoBoxActive = false;
    ra  = long2ra(map.getCenter().lng);
    dec = lat2dec(map.getCenter().lat);
    ra = ra.toFixed(4);
    // trim trailing zeros
    while (ra.length && ra.charAt(ra.length-1) == '0') {
	    ra = ra.substring(0, ra.length-1);
    }
    dec = dec.toFixed(4);
    while (dec.length && dec.charAt(dec.length-1) == '0') {
	    dec = dec.substring(0, dec.length-1);
    }

    info._div.innerHTML = '<center><form>RA,Dec '
	    + '<input name="ra"  id="gotora"  value="' + ra
	    + '" size=6>, '
	    + '<input name="dec" id="gotodec" value="' + dec
	    + '" size=6>, '
	    + 'zoom <input name="zoom" id="gotozoom" value="' + map.getZoom() + '" size=4>'
	    + '<br/><br/>'
	    + '<input type="button" value="Go" class="gotobutton" id="gotosubmit">'
	    + '<input type="button" value="Cancel" class="gotobutton" id="gotocancel">'
        + '<br/><br/>'
	    + 'Duration: <input name="dur" id="gotodur" value="5" size="4"> '
        + '<input type="button" value="Fly" class="gotobutton" id="gotofly">'
	    + '</form></center>';
    $('#gotosubmit').click(submitGoto);
    $('#gotofly').click(submitGotoFly);
    $('#gotocancel').click(cancelGoto);
    $('#gotora').keypress(gotoKeypress);
    $('#gotodec').keypress(gotoKeypress);
    $('#gotozoom').keypress(gotoKeypress);
    $('#gotodur').keypress(gotoDurKeypress);
}

var infoBoxActive = true;
var info = L.control({'position':'topleft'});
info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info');
    this._div.innerHTML = 'RA,Dec = ' + ra_initial.toFixed(4) + ", " + dec_initial.toFixed(4) + ", zoom " + zoom_initial;
    return this._div;
};
info.addTo(map);

// from static/leaflet-zoomslider -- add the zoom slider manually so it goes *after* the RA,Dec box.
map.addControl(new L.Control.Zoomslider());

disableMouseEventPropagation(info);
var container = info.getContainer();
L.DomEvent.on(container, 'click', infoBoxClicked);


// upload catalog input field
var upload = L.control({'position':'bottomleft'});
upload.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'upload');
    this._div.innerHTML = 'Custom catalog upload (FITS or CSV; RA,Dec,[name,color,radius]): <form action="' + usercat_upload_url + '" method="POST" enctype="multipart/form-data"><input type="hidden" name="csrfmiddlewaretoken" value="SRVpfajjBYq89dkmEr9CLj2rd1X8EOkbTrjdgxBnDztQVsNqUhlMHAwrabt7m8jG"><input type="file" name="catalog" id="usercat_file" /><span id="upload_status"></span><input type="submit" value="Upload" id="usercat_submit" /></form>'
    return this._div;
};
upload.addTo(map);


// Named object search field
var objquery = L.control({'position':'bottomleft'});
objquery.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'objquery');
    this._div.innerHTML = 'Jump to object: <input type="text" id="objquery" value="NGC 5614" size="25"/> <span id="objquerystatus"></span>';
    return this._div;
};
objquery.addTo(map);
disableMouseEventPropagation(objquery);


// Brightness & contrast sliders
function addCSSFilterSlider(filterType) {
    let sliderControl = L.control({'position': 'bottomleft'})
    sliderControl.onAdd = function (map) {
        this._div = L.DomUtil.create('div', filterType);
        // Add input
        this._div.innerHTML = '<input type="range" min="0" max="10" value="1" step="0.1" class="slider" id="' + filterType + '">';
        // Add status text
        this._div.innerHTML += '<span id="' + filterType + '-status">' + filterType.charAt(0).toUpperCase() + filterType.slice(1) + ': 1</span>';
        return this._div;
    }
    sliderControl.addTo(map);
    let slider = document.getElementById(filterType);
    slider.oninput = function() {
        // Put all filters into one css rule
        let sliders = document.querySelectorAll('input[type="range"]');
        let css = '-webkit-filter: '
        sliders.forEach(s => {
            css += s.id + '(' + s.value + ') ';
        })
        css += ';'
        // Update css
        let styleElement = document.getElementById('tile-filters');
        styleElement.innerHTML = '.leaflet-tile { '+ css + '}';
        // Update slider status text
        let statusElement = document.getElementById(this.id+'-'+'status');
        statusElement.innerHTML = this.id.charAt(0).toUpperCase() + this.id.slice(1) + ': ' + this.value;
    }
    disableMouseEventPropagation(sliderControl);
}
if (!sparseMode) {
  addCSSFilterSlider('brightness');
  addCSSFilterSlider('contrast');
}






// A list of object names mapped to [lat,lng,zoom], for history navgation
var hashLocations = {};

var objqueryString = '';
 
function objQueryLoaded(result) {
    console.log('Result: ' + result);
    if ("error" in result) {
        $('#objquerystatus').html(result["error"]);
        return;
    }
    var ra = result['ra'];
    var dec = result['dec'];
    var lat = dec2lat(dec);
    var lng = ra2long_C(ra, 0.);
    var zoom = map.getZoom();
    map.setView(L.latLng(lat, lng), zoom);
    $('#objquerystatus').html("");
    location.hash = result['name'];
    hashLocations[location.hash] = [lat, lng, zoom];
    console.log('Saved hash location:', location.hash, '=', hashLocations[location.hash]);

    // if DESI tile query, also add overlay checkbox
    var words = objqueryString.split(" ");
    if (words.length === 2 && words[0] === "TILE") {

        if ('tile' in qstr) {
            qstr['tile'] = qstr['tile'] + ',' + words[1];
        } else {
            qstr['tile'] = words[1];
        }
        var linkurl = linkHereURL(map.getCenter());
        console.log('Link URL:', linkurl);
        window.location.href = linkurl;

        // var layer = addDesiTile(words[1]);
        // 
        // //var sel = $(".leaflet-layerstree-opened");
        // //var sel = $(".leaflet-layerstree-header");
        // //var sel = $(".leaflet-layerstree-hide");
        // //var sel = $(".leaflet-layerstree-opened.leaflet-layerstree-hide");
        // 
        // // var sel = $(".leaflet-layerstree-closed.leaflet-layerstree-hide");
        // // sel = sel.parent().next();
        // // sel.each(function(index,obj){
        // //     console.log('hidden element', index, ':', obj);
        // //     console.log($(obj).text())
        // // });
        // 
        // var sel = $(".leaflet-layerstree-header");
        // sel.each(function(index,obj){
        //     console.log('header', index, obj);
        //     console.log($(obj).text());
        // });
        // 
        // //sel = sel.children().children().filter(".leaflet-layerstree-opened");
        // //sel = sel.not(children.filter(".leaflet-layerstree-hide"));
        // 
        // //sel = sel.text();
        // //for (var i=0; i<sel.length; i++) {
        // //    console.log('hidden element', i, ':', sel[i]);
        // //}
        // 
        // // this expands all nodes...
        // //  layerTree.setOverlayTree({ label: 'Overlays', children: overlayTree });
        // //  layerTree.collapseTree(false);
        // //  layerTree.collapseTree(true);
        // 
        // //if (layerTree !== undefined)
        // //layerTree._addLayer(layer.layer, layerTree._layers.length, true);
        // //layerTree._update();
        // //}
    }
}

$(document).ready(function() {

    $('#objquery').keydown(function(event) {
        // when Enter is hit in the Object name search box
        if (event.keyCode == 13) {
            var qstring = $('#objquery').val();
            objqueryString = qstring;

            // [this is old...]
            // Check if query is DESI tile
            var splited = qstring.split(" ");
            if (splited.length === 2 && splited[0] === "DESI") {
                window.location.href = window.location.origin +
                                       window.location.pathname +
                                       "?desi_tile=" + splited[1] +
                                       '&layer=' + layer_name +
                                       '&desifoot&desifiber' +
                                       '&zoom=8';
                return;
            }

            // Check if query is BRICK
            if (splited[0] === "BRICK") {
                // Default input syntax: "BRICK 1234p567"
                var brickParam = splited[1];
                // Alternative input syntax: "BRICK 1234 567"
                if (splited.length === 3) {
                    brickParam = splited[1] + parameterizeDec(splited[2]);
                }
                window.location.href = window.location.origin +
                                       window.location.pathname +
                                       "?brick=" + brickParam +
                                       '&layer=' + layer_name;
                return;
            }

            console.log('query string:', qstring);
            qstring = encodeURIComponent(qstring);
            console.log('encoded query string:', qstring);

            var url = L.Util.template(name_query_url, L.extend({
                obj: qstring,
            }));
            console.log('URL:', url);
            
            if (qstring.length == 0) {
                url += '&layer=' + layer_name;
            }
            $.getJSON(url, objQueryLoaded);
            $('#objquerystatus').html('Searching...');
            return false;
        }
    });
    // stop event propagation to the map layer
    $('#objquery').click(function(event) {
        return false;
    });

    // stop event propagation to the map layer
    $('#upload').click(function(event) {
        console.log('upload clicked.');
        return false;
    });

    $('#usercat_file').click(function(event) {
        event.stopPropagation();
    });
    $('#usercat_submit').click(function(event) {
        event.stopPropagation();
    });

    // set initial hash location
    var loc = [map.getCenter().lat, map.getCenter().lng, map.getZoom()];
    //console.log('Initial location:', loc);
    
    location.hash = galname_initial;
    
    hashLocations[location.hash] = loc;
    //console.log('Initial hashLocations:', hashLocations);

});

function onHashChange() {
    console.log('Hash changed to', location.hash);
    if (location.hash in hashLocations) {
        var loc = hashLocations[location.hash];
        console.log('Known hash location:', loc);
        var lat = loc[0];
        var lng = loc[1];
        var zoom = loc[2];
        map.setView(L.latLng(lat, lng), zoom);
    }
}

L.DomEvent.addListener(window, 'hashchange', onHashChange);

var PolygonOverlay = CatalogOverlay.extend({

    initialize: function(name, pretty, kwargs) {
        CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        if ('doHighlight' in kwargs) {
            this._doHighlight = kwargs['doHighlight'];
        } else {
            this._doHighlight = true;
        }
        this._detail = kwargs['detail']
        this._detail_list = kwargs['detail_list']
        this._highlighted = null;
        this._filled = {};
        this._current = {};
        this._color = 'blue';
    },

    loaded: function(counter, result) {
        // reset current polygon list.
        this._current = {};
        CatalogOverlay.prototype.loaded.call(this, counter, result);
    },

    getLabel: function(json, i) {
        return '';
    },

    getLayer: function(result) {
        var objs = result['polys'];
        //console.log('Received ' + objs.length + ' Objs');
        var drawList = [];
        var clong = map.getCenter().lng;
        for (var i=0, len=objs.length; i<len; i++) {
            var name = objs[i].name;
            var rd = objs[i].radecs;
            var poly = [];
            for (var j=0, plen=rd.length; j<plen; j++) {
                poly.push([dec2lat(rd[j][1]), ra2long_C(rd[j][0], clong)]);
            }
            var color = objs[i].color || this._color;
            var c = L.polygon(poly, {fill:false, color:color, weight:4 });
            c.orig_color = color;
            c.name = name;
            if (this._doHighlight) {
                c.on('mouseover', this.mouseOver.bind(this));
                c.on('mouseout',  this.mouseOut.bind(this));
            }
            drawList.push(c);
            this._current[name] = c;
        }
        return L.layerGroup(drawList);
    },

    mouseOver: function(e) {
        var obj = e.target;
        //if (obj.doHighlight) {
        //obj.setStyle({color: 'yellow'});
        //}
        this._highlighted = obj.name;
        // remove other objs from fills
        for (var i=0, len=this._filled.length; i<len; i++) {
            if (this._filled[i] != obj.name) {
                this.unhighlight(this._filled[i]);
            }
        }
        if (!(obj.name in this._filled)) {
            this.highlight(obj);
        }
        inbrickccdUpdate(e);
    },

    unhighlight: function(name) {
        this._group.removeLayer(this._filled[name]);
        delete this._filled[name];
    },

    highlight: function(obj) {
        var cf = L.polygon(obj.getLatLngs(),
                           {fill:true, fillOpacity:0.05, color:'yellow',
                            weight:1});
        this._filled[obj.name] = cf;
        cf.addTo(this._group);
        cf.bringToBack();
    },

    mouseOut: function(e) {
        var obj = e.target;
        obj.setStyle({color: obj.orig_color});
        this._highlighted = null;
        if (obj.name in this._filled) {
            this.unhighlight(obj.name);
        }
        inbrickccdUpdate(e);
    },

    under: function(latlng) {
        var objs = [];
        if (!this._show) {
            return [];
        }
        var geos = [];
        for (var name in this._current) {
            var obj = this._current[name];
            var gj = obj.toGeoJSON();
            gj.properties['name'] = name;
            geos.push(gj);
        }
        var geo = {type:'FeatureCollection', features:geos};
        var leafgeo = L.geoJson(geo);
        var inside = leafletPip.pointInLayer(latlng, leafgeo);
        for (var i=0; i<inside.length; i++) {
            objs.push(inside[i].feature.properties.name);
        }
        if (this._doHighlight) {
            if (this._highlighted != null) {
                if (objs.indexOf(this._highlighted) == -1) {
                    objs.push(this._highlighted);
                }
            }
        }
        return objs;
    },

});

var CircleOverlay = PolygonOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        PolygonOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this._style = {'fill':false, 'color':color, 'weight':5 };
    },
    getLayer: function(result) {
        var objs = result['objs'];
        console.log('Creating CircleOverlays for ' + objs.length + ' objects');
        var objList = [];
        var clong = map.getCenter().lng;
        var tooltipStyle = this.getTooltipStyle();
        var showlabels = (map.getZoom() >= this._labelsMinZoom);
        
        var style = this.getStyle();
        for (var i=0, len=objs.length; i<len; i++) {
            var name = objs[i].name;
	        var meters = arcsecToMeters(3600 * objs[i].radius);
            var ra = objs[i].ra;
            var dec = objs[i].dec;
            var latlng = L.latLng(dec2lat(dec), ra2long_C(ra, clong));
            var color = objs[i].color || this._color;
            if (color !== undefined) {
                style = Object.assign(style, {'color':color});
            }
            var c = L.circle(latlng, meters, style);
            c.orig_color = color;
            c.name = name;
            if (this._doHighlight) {
                c.on('mouseover', this.mouseOver.bind(this));
                c.on('mouseout',  this.mouseOut.bind(this));
            }
	        if (showlabels) {
                var txt = this.getLabel(result, i);
                if (txt.length > 0) {
                    c.bindTooltip(txt, tooltipStyle);
                }
	        }
            var txt = this.getPopupText(result, i);
            if (txt.length > 0) {
                c.popupText = txt;
                c.on('click', function(e) {
                    popup.setLatLng(e.latlng)
                         .setContent(e.target.popupText)
                         .openOn(map);
                    L.DomEvent.stopPropagation(e);
                });
            }
            objList.push(c);
            this._current[name] = c;
        }
        return L.layerGroup(objList);
    },
    getStyle() {
        return this._style;
    },
    getTooltipStyle() {
        return { permanent: true, interactive: true,
                 className: 'spectrumTooltip' };
    },

    getLabel: function(json, i) {
        return json['objs'][i]['name'];
    },
    getPopupText: function(json, i) {
        return '';
    },

    highlight: function(obj) {
        var cf = L.circle(obj.getLatLng(), obj.getRadius(),
                           {fill:true, fillOpacity:0.05, color:'yellow',
                            weight:1});
        this._filled[obj.name] = cf;
        cf.addTo(this._group);
        cf.bringToBack();
    },

    under: function(latlng) {
        if (!this._show) {
            return [];
        }
        var objs = [];
        var geos = [];
        for (var name in this._current) {
            var obj = this._current[name];
	        if (latlng.distanceTo(obj.getLatLng()) < obj.getRadius()) {
		        objs.push(obj.name);
	        }
        }
        if (this._doHighlight) {
            if (this._highlighted != null) {
                if (objs.indexOf(this._highlighted) == -1) {
                    objs.push(this._highlighted);
                }
            }
        }
        return objs;
    },

});

var exp_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In ' + ov._dr_name + ' Exposures: <ul>'
    //console.log('Highlighted: ' + ov._highlighted);
    for (var j=0; j<objs.length; j++) {
        //console.log(' exposure: ' + objs[j]);
        var aparams = '';
        if (objs[j] == ov._highlighted) {
            aparams = ' class="highexp"';
        }
        txt += '<li>' + exp_detail(ov._url_name, objs[j], aparams) + '</li>';
    }
    txt += '</ul>';
    //console.log('Text: ' + txt);
    return txt;
};

var ccd_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In ' + ov._dr_name + ' CCDs: <ul>'
    for (var j=0; j<objs.length; j++) {
        var aparams = '';
        if (objs[j] == ov._highlighted) {
            aparams = ' class="highexp"';
        }
        txt += '<li>' + ccd_detail(ov._url_name, objs[j], aparams) + '</li>';
    }
    txt += '</ul>';
    return txt;
};

var sdss_ccd_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In ' + ov._dr_name + ' CCDs: <ul>'
    for (var j=0; j<objs.length; j++) {
        var aparams = '';
        if (objs[j] == ov._highlighted) {
            aparams = ' class="highexp"';
        }
        txt += '<li>' + sdss_ccd_detail(ov._url_name, objs[j], aparams) + '</li>';
    }
    txt += '</ul>';
    return txt;
};

var plate_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In SDSS Spectro Plates: <ul>';
    for (var j=0; j<objs.length; j++) {
        var aparams = '';
        if (objs[j] == ov._highlighted) {
            aparams = ' class="highexp"';
        }
        txt += '<li>' + plate_detail(ov._url_name, objs[j], aparams) + '</li>';
    }
    txt += '</ul>';
    return txt;
};



var ccdOverlay5 = new PolygonOverlay('decals-dr5-ccds',
                                     'DECaLS DR5 CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds5',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'decals-dr5',
                                     'dr_name': 'DR5',
                                    });
var expOverlay5 = new CircleOverlay('decals-dr5-exps',
                                    'DECaLS DR5 Exposures',
                                    {'url':exposures_url,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'exps5',
                                     'detail': exp_detail,
                                     'detail_list': exp_detail_list,
                                     'url_name': 'decals-dr5',
                                     'dr_name': 'DR5',
                                    });



var ccdOverlay6 = new PolygonOverlay('mzls+bass-dr6-ccds',
                                     'MzLS+BASS DR6 CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds6',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'mzls+bass-dr6',
                                     'dr_name': 'DR6',
                                    });



var ccdOverlay7 = new PolygonOverlay('decals-dr7-ccds',
                                     'DECaLS DR7 CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds7',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'decals-dr7',
                                     'dr_name': 'DR7',
                                    });
var expOverlay7 = new CircleOverlay('decals-dr7-exps',
                                    'DECaLS DR7 Exposures',
                                    {'url':exposures_url,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'exps7',
                                     'detail': exp_detail,
                                     'detail_list': exp_detail_list,
                                     'url_name': 'decals-dr7',
                                     'dr_name': 'DR7',
                                    });



var ccdOverlay8 = new PolygonOverlay('dr8-ccds',
                                     'Legacy Surveys DR8 CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds8',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr8',
                                     'dr_name': 'DR8',
                                    });



var ccdOverlay8n = new PolygonOverlay('dr8-north-ccds',
                                     'Legacy Surveys DR8-north CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds8n',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr8-north',
                                     'dr_name': 'DR8',
                                    });



var ccdOverlay8s = new PolygonOverlay('dr8-south-ccds',
                                     'Legacy Surveys DR8-south CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds8s',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr8-south',
                                     'dr_name': 'DR8',
                                    });
var expOverlay8s = new CircleOverlay('dr8-south-exps',
                                    'Legacy Surveys DR8-south Exposures',
                                    {'url':exposures_url,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'exps8',
                                     'detail': exp_detail,
                                     'detail_list': exp_detail_list,
                                     'url_name': 'ls-dr8-south',
                                     'dr_name': 'DR8',
                                    });






var ccdOverlay10 = new PolygonOverlay('dr10-ccds',
                                     'Legacy Surveys DR10 CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds10',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr10',
                                     'dr_name': 'DR10',
                                    });
var expOverlay10 = new CircleOverlay('dr10-exps',
                                    'Legacy Surveys DR10 Exposures',
                                    {'url':exposures_url,
                                     'labelsMinZoom': 7,
                                     'urlTerm': 'exps10',
                                     'detail': exp_detail,
                                     'detail_list': exp_detail_list,
                                     'url_name': 'ls-dr10-south',
                                     'dr_name': 'DR10',
                                    });



var ccdOverlay9 = new PolygonOverlay('dr9-ccds',
                                     'Legacy Surveys DR9 CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds9',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr9',
                                     'dr_name': 'DR9',
                                    });



var ccdOverlay9n = new PolygonOverlay('dr9-north-ccds',
                                     'Legacy Surveys DR9-north CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds9n',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr9-north',
                                     'dr_name': 'DR9',
                                    });



var ccdOverlay9s = new PolygonOverlay('dr9-south-ccds',
                                     'Legacy Surveys DR9-south CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccds9s',
                                     'detail': ccd_detail,
                                     'detail_list': ccd_detail_list,
                                     'url_name': 'ls-dr9-south',
                                     'dr_name': 'DR9',
                                    });
var expOverlay9s = new CircleOverlay('dr9-south-exps',
                                    'Legacy Surveys DR9-south Exposures',
                                    {'url':exposures_url,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'exps9',
                                     'detail': exp_detail,
                                     'detail_list': exp_detail_list,
                                     'url_name': 'ls-dr9-south',
                                     'dr_name': 'DR9',
                                    });


var brickOverlay = new PolygonOverlay('decals-bricks', 'Legacy Surveys Bricks',
                                      {'url': bricks_url,
                                       'minZoom': 1,
                                       'labelsMinZoom': 100,
                                       'doHighlight': false,
                                       'urlTerm': 'bricks',
                                       'detail': brick_detail,
                                       'detail_list': function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In: '
    for (var j=0; j<objs.length; j++) {
        txt += brick_detail(ov._url_name, objs[j], '');
    }
    return txt;
},
});

var unwise_tile_detail = function(layer_name, name, aparams) {
    return 'Tile: ' + name;
    //<a href="/viewer/brick/' + name
    //+ '/?layer=' + layer_name + '">' + name + '</a>';
    //return '';
}
var unwise_tile_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In: '
    var nin = 0;
    for (var j=0; j<objs.length; j++) {
        if (nin > 0)
            txt += ', ';
        txt += unwise_tile_detail(ov._url_name, objs[j], '');
        nin += 1;
    }
    return txt;
}
    

var unwiseTileOverlay = new PolygonOverlay('unwise-tiles',
                                 'unWISE tiles',
                                 {'url':ccds_url,
                                 'minZoom': 6,
                                 'labelsMinZoom': 100,
                                 'urlTerm': 'unwise_tile',
                                 'detail': unwise_tile_detail,
                                 'detail_list': unwise_tile_detail_list,
                                 'url_name': 'unwise-tiles',
                                 'dr_name': 'unWISE',
                                 });
unwiseTileOverlay._color = '#9040f0';



var ccdOverlaySdss = new PolygonOverlay('sdss-ccds',
                                 'SDSS CCDs',
                                    {'url':ccds_url,
                                     'minZoom': 8,
                                     'labelsMinZoom': 100,
                                     'urlTerm': 'ccdssdss',
                                     'detail': sdss_ccd_detail,
                                     'detail_list': sdss_ccd_detail_list,
                                     'url_name': 'sdss',
                                     'dr_name': 'SDSS',
                                    });



url = sdss_plates_url;
if ('plate' in qstr) {
    url += '&plate=' + qstr['plate'];
}
var plateOverlay = new CircleOverlay('sdss-plates',
                                     'SDSS Spectro Plates (DR16)',
                                    {'url': url,
                                     'labelsMinZoom': 100,
                                     'detail': plate_detail,
                                     'detail_list': plate_detail_list,
                                    });
console.log('plateOverlay: ' + plateOverlay);






var DesiTileOverlay = CircleOverlay.extend({
     highlight: function(obj) {
     },

    getTooltipStyle() {
        var z = map.getZoom()
        return { permanent: (z >= 12),
                 interactive: true,
                 //className: (z == 12 ? 'spectrumTooltipSmall' : 'spectrumTooltip'),
               };
    },

    getStyle() {
        var z = map.getZoom();
        var op = 0.05 * Math.pow(0.8, z);
        if (z >= 11) {
            op = 0.0;
        }
        console.log('DESI Tile opacity:', op);
        return {'fillOpacity': op};
    },
/*
     getPopupText: function(json, i) {
      return json['objs'][i]['name'];
  },
*/
});



var desi_edr_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In DESI EDR tiles: <ul>';
    for (var j=0; j<objs.length; j++) {
        var aparams = '';
        if (objs[j] == ov._highlighted) {
            aparams = ' class="highexp"';
        }
        txt += '<li>' + edr_detail(ov._url_name, objs[j], aparams) + '</li>';
    }
    txt += '</ul>';
    return txt;
};
var edr_detail = function(ov, objs, aparams) {
     return objs;
};
var desi_tiles_edr = new DesiTileOverlay('desi-tiles-edr',
                                         'DESI EDR tiles',
                                         {'url': smallcat_url,
                                          'url_args': { 'id': 'desi-tiles/edr',
                                                        'ver': getcatversion('desi-tiles/edr') },
                                          'labelsMinZoom': 100,
                                          'detail_list': desi_edr_detail_list,
                                          'detail': edr_detail,
                                         });




var desi_dr1_detail_list = function(ov, objs) {
    if (objs.length == 0) { return ''; }
    txt = 'In DESI DR1 tiles: <ul>';
    for (var j=0; j<objs.length; j++) {
        var aparams = '';
        if (objs[j] == ov._highlighted) {
            aparams = ' class="highexp"';
        }
        txt += '<li>' + dr1_detail(ov._url_name, objs[j], aparams) + '</li>';
    }
    txt += '</ul>';
    return txt;
};
var dr1_detail = function(ov, objs, aparams) {
     return objs;
};
var desi_tiles_dr1 = new DesiTileOverlay('desi-tiles-dr1',
                                         'DESI DR1 tiles',
                                         {'url': smallcat_url,
                                          'url_args': { 'id': 'desi-tiles/dr1',
                                                        'ver': getcatversion('desi-tiles/dr1') },
                                          'labelsMinZoom': 100,
                                          'detail_list': desi_dr1_detail_list,
                                          'detail': dr1_detail,
                                         });






var DesiSpectraCatalog = CatalogOverlay.extend({
    initialize: function(name, pretty, release, kwargs) {
        CatalogOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this.release = release;
        this.data_base_url = kwargs['data_base_url'];
    },

    getLayer: function(result) {
        console.log('DESI spectra catalog: getLayer()');
        rd = result['rd'];
        if (rd !== undefined) {
            lg = CatalogOverlay.prototype.getLayer.call(this, result);
        } else {
            lg = L.layerGroup([]);
        }

        cl_labels = result['cluster_labels'];

        cl_edges = result['cluster_edges'];
        if (cl_edges !== undefined) {
            var clong = map.getCenter().lng;
            for (var i=0, len=cl_edges.length; i<len; i++) {
                var rd = cl_edges[i];
                var poly = [];
                for (var j=0, plen=rd.length; j<plen; j++) {
                    poly.push([dec2lat(rd[j][1]), ra2long_C(rd[j][0], clong)]);
                }
                var c = L.polygon(poly, {fill:false, color:"white", weight:4 });

                if (cl_labels !== undefined) {
                    var lab = cl_labels[i];
                    var loc = L.latLng(dec2lat(lab[1]), ra2long_C(lab[0], clong));
                    var cl = L.circle(loc, {radius:0});
                    cl.bindTooltip(lab[2], {permanent:true, direction:'center'});
                    lg.addLayer(cl);
                }
                lg.addLayer(c);
            }
        }
        return lg;
    },

    getLabel: function(json, i) {
        return '<a href="' + root_url + 'desi-spectrum/' + this.release + '/'
            + 'targetid' + json['targetid'][i]
            + '">' + json['name'][i] + '</a>';
        //tile' + json['tileid'][i] +
            //+ '/fiber' + json['fiberid'][i] 
    },
    getTooltipStyle() {
        var z = map.getZoom()
        return { permanent: (z >= 12),
                 interactive: true,
                 className: (z == 12 ? 'spectrumTooltipSmall' : 'spectrumTooltip'),
                 bubblingMouseEvents: false,
               };
        //className: 'tooltipbg',
    },
    getPopupText: function(json, i) {
        var rd = json['rd'][i];
        var ra = rd[0];
        var dec = rd[1];
        s = this.getLabel(json, i)
            + '<br/>RA,Dec: ' + ra.toFixed(4) + ', ' + dec.toFixed(4)
            + '<br/>Targetid: ' + json['targetid'][i];
        if (this.data_base_url !== undefined) {
            var survey = json['survey'][i];
            var program = json['program'][i];
            var healpix = json['healpix'][i];
            var data_url = this.data_base_url + '/healpix/' + survey + '/' + program + '/' +
                Math.floor(healpix/100) + '/' + healpix + '/';
            s = s + '<br/><a href="' + data_url + '">DESI Data Directory</a>';
        }
        return s;
    },
});

var DesiObsCatalog = DesiSpectraCatalog.extend({
    getLabel: function(json, i) {
        var s = '';
        for (var j=0, len=json['targetid'][i].length; j<len; j++) {
            if (j > 0)
                s += ', ';
            s += '<a href="' + root_url + 'desi-obs/' + this.release + '/targetid' +
                json['targetid'][i][j] + '">' + json['name'][i][j] + '</a>';
        }
        return s;
    },
});




var desi_spec_edr = new DesiSpectraCatalog(
    'desi-spec-edr', 'DESI EDR spectra', 'edr',
    {'url': smallcat_url,
     'radius': 300,
     'labelsMinZoom': 10,
     'minZoom': 6,
     'data_base_url': 'https://data.desi.lbl.gov/public/edr/spectro/redux/fuji',
    });

  

  var desi_spec_dr1 = new DesiSpectraCatalog(
    'desi-spec-dr1', 'DESI DR1 spectra', 'dr1',
    {'url': smallcat_url,
     'radius': 300,
     'labelsMinZoom': 10,
     'minZoom': 6,
     'data_base_url': 'https://data.desi.lbl.gov/public/dr1/spectro/redux/iron',
    });




var polygonOverlays = [ 
    
    ccdOverlay5, expOverlay5,
    
    
    ccdOverlay6,
    
    
    ccdOverlay7, expOverlay7,
    
    
    ccdOverlay8,
    
    
    ccdOverlay8n,
    
    
    ccdOverlay8s, expOverlay8s,
    
    
    ccdOverlay10,
    expOverlay10,
    
    
    ccdOverlay9,
    
    
    ccdOverlay9n,
    
    
    ccdOverlay9s, expOverlay9s,
    
    
    brickOverlay,
    
    
    
    unwiseTileOverlay,
    
    
    
    ccdOverlaySdss,
    
    
    plateOverlay,
    
    
    desi_tiles_edr,
    
    
    desi_tiles_dr1,
    
    
];

console.log('Polygon overlays: ' + polygonOverlays.length);
for (var i=0; i<polygonOverlays.length; i++) {
console.log('polygon overlay ' + i + ':');
console.log(polygonOverlays[i]);
}
 

var decalscat5 = new DecalsCatalogLayer(tileWatcher,
                                        'decals-dr5',
                                        'DECaLS DR5 Catalog',
                                        {'url': cat_url,
                                         'minZoom': 12,
                                         'urlTerm': 'sources-dr5'});



var mzlsbasscat6 = new DecalsCatalogLayer(tileWatcher,
                                          'mzls+bass-dr6',
                                          'MzLS+BASS DR6 Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr6'});



var decalscat7 = new DecalsCatalogLayer(tileWatcher,
                                        'decals-dr7',
                                        'DECaLS DR7 Catalog',
                                        {'url': cat_url,
                                         'minZoom': 12,
                                         'urlTerm': 'sources-dr7'});



var dr8cat = new DecalsCatalogLayer(tileWatcher,
                                    'ls-dr8',
                                    'Legacy Surveys DR8 Catalog',
                                    {'url': cat_url,
                                     'minZoom': 12,
                                     'urlTerm': 'sources-dr8'});



var dr8northcat = new DecalsCatalogLayer(tileWatcher,
                                        'ls-dr8-north',
                                          'Legacy Surveys DR8-north Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr8n'});


var dr8southcat = new DecalsCatalogLayer(tileWatcher,
                                        'ls-dr8-south',
                                          'Legacy Surveys DR8-south Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr8s'});



var dr9cat = new DecalsCatalogLayer(tileWatcher,
                                    'ls-dr9',
                                    'Legacy Surveys DR9 Catalog',
                                    {'url': cat_url,
                                     'minZoom': 12,
                                     'urlTerm': 'sources-dr9'});



var dr9northcat = new DecalsCatalogLayer(tileWatcher,
                                        'ls-dr9-north',
                                          'Legacy Surveys DR9-north Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr9n'});


var dr9southcat = new DecalsCatalogLayer(tileWatcher,
                                        'ls-dr9-south',
                                          'Legacy Surveys DR9-south Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr9s'});





  console.log('Creating ls-dr10 catalog layer: tileWatcher =' + tileWatcher);
  
var dr10cat = new DecalsCatalogLayer(tileWatcher,
                                        'ls-dr10',
                                          'Legacy Surveys DR10 Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr10'});

var dr10southcat = new DecalsCatalogLayer(tileWatcher,
                                        'ls-dr10-south',
                                          'Legacy Surveys DR10-south Catalog',
                                          {'url': cat_url,
                                           'minZoom': 12,
                                           'urlTerm': 'sources-dr10-south'});




var bright = new BrightCatalog('bright', 'Bright stars', {});

var tycho2 = new CatalogOverlay('tycho2', 'Tycho-2 stars', {'minZoom':10});



var gals = new GalaxyCatalog('gals', 'NGC/IC galaxies',
                             {'url_name': 'ngc',
                              'minZoom': 5,
                              'labelsMinZoom': 7,
                              'urlTerm': 'ngc',
			     });

var GCsPNe = new GCsPNeCatalog('GCs-PNe', 'Star clusters & Planetary Nebulae',
                             {'url_name': 'GCs-PNe',
                              'minZoom': 5,
                              'labelsMinZoom': 7,
                             'urlTerm': 'GCs-PNe',});

var starmasks9 = new StarMaskCatalog('masks-dr9', 'All masks (LS-DR9)',
                             {'url_name': 'masks-dr9',
                              'minZoom': 5,
                              'labelsMinZoom': 7,
                             'urlTerm': 'masks-dr9',});
                             
// var starmasks8 = new StarMaskCatalog('masks-dr8', 'Gaia masks (DR8)',
//                              {'url_name': 'masks-dr8',
//                               'minZoom': 5,
//                               'labelsMinZoom': 7,
//                              'urlTerm': 'masks-dr8',});

var sga_parent = new SGACatalog('sga-parent', 'HyperLEDA/SGA galaxies',
                             {'minZoom': 5,
                              'labelsMinZoom': 7,
                              'urlTerm': 'sga-parent',});

var sga_ell = new SGACatalog('sga', 'Siena Galaxy Atlas',
                             {'minZoom': 7,
                              'labelsMinZoom': 7,
                              'urlTerm': 'sga',});

var photoz = new PhotozCatalog('photoz-dr9', 'DR9 Photo-z',
                                 {'minZoom': 12,
                                 'labelsMinZoom': 14,
                                 'urlTerm': 'photoz-dr9',
                                 'radius': 50,});

var GaiaDr2Catalog = CatalogOverlay.extend({
    getColor: function(json, i) {
        return '#8888ff';
    },

    getLabel(json, i) {
        var ra = json['rd'][i][0];
        var dec = json['rd'][i][1];
        var txt = 'RA,Dec ' + ra.toFixed(4) + ', ' + dec.toFixed(4);
        var pmra = json['pmra'][i];
        var pmdec = json['pmdec'][i];
        var parallax = json['parallax'][i];
        var pmra_err = json['pmra_err'][i];
        var pmdec_err = json['pmdec_err'][i];
        var parallax_err = json['parallax_err'][i];
        if (pmra != 0.0) {
            txt = txt + '<br>pmRA,Dec ' + pmra.toFixed(1) + ', ' + pmdec.toFixed(1) +
                                        ' &pm; ' + pmra_err.toFixed(1) + ', ' + pmdec_err.toFixed(1) + ' mas/yr, ' +
                                        'parallax ' + parallax.toFixed(1) + '&pm; ' + parallax_err.toFixed(1) + ' mas';
        }
        txt = txt + '<br>G ' + json['gmag'][i].toFixed(2) + ', BP ' + json['bpmag'][i].toFixed(2) + ', RP ' + json['rpmag'][i].toFixed(2);
        txt = txt + '<br>Source id: ' + json['sourceid'][i];
        return txt;
    },

    getTooltipStyle() {
    return { permanent: false, interactive: true, };
    },

    getPopupText(json, i) {
    return this.getLabel(json, i);
    },
});

var GaiaDr3Catalog = GaiaDr2Catalog.extend({
    getColor: function(json, i) {
        return '#3289a8';
    },
});

var gaia2 = new GaiaDr2Catalog('gaia-dr2', 'Gaia DR2 catalog',
                             {'url_name': 'gaia-dr2',
                              'minZoom': 11,
                              'labelsMinZoom': 11,
                              'urlTerm': 'gaia-dr2',
                              'radius': 220,
                              });

var gaia3 = new GaiaDr3Catalog('gaia-edr3', 'Gaia EDR3 catalog',
                             {'url_name': 'gaia-edr3',
                              'minZoom': 11,
                              'labelsMinZoom': 11,
                              'urlTerm': 'gaia-edr3',
                              'radius': 150,
                              });


  var CFISCatalog = CatalogOverlay.extend({
      getLabel: function(json, i) {
          var ra = json['rd'][i][0];
          var dec = json['rd'][i][1];
	  var txt = 'CFIS ' + json['cfis_id'][i] + '<br>' +
	      'RA,Dec ' + ra.toFixed(4) + ', ' + dec.toFixed(4) + '<br>' +
	      'Tile ' + json['tile'][i] + '<br>' +
	      'Flags: r=' + json['r_flags'][i] + ', u=' + json['u_flags'][i] + '<br>' +
	      'Mag_auto: r=' + json['r_mag_auto'][i].toFixed(3) + ', u=' + json['u_mag_auto'][i].toFixed(3);
	  return txt;
      },
      getTooltipStyle() {
	  return { permanent: false, interactive: true, };
      },
      getPopupText(json, i) {
	  return this.getLabel(json, i);
      },

  });
  
  
var SdssCatalog = CatalogOverlay.extend({

    getColor: function(json, i) {
        if (json['sourcetype'][i] == 'P') {
            return '#9AFE2E';
        }
        return '#888888';
    },

    getLabel(json, i) {
        return '';
    },

    getPopupText(json, i) {
        var ra = json['rd'][i][0];
        var dec = json['rd'][i][1];
        var txt = 'RA,Dec ' + ra.toFixed(4) + ', ' + dec.toFixed(4);
        if (json['sourcetype'][i] == 'P') {
            var tt = 'PSF';
        } else {
            var tt = 'CModel';
        }
        txt = txt + '<br>' + tt + ' mags: ';
        txt += 'u=' + fluxToMag(json['fluxes'][i]['u']).toFixed(2) + ', ';
        txt += 'g=' + fluxToMag(json['fluxes'][i]['g']).toFixed(2) + ', ';
        txt += 'r=' + fluxToMag(json['fluxes'][i]['r']).toFixed(2) + ', ';
        txt += 'i=' + fluxToMag(json['fluxes'][i]['i']).toFixed(2) + ', ';
        txt += 'z=' + fluxToMag(json['fluxes'][i]['z']).toFixed(2);
        //txt = txt + '<br>Source id: ' + json['sourceid'][i];
        return txt;
    },

    getTooltipStyle() {
        return { permanent: false, interactive: true, };
    },
    
});

var HscCatalog = CatalogOverlay.extend({
    getTooltipStyle() {
    return { permanent: false, interactive: true, };
    },
    getPopupText(json, i) {
    return this.getLabel(json, i);
    },

});

var hsccosmos = new HscCatalog('hsc-dr2-cosmos', 'HSC DR2 COSMOS catalog',
                             {'url_name': 'hsc-dr2-cosmos',
                              'minZoom': 11,
                              'labelsMinZoom': 11,
                              'urlTerm': 'hsc-dr2-cosmos',
                              'radius': 100,
                              });

var sdsscat = new SdssCatalog('sdss-cat', 'SDSS catalog',
                             {'url_name': 'sdss-cat',
                              'minZoom': 11,
                              'labelsMinZoom': 11,
                              'urlTerm': 'sdss-cat',
                              'radius': 100,
                              });






//var desi_targets67 = new DesiTargetCatalog('targets-dr67', 'DESI Targets (DR6/DR7)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });
//
//var desi_bgs_targets67 = new DesiTargetCatalog('targets-bgs-dr67', 'DESI BGS Targets (DR6/DR7)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });
//
//var desi_bright_targets67 = new DesiTargetCatalog('targets-bright-dr67', 'DESI Bright-time Targets (DR6/DR7)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });
//
//var desi_dark_targets67 = new DesiTargetCatalog('targets-dark-dr67', 'DESI Dark-time Targets (DR6/DR7)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });
//
//var desi_sky_targets67 = new DesiTargetCatalog('targets-sky-dr67', 'DESI Sky Targets (DR6/DR7)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });
//
//var desi_cmx_targets7 = new DesiTargetCatalog('targets-cmx-dr7', 'DESI Commissioning Targets (DR7)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });

var desi_targets8 = new DesiTargetCatalog('targets-dr8', 'DESI Targets (DR8)',
                                  {'radius': 200,
                                   'labelsMinZoom': 11,
                                   'minZoom': 11, });

//var desi_sv_targets8 = new DesiTargetCatalog('targets-sv-dr8', 'DESI Targets (SV-DR8)',
//                                  {'radius': 200,
//                                   'labelsMinZoom': 11,
//                                   'minZoom': 11, });


var desi_targets_dr9_sv1_sec_bright = new DesiTileLayer('targets-dr9-sv1-sec-bright',
                                                 'DESI Bright-time Secondary Targets (DR9/SV1)',
                                  {//'radius': 200,
                                   //'labelsMinZoom': 10,
                                      'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_sv1_sec_dark = new DesiTileLayer('targets-dr9-sv1-sec-dark',
                                                 'DESI Dark-time Secondary Targets (DR9/SV1)',
                                  {//'radius': 200,
                                   //'labelsMinZoom': 10,
                                      'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_sv1_dark = new DesiTileLayer('targets-dr9-sv1-dark',
                                                 'DESI Dark-time Targets (DR9/SV1)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_sv1_bright = new DesiTileLayer('targets-dr9-sv1-bright',
                                                 'DESI Bright-time Targets (DR9/SV1)',
                                                 {'minZoom': 10, 'rscale':0.5});
//var desi_targets_dr9_sv1_supp = new DesiTileLayer('targets-dr9-sv1-supp',
//                                                 'DESI Supplemental Targets (DR9/SV1)',
//                                                 {'minZoom': 10, 'rscale':0.5});


var desi_targets_dr9_sv3_dark = new DesiTileLayer('targets-dr9-sv3-dark',
                                                 'DESI Dark-time Targets (DR9/SV3)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_sv3_bright = new DesiTileLayer('targets-dr9-sv3-bright',
                                                 'DESI Bright-time Targets (DR9/SV3)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_sv3_sec_dark = new DesiTileLayer('targets-dr9-sv3-sec-dark',
                                                 'DESI Dark-time Secondary Targets (DR9/SV3)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_sv3_sec_bright = new DesiTileLayer('targets-dr9-sv3-sec-bright',
                                                 'DESI Bright-time Secondary Targets (DR9/SV3)',
                                                 {'minZoom': 8, 'rscale':0.5});


var desi_targets_dr9_main_dark = new DesiTileLayer('targets-dr9-main-dark',
                                                 'DESI Dark-time Targets (DR9/Main)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_main_bright = new DesiTileLayer('targets-dr9-main-bright',
                                                 'DESI Bright-time Targets (DR9/Main)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_main_sec_dark = new DesiTileLayer('targets-dr9-main-sec-dark',
                                                 'DESI Dark-time Secondary Targets (DR9/Main)',
                                                 {'minZoom': 10, 'rscale':0.5});
var desi_targets_dr9_main_sec_bright = new DesiTileLayer('targets-dr9-main-sec-bright',
                                                 'DESI Bright-time Secondary Targets (DR9/Main)',
                                                 {'minZoom': 8, 'rscale':0.5});





url = smallcat_url;
if ('plate' in qstr) {
    url += '&plate=' + qstr['plate'];
}
var spec = new SdssSpectraCatalog('spec', 'SDSS Spectra (DR16)',
                                  {'url': url,
                                   'radius': 300,
                                   'labelsMinZoom': 11,
                                   'minZoom': 8,
                                   'urlTerm': 'spectra'});

var manga = new MangaCatalog('manga', 'MaNGa IFU Spectra',
                                  {'url': url,
                                   'radius': 300,
                                   'labelsMinZoom': 11,
                                   'minZoom': 8,
                                   'urlTerm': 'manga'});

var specDeep2 = new Deep2SpectraCatalog('spec-deep2', 'DEEP2 Spectra',
                                  {'radius': 100,
                                   'labelsMinZoom': 11,
                                   'minZoom': 9,
                                   'urlTerm': 'spectra-deep2'});


// Constellations
var conGroup = L.layerGroup([]);
var conBoundaryGroup = L.layerGroup([]);

var Constellations = L.LayerGroup.extend({
    initialize: function() {
      L.LayerGroup.prototype.initialize.call(this);
      this.addLayer(conGroup);
      this._show = false;
      this.on('add', function(e) {
        console.log('Constellations added.');
        this._show = true;
      });
      this.on('remove', function(e) {
        console.log('Constellations removed.');
        this._show = false;
      });
    },
    _name: 'const',
    _pretty: 'Constellations',
    _url_term: 'const',
    //getGroup: function() { return conGroup; },
    getGroup: function() { return this; },
    getLinkHere: function() { return 'const'; },
    initLinkHere: function(val) {},
    under: function(latlng) {
        if (!this._show) {
            return [];
        }
        var name = getConstellationLatLng(latlng);
        return [name];
    },
    // popup menu addition
    _detail: function(urlname, obj, s) { return ''; },
    _detail_list: function(me, objs) { return objs; },
});
var constellations = new Constellations();

polygonOverlays.push(constellations);



// DESI Footprint
// from gfa-corners.fits from Bailey, 2019-03-18
var gfa_radius = [
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059],
    [1.54426530072, 1.5999816327800001, 1.6054123220500001, 1.54995479059]
];
var gfa_phi = [
    [287.31935812, 287.34502698699998, 283.02060759099999, 282.82671929999998],
    [323.31935812, 323.34502698699998, 319.02060759099999, 318.82671929999998],
    [359.31935812, 359.34502698699998, 355.02060759099999, 354.82671929999998],
    [35.319358120399997, 35.345026987399997, 31.020607590600001, 30.826719299699999],
    [71.319358120399997, 71.345026987400004, 67.020607590599994, 66.826719299700002],
    [107.31935812, 107.345026987, 103.020607591, 102.82671929999999],
    [143.31935812, 143.34502698700001, 139.02060759099999, 138.82671930000001],
    [179.31935812, 179.34502698700001, 175.02060759099999, 174.82671930000001],
    [215.31935812, 215.34502698700001, 211.02060759099999, 210.82671930000001],
    [251.31935812, 251.34502698700001, 247.02060759099999, 246.82671930000001]
];

var gfa_names = [
    'GUIDE0', 'FOCUS1', 'GUIDE2', 'GUIDE3', 'FOCUS4',
    'GUIDE5', 'FOCUS6', 'GUIDE7', 'GUIDE8', 'FOCUS9', ];

var desi_radius=1.6274810767584347;

// Commissioning instrument CCDs
//CIW: RA,Dec boundaries relative to boresight (0,0):
var ci_radecs = {'CIW':
                 [[-1.60636765, -1.5335968 , -1.5335968 , -1.60636765],
                  [-0.0503096, -0.0503096,  0.0488675,  0.0488675]],
                 'CIS':
                 [[5.46111024e-02, 5.46093498e-02, -5.30440012e-02, -5.30457037e-02],
                  [-1.60352809, -1.53643771, -1.53643775, -1.60352813]],
                 'CIC':
                 [[-5.68333564e-02, -5.68333564e-02, 5.52042579e-02, 5.52042579e-02],
                  [ 0.03787655, -0.03791358, -0.03791358,  0.03787655]],
                 'CIN':
                 [[-5.46111024e-02, -5.46093498e-02,5.30440012e-02, 5.30457037e-02],
                  [1.60352809, 1.53643771, 1.53643775, 1.60352813]],
                 'CIE':
                 [[1.60636765, 1.5335968 , 1.5335968 , 1.60636765],
                  [ 0.0503096,  0.0503096, -0.0488675, -0.0488675]],
                };

var desiLocationStack = [];

var DesiOverlay = CatalogOverlay.extend({
    ready: function() {
        CatalogOverlay.prototype.ready.call(this);
    },
    overlayAdded: function(e) {
        if (!layerMatchesEvent(this, e)) {
            return;
        }
        this._show = true;

        var latlng;
        if (desiLocationStack.length > 0) { // If a previous DesiOverlay is being displayed
            latlng = desiLocationStack[0];  // set latlng to its location
        } else if (this._got_initial_position) { // If radec is specified by url
            latlng = L.latLng(dec2lat(this.dec), ra2long_C(this.ra, 180))
        } else {
            latlng = map.getCenter();
        }

        this.moveTo(latlng);
        desiLocationStack.push(latlng);
        this._group.addLayer(this._layer);
    },
    overlayRemoved: function(e) {
        CatalogOverlay.prototype.overlayRemoved.call(this, e);
        if (layerMatchesEvent(this, e)) {
            desiLocationStack.pop();
        }
    },
    load: function() {
    },
    getLinkHere: function() {
        return this._url_term + '=' + this.ra.toFixed(4) + ',' + this.dec.toFixed(4);
    },
    initLinkHere: function(val) {
        val = String(val);
        words = val.split(',');
        if (words.length != 2) {
            return;
        }
        var r = Number.parseFloat(words[0]);
        var d = Number.parseFloat(words[1]);
        this.ra = r;
        this.dec = d;
        console.log('Desi Overlay: ra,dec', r, d);
        this._show = true;
        this._got_initial_position = true;
    },
})

var DesiFiberPos = DesiOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        DesiOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this._layer = L.layerGroup([]);
    },
    moveTo: function(c) {
        var clong = c.lng
        var d0 = lat2dec(c.lat);
        var r0 = long2ra(clong);
        this.ra = r0;
        this.dec = d0;

        if (this._show) {
            // Create worker if worker does not exist
            if (!this._worker) {
                this._worker = new Worker('/viewer/static/desi_worker.js');
                var _this = this;
                this._worker.addEventListener('message', function(e) {
                    var fiberpos = L.layerGroup();
                    // Add fiber outlines
                    var polyline = L.polyline(e.data['multilatlngs'], {color: 'DeepSkyBlue', smoothFactor: 0.5, opacity: 0.2});
                    fiberpos.addLayer(polyline);
                    // Add invisible circles to display fiber number
                    for (var i = 0; i < e.data['hiddenCircles'].length; ++i) {
                        var circ = L.circle([e.data['hiddenCircles'][i][0], e.data['hiddenCircles'][i][1]], { radius: 1500, opacity: 0, fillOpacity: 0 });
                        circ.bindTooltip('Fiber: ' + e.data['hiddenCircles'][i][2].toString(), { permanent: false, interactive: false });
                        fiberpos.addLayer(circ);
                    }
                    // Remove the previous fiberpos layer if exists
                    if (_this._fiberpos) {
                        _this._layer.removeLayer(_this._fiberpos);
                        _this._fiberpos = undefined;
                    }
                    // Discard result if desi footprint is not being displayed
                    if (_this._show) {
                        _this._fiberpos = fiberpos;
                        _this._layer.addLayer(_this._fiberpos);
                    }
                    // Update displayed status
                    _this._status && _this._status.html('');
                }, false);
            }
            // Tell worker to initiate calculation
            this._worker.postMessage([r0, d0, clong]);
            this._status && this._status.html('calculating...');
        }
    },
    overlayRemoved: function(e) {
        DesiOverlay.prototype.overlayRemoved.call(this, e);
        if (layerMatchesEvent(this, e)) {
            if (this._fiberpos) {
                this._layer.removeLayer(this._fiberpos);
                this._fiberpos = undefined;
            }
            this._show = false;
        }
    },
});

var DesiFootprint = DesiOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        DesiOverlay.prototype.initialize.call(this, name, pretty, kwargs);
        this._got_initial_position = false;
        var group = [];
        var clong = 180;
        this._circle = L.circle(L.latLng(dec2lat(0), ra2long_C(0, clong)),
                                arcsecToMeters(desi_radius * 3600.),
                                {color:'yellow', fill:false}); //fillOpacity:0.01});
        group.push(this._circle);
        this._gfa_rds = [];
        this._gfa_label_rds = [];
        this._gfa_labels = [];
        this._petal_rds = [];
        var polys = [];
        var labels = [];
        for (var i=0; i<gfa_radius.length; i++) {
            var ll = [];
            var rd = [];
            var N = gfa_radius[i].length;
            for (var j=0; j<N+1; j++) {
                var phi = gfa_phi[i][j%N] * Math.PI / 180.0;
                var ddec =  gfa_radius[i][j%N] * Math.sin(phi);
                var dra  = -gfa_radius[i][j%N] * Math.cos(phi);
                rd.push([dra, ddec]);
                ll.push([dec2lat(ddec), ra2long_C(dra, clong)]);
            }
            this._gfa_rds.push(rd);
            polys.push(ll);

            var mean_phi = 0.;
            var mean_radius = 0.;
            for (var j=0; j<N; j++) {
                mean_phi += gfa_phi[i][j];
                mean_radius += gfa_radius[i][j];
            }
            mean_phi /= N;
            mean_radius /= N;
            mean_phi *= Math.PI / 180.0;
            var ddec =  mean_radius * Math.sin(mean_phi);
            var dra  = -mean_radius * Math.cos(mean_phi)
            this._gfa_label_rds.push([dra,ddec]);

            var latlng = [dec2lat(ddec), ra2long_C(dra, clong)];
            var circ = L.circle(latlng, 0., {'color':'red', 'opacity':0.,
                                         'fillOpacity':0, 'weight':5});
            circ.bindTooltip(gfa_names[i],
                             {interactive: true, permanent: true,
                              direction: 'center', className: 'gfa-label' });
            this._gfa_labels.push(circ);
            group.push(circ);
        }
        this._gfa = L.polyline(polys, {color: 'magenta'});
        group.push(this._gfa);
        
        this._ci_rds = [];
        polys = [];
        for (var k in ci_radecs) {
            var rrdd = ci_radecs[k];
            var ll = [];
            var rd = [];
            var N = rrdd[0].length;
            for (var j=0; j<N+1; j++) {
                var dra  = rrdd[0][j%N];
                var ddec = rrdd[1][j%N];
                rd.push([dra, ddec]);
                ll.push([dec2lat(ddec), ra2long_C(dra, clong)]);
            }
            this._ci_rds.push(rd);
            polys.push(ll);
        }
        this._ci = L.polyline(polys, {color: 'green'});
        group.push(this._ci);

        var rd = [];
        // central
        var dra = -0.0834; var ddec = 0.0000;
        rd.push([dra, ddec]);
        // outer arc
        dra = -1.6164; ddec = 0.0000;
        var angle1 = Math.atan2(ddec, dra);
        var radius = Math.hypot(dra, ddec);
        dra = -1.2861; ddec = 0.9313;
        var angle2 = Math.atan2(ddec, dra);
        var steps = 10;
        var da = (angle2 - angle1) / (steps - 1);
        for (var j=0; j<steps; j++) {
            angle = angle1 + da * j;
            dra  = radius * Math.cos(angle);
            ddec = radius * Math.sin(angle);
            rd.push([dra, ddec]);
        }
        // central point again -- central arc
        dra = -0.0834; ddec = 0.0576;
        angle1 = Math.atan2(ddec, dra);
        // first point
        dra = -0.0834; ddec = 0.0000;
        radius = Math.hypot(dra, ddec);
        angle2 = Math.PI;
        steps = 10;
        da = (angle2 - angle1) / (steps - 1);
        for (var j=0; j<steps; j++) {
            angle = angle1 + da * j;
            dra  = radius * Math.cos(angle);
            ddec = radius * Math.sin(angle);
            rd.push([dra, ddec]);
        }
        var rds0 = rd;

        var polys = [];
        // Make 10 petal rotated copies
        for (var i=0; i<10; i++) {
            var ll = [];
            var rd = [];
            var angle0 = i * Math.PI / 5.;

            for (var j=0; j<rds0.length; j++) {
                dra  = rds0[j][0];
                ddec = rds0[j][1];
                angle = Math.atan2(ddec, dra);
                angle += angle0;
                radius = Math.hypot(dra, ddec);
                dra  = radius * Math.cos(angle);
                ddec = radius * Math.sin(angle);
                rd.push([dra, ddec]);
                ll.push([dec2lat(ddec), ra2long_C(dra, clong)]);
            }

            this._petal_rds.push(rd);
            polys.push(ll);
        }

        this._petals = L.polyline(polys, {color: 'gray'});
        group.push(this._petals);

        this._layer = L.layerGroup(group);
        //map.on('mapMoved', this.mapMoved.bind(this));
    },
    ready: function() {
        DesiOverlay.prototype.ready.call(this);
        this._gfa.redraw();
    },
    moveTo: function(c) {
        this._circle.setLatLng(c);
        var clong = c.lng;
        var d0 = lat2dec(c.lat);
        var r0 = long2ra(clong);
        this.ra = r0;
        this.dec = d0;
        var cosdec = Math.cos(d0 * Math.PI / 180.0);
        var polys = [];
        for (var i=0; i<this._gfa_rds.length; i++) {
            var ll = [];
            var rd = this._gfa_rds[i];
            var N = rd.length;
            for (var j=0; j<N; j++) {
                ll.push([dec2lat(d0 + rd[j][1]),
                         ra2long_C(r0 + rd[j][0] / cosdec, clong)]);
            }
            polys.push(ll);
        }
        this._gfa.setLatLngs(polys);
        this._gfa.redraw();

        for (var i=0; i<this._gfa_label_rds.length; i++) {
            rd = this._gfa_label_rds[i];
            this._gfa_labels[i].setLatLng([dec2lat(d0 + rd[1]),
                                           ra2long_C(r0 + rd[0] / cosdec, clong)]);
        }

        var polys = [];
        for (var i=0; i<this._ci_rds.length; i++) {
            var ll = [];
            var rd = this._ci_rds[i];
            var N = rd.length;
            for (var j=0; j<N; j++) {
                ll.push([dec2lat(d0 + rd[j][1]),
                         ra2long_C(r0 + rd[j][0] / cosdec, clong)]);
            }
            polys.push(ll);
        }
        this._ci.setLatLngs(polys);
        this._ci.redraw();

        var polys = [];
        for (var i=0; i<this._petal_rds.length; i++) {
            var ll = [];
            var rd = this._petal_rds[i];
            var N = rd.length;
            for (var j=0; j<N; j++) {
                ll.push([dec2lat(d0 + rd[j][1]),
                         ra2long_C(r0 + rd[j][0] / cosdec, clong)]);
            }
            polys.push(ll);
        }
        this._petals.setLatLngs(polys);
        this._petals.redraw();
        
    },
});


var desifoot = new DesiFootprint('desi-footprint', 'DESI Footprint', {});
desifoot._url_term = 'desifoot';
var desifiber = new DesiFiberPos('desi-fiberpos', 'DESI Fibers', {});
desifiber._url_term = 'desifiber';
// TODO: Make url terms a constant

// Untitled198.ipynb from Aaron's cornerCoords_SN-C1-reordered.fits table
var decam_rds = [
[ [ -0.45920, 0.97905],[-0.45942, 0.82986],[-0.16033, 0.82926],[-0.16019, 0.97832],[-0.45920, 0.97905 ], ],
    [ [ -0.14890, 0.97826],[-0.14931, 0.82920],[0.14998, 0.82855],[0.15021, 0.97761],[-0.14890, 0.97826 ], ],
    [ [ 0.16164, 0.97830],[0.16166, 0.82924],[0.46074, 0.82956],[0.46066, 0.97876],[0.16164, 0.97830 ], ],
    [ [ -0.61452, 0.81569],[-0.61483, 0.66644],[-0.31585, 0.66555],[-0.31557, 0.81475],[-0.61452, 0.81569 ], ],
    [ [ -0.30426, 0.81477],[-0.30445, 0.66560],[-0.00501, 0.66538],[-0.00500, 0.81456],[-0.30426, 0.81477 ], ],
    [ [ 0.00637, 0.81453],[0.00626, 0.66535],[0.30570, 0.66534],[0.30561, 0.81452],[0.00637, 0.81453 ], ],
    [ [ 0.31682, 0.81455],[0.31697, 0.66537],[0.61596, 0.66602],[0.61574, 0.81527],[0.31682, 0.81455 ], ],
    [ [ -0.76975, 0.65225],[-0.77000, 0.50289],[-0.47127, 0.50175],[-0.47103, 0.65112],[-0.76975, 0.65225 ], ],
    [ [ -0.45970, 0.65125],[-0.46009, 0.50189],[-0.16069, 0.50110],[-0.16046, 0.65052],[-0.45970, 0.65125 ], ],
    [ [ -0.14919, 0.65049],[-0.14933, 0.50108],[0.15039, 0.50099],[0.15035, 0.65039],[-0.14919, 0.65049 ], ],
    [ [ 0.16160, 0.65050],[0.16161, 0.50108],[0.46103, 0.50141],[0.46086, 0.65077],[0.16160, 0.65050 ], ],
    [ [ 0.47220, 0.65078],[0.47238, 0.50140],[0.77115, 0.50233],[0.77097, 0.65169],[0.47220, 0.65078 ], ],
    [ [ -0.92499, 0.48907],[-0.92522, 0.33964],[-0.62677, 0.33783],[-0.62642, 0.48735],[-0.92499, 0.48907 ], ],
    [ [ -0.61531, 0.48753],[-0.61562, 0.33802],[-0.31646, 0.33697],[-0.31624, 0.48658],[-0.61531, 0.48753 ], ],
    [ [ -0.30483, 0.48667],[-0.30502, 0.33703],[-0.00523, 0.33667],[-0.00518, 0.48633],[-0.30483, 0.48667 ], ],
    [ [ 0.00615, 0.48608],[0.00613, 0.33640],[0.30592, 0.33665],[0.30580, 0.48628],[0.00615, 0.48608 ], ],
    [ [ 0.31719, 0.48648],[0.31722, 0.33685],[0.61639, 0.33753],[0.61628, 0.48705],[0.31719, 0.48648 ], ],
    [ [ 0.62771, 0.48699],[0.62793, 0.33748],[0.92636, 0.33915],[0.92622, 0.48858],[0.62771, 0.48699 ], ],
    [ [ -0.92511, 0.32506],[-0.92527, 0.17559],[-0.62687, 0.17365],[-0.62668, 0.32331],[-0.92511, 0.32506 ], ],
    [ [ -0.61557, 0.32310],[-0.61582, 0.17344],[-0.31658, 0.17219],[-0.31641, 0.32200],[-0.61557, 0.32310 ], ],
    [ [ -0.30509, 0.32217],[-0.30522, 0.17238],[-0.00533, 0.17192],[-0.00528, 0.32179],[-0.30509, 0.32217 ], ],
    [ [ 0.00613, 0.32189],[0.00603, 0.17202],[0.30591, 0.17216],[0.30593, 0.32196],[0.00613, 0.32189 ], ],
    [ [ 0.31747, 0.32198],[0.31748, 0.17218],[0.61671, 0.17309],[0.61664, 0.32274],[0.31747, 0.32198 ], ],
    [ [ 0.62784, 0.32277],[0.62791, 0.17311],[0.92629, 0.17481],[0.92627, 0.32435],[0.62784, 0.32277 ], ],
    [ [ -1.08035, 0.16192],[-1.08040, 0.01245],[-0.78210, 0.00992],[-0.78203, 0.15954],[-1.08035, 0.16192 ], ],
    [ [ -0.77072, 0.15965],[-0.77083, 0.01002],[-0.47205, 0.00825],[-0.47194, 0.15807],[-0.77072, 0.15965 ], ],
    [ [ -0.46056, 0.15788],[-0.46069, 0.00805],[-0.16102, 0.00706],[-0.16092, 0.15700],[-0.46056, 0.15788 ], ],
    [ [ -0.14938, 0.15712],[-0.14941, 0.00717],[0.15061, 0.00715],[0.15061, 0.15711],[-0.14938, 0.15712 ], ],
    [ [ 0.16175, 0.15688],[0.16173, 0.00693],[0.46138, 0.00772],[0.46136, 0.15755],[0.16175, 0.15688 ], ],
    [ [ 0.47294, 0.15757],[0.47295, 0.00776],[0.77175, 0.00934],[0.77172, 0.15898],[0.47294, 0.15757 ], ],
    [ [ 0.78288, 0.15914],[0.78293, 0.00951],[1.08118, 0.01197],[1.08117, 0.16145],[0.78288, 0.15914 ], ],
    [ [ -1.08051, -0.00221],[-1.08062, -0.15168],[-0.78229, -0.15458],[-0.78222, -0.00496],[-1.08051, -0.00221 ], ],
    [ [ -0.77090, -0.00489],[-0.77092, -0.15452],[-0.47215, -0.15653],[-0.47212, -0.00671],[-0.77090, -0.00489 ], ],
    [ [ -0.46081, -0.00680],[-0.46076, -0.15662],[-0.16114, -0.15760],[-0.16114, -0.00767],[-0.46081, -0.00680 ], ],
    [ [ -0.14973, -0.00771],[-0.14978, -0.15765],[0.15021, -0.15775],[0.15028, -0.00781],[-0.14973, -0.00771 ], ],
    [ [ 0.16141, -0.00798],[0.16146, -0.15793],[0.46109, -0.15683],[0.46107, -0.00701],[0.16141, -0.00798 ], ],
    [ [ 0.47258, -0.00693],[0.47247, -0.15680],[0.77124, -0.15501],[0.77134, -0.00541],[0.47258, -0.00693 ], ],
    [ [ 0.78279, -0.00540],[0.78263, -0.15503],[1.08092, -0.15257],[1.08103, -0.00311],[0.78279, -0.00540 ], ],
    [ [ -0.92571, -0.16812],[-0.92560, -0.31760],[-0.62719, -0.32007],[-0.62733, -0.17043],[-0.92571, -0.16812 ], ],
    [ [ -0.61609, -0.17058],[-0.61594, -0.32023],[-0.31677, -0.32182],[-0.31685, -0.17203],[-0.61609, -0.17058 ], ],
    [ [ -0.30535, -0.17203],[-0.30526, -0.32183],[-0.00546, -0.32238],[-0.00545, -0.17251],[-0.30535, -0.17203 ], ],
    [ [ 0.00599, -0.17273],[0.00593, -0.32257],[0.30574, -0.32209],[0.30586, -0.17229],[0.00599, -0.17273 ], ],
    [ [ 0.31721, -0.17229],[0.31708, -0.32209],[0.61624, -0.32060],[0.61642, -0.17095],[0.31721, -0.17229 ], ],
    [ [ 0.62766, -0.17093],[0.62742, -0.32060],[0.92587, -0.31820],[0.92603, -0.16874],[0.62766, -0.17093 ], ],
    [ [ -0.92568, -0.33228],[-0.92551, -0.48171],[-0.62701, -0.48423],[-0.62725, -0.33471],[-0.92568, -0.33228 ], ],
    [ [ -0.61620, -0.33497],[-0.61596, -0.48448],[-0.31691, -0.48617],[-0.31702, -0.33654],[-0.61620, -0.33497 ], ],
    [ [ -0.30532, -0.33665],[-0.30529, -0.48627],[-0.00565, -0.48704],[-0.00552, -0.33739],[-0.30532, -0.33665 ], ],
    [ [ 0.00557, -0.33746],[0.00555, -0.48717],[0.30521, -0.48654],[0.30538, -0.33684],[0.00557, -0.33746 ], ],
    [ [ 0.31703, -0.33683],[0.31682, -0.48646],[0.61590, -0.48489],[0.61620, -0.33538],[0.31703, -0.33683 ], ],
    [ [ 0.62745, -0.33525],[0.62719, -0.48474],[0.92568, -0.48229],[0.92589, -0.33285],[0.62745, -0.33525 ], ],
    [ [ -0.77053, -0.49796],[-0.77039, -0.64731],[-0.47166, -0.64969],[-0.47181, -0.50032],[-0.77053, -0.49796 ], ],
    [ [ -0.46055, -0.50025],[-0.46036, -0.64962],[-0.16113, -0.65089],[-0.16118, -0.50150],[-0.46055, -0.50025 ], ],
    [ [ -0.14968, -0.50146],[-0.14964, -0.65087],[0.14989, -0.65100],[0.15006, -0.50159],[-0.14968, -0.50146 ], ],
    [ [ 0.16131, -0.50174],[0.16111, -0.65115],[0.46031, -0.65015],[0.46069, -0.50077],[0.16131, -0.50174 ], ],
    [ [ 0.47199, -0.50057],[0.47168, -0.64992],[0.77041, -0.64783],[0.77070, -0.49848],[0.47199, -0.50057 ], ],
    [ [ -0.61537, -0.66335],[-0.61517, -0.81261],[-0.31628, -0.81441],[-0.31649, -0.66519],[-0.61537, -0.66335 ], ],
    [ [ -0.30527, -0.66522],[-0.30512, -0.81439],[-0.00586, -0.81513],[-0.00583, -0.66592],[-0.30527, -0.66522 ], ],
    [ [ 0.00563, -0.66608],[0.00566, -0.81526],[0.30490, -0.81455],[0.30506, -0.66537],[0.00563, -0.66608 ], ],
    [ [ 0.31632, -0.66540],[0.31612, -0.81459],[0.61504, -0.81292],[0.61531, -0.66368],[0.31632, -0.66540 ], ],
    [ [ -0.46006, -0.82837],[-0.46002, -0.97759],[-0.16106, -0.97892],[-0.16098, -0.82981],[-0.46006, -0.82837 ], ],
    [ [ -0.14966, -0.82964],[-0.14964, -0.97869],[0.14946, -0.97881],[0.14963, -0.82976],[-0.14966, -0.82964 ], ],
    [ [ 0.16100, -0.82983],[0.16083, -0.97889],[0.45984, -0.97803],[0.46012, -0.82884],[0.16100, -0.82983 ], ],
];

var decam_ccd_names = [ 'S29', 'S30', 'S31',
                        'S25', 'S26', 'S27', 'S28',
                        'S20', 'S21', 'S22', 'S23', 'S24',
                        'S14', 'S15', 'S16', 'S17', 'S18', 'S19',
                        'S8',  'S9',  'S10', 'S11', 'S12', 'S13',
                        'S1',  'S2',  'S3',  'S4',  'S5',  'S6',  'S7',
                        'N1',  'N2',  'N3',  'N4',  'N5',  'N6',  'N7',
                        'N8',  'N9',  'N10', 'N11', 'N12', 'N13',
                        'N14', 'N15', 'N16', 'N17', 'N18', 'N19',
                        'N20', 'N21', 'N22', 'N23', 'N24',
                        'N25', 'N26', 'N27', 'N28',
                        'N29', 'N30', 'N31',
                      ];
                        



var DecamOverlay = DesiOverlay.extend({
    initialize: function(name, pretty, kwargs) {
        DesiOverlay.prototype.initialize.call(this, name, pretty, kwargs);

        var group = [];
        var clong = 180;

        this._ccd_label_rds = [];
        this._ccd_labels = [];
        for (var i=0; i<decam_rds.length; i++) {
            var rd = decam_rds[i];
            var N = rd.length;
            var mean_ra = 0.;
            var mean_dec = 0.;
            for (var j=0; j<N; j++) {
                mean_ra += rd[j][0];
                mean_dec += rd[j][1];
            }
            dra  = mean_ra  / N;
            ddec = mean_dec / N;
            this._ccd_label_rds.push([dra,ddec]);

            var latlng = [dec2lat(ddec), ra2long_C(dra, clong)];
            var circ = L.circle(latlng, 0., {'color':'red', 'opacity':0.,
                                         'fillOpacity':0, 'weight':5});
            //ccd_name = 'CCD ' + (i+1);
            ccd_name = decam_ccd_names[i];
            circ.bindTooltip(ccd_name,
                             {interactive: true, permanent: true,
                              direction: 'center', className: 'gfa-label' });
            this._ccd_labels.push(circ);
            group.push(circ);
        }
        this._ccds = L.polyline([], {color: 'orange'});
        group.push(this._ccds);

        this._layer = L.layerGroup(group);
    },
    moveTo: function(c) {
        var clong = c.lng;
        var d0 = lat2dec(c.lat);
        var r0 = long2ra(clong);
        this.ra = r0;
        this.dec = d0;
        var cosdec = Math.cos(d0 * Math.PI / 180.0);
        var polys = [];
        var labels = [];
        console.log('Decam RDs:', decam_rds.length);
        for (var i=0; i<decam_rds.length; i++) {
            var ll = [];
            var rd = decam_rds[i];
            var N = rd.length;
            for (var j=0; j<N; j++) {
                ll.push([dec2lat(d0 + rd[j][1]),
                         ra2long_C(r0 + rd[j][0] / cosdec, clong)]);
            }
            polys.push(ll);
        }
        this._ccds.setLatLngs(polys);
        this._ccds.redraw();

        for (var i=0; i<this._ccd_label_rds.length; i++) {
            rd = this._ccd_label_rds[i];
            this._ccd_labels[i].setLatLng([dec2lat(d0 + rd[1]),
                                           ra2long_C(r0 + rd[0] / cosdec, clong)]);
        }

    },
});


var decamfoot = new DecamOverlay('decam-footprint', 'DECam Footprint', {});
decamfoot._url_term = 'decamfoot';

var overlays = [
    
        
    
    decalscat5,
    
    
    mzlsbasscat6,
    
    
    decalscat7,
    
    
    dr8cat,
    
    
    dr8northcat,
    
    
    dr8southcat,
    
    
    dr9cat,
    
    
    dr9northcat,
    
    
    dr9southcat,
    
    
    
    dr10cat,
    dr10southcat,
    
    
    
    ccdOverlay5,
    
    
    ccdOverlay6,
    
    
    ccdOverlay7,
    
    
    ccdOverlay8,
    
    
    ccdOverlay8n,
    
    
    ccdOverlay8s,
    expOverlay8s,
    
    
    ccdOverlay10,
    expOverlay10,
    
    
    ccdOverlay9,
    
    
    ccdOverlay9n,
    
    
    ccdOverlay9s,
    expOverlay9s,
    
    
    expOverlay5,
    
    
    expOverlay7,
    

    
    brickOverlay,
    
    
    
    unwiseTileOverlay,
    
    
    
    ccdOverlaySdss,
    
    gals, sga_parent, sga_ell, //lslga_model, starmasks8,
    starmasks9, GCsPNe, bright, tycho2,
    photoz,
    
    gaia2,
    gaia3,
    hsccosmos,
    sdsscat,
    
    manga, spec, plateOverlay, specDeep2,
    
    
    //desi_sv_targets8,
    desi_targets8,
    //desi_targets67,
    //desi_bgs_targets67,
    //desi_sky_targets67,
    //desi_dark_targets67,
    //desi_bright_targets67,
    //desi_cmx_targets7,
    desi_targets_dr9_sv1_sec_dark,
    desi_targets_dr9_sv1_sec_bright,
    desi_targets_dr9_sv1_dark,
    desi_targets_dr9_sv1_bright,
    //desi_targets_dr9_sv1_supp,
    desi_targets_dr9_sv3_dark,
    desi_targets_dr9_sv3_bright,
    desi_targets_dr9_sv3_sec_dark,
    desi_targets_dr9_sv3_sec_bright,
    desi_targets_dr9_main_dark,
    desi_targets_dr9_main_bright,
    desi_targets_dr9_main_sec_dark,
    desi_targets_dr9_main_sec_bright,
    
    
    desi_tiles_edr,
    desi_spec_edr,
    
    
    desi_tiles_dr1,
    desi_spec_dr1,
    
    
    constellations,
    decamfoot,
    desifoot,
    desifiber,
];



if ('blink' in qstr) {
    last_layer_name = qstr['blink'];
}

for (k in qstr) {
    console.log('qstring key: ' + k);
}




function drop_null(lst) {
    var rtn = [];
    for (var i in lst) {
        var x = lst[i];
        if (x != null)
            rtn.push(x);
    }
    return rtn;
}

function findlayer(name, children=[]) {
    //console.log('findlayer', name);
    if (!(name in namedLayers)) {
        //console.log('name not in namedLayers');
        if (name in tile_layers) {
            console.log('Creating layer', name);
            var layer = get_tile_layer(name);
            register_layer(layer);
        } else {
            return null;
        }
    }

    rtn = { label: namedLayers[name].pretty, layer: namedLayers[name] };
    if (children.length) {
        rtn['children'] = drop_null(children);
    }
    return rtn;
}
 


var decaps_tree = [
    findlayer('decaps2', [
        findlayer('decaps2-model'),
        findlayer('decaps2-resid'),
    ]),
    findlayer('decaps2-riy', [
        findlayer('decaps2-model-riy'),
        findlayer('decaps2-resid-riy'),
    ]),
    findlayer('decaps', [
        findlayer('decaps-model'),
        findlayer('decaps-resid'),
    ]),
];


var baseTree1 = [
    // findlayer('cfis-dr3-r'),
    // findlayer('cfis-dr3-u'),
    // findlayer('cfis-r'),
    // findlayer('cfis-u'),
    
];





var moresurveys = [
    findlayer('pandas'),
    findlayer('phat'),
    //findlayer('outliers-ast'),
    //findlayer('asteroids-i'),
    findlayer('des-dr1'),
];


moresurveys = moresurveys.concat(decaps_tree);


moresurveys = moresurveys.concat([
    findlayer('galex'),
    findlayer('halpha'),
    findlayer('hsc-dr2'),
    
    findlayer('hsc-dr3'),
    findlayer('merian-n540'),
    findlayer('merian-n708'),
    
    findlayer('ps1'),
    findlayer('sdss'),
    findlayer('sfd'),
    findlayer('vlass1.2'),
    findlayer('ztf'),
]);

moresurveys = drop_null(moresurveys);

baseTree1 = baseTree1.concat([
    
    findlayer('ls-dr10', [
    findlayer('ls-dr10-model'),
    findlayer('ls-dr10-resid'),
    findlayer('ls-dr10-south', [
      findlayer('ls-dr10-south-model'),
      findlayer('ls-dr10-south-resid'),
    ]),
    findlayer('ls-dr10-grz', [
      findlayer('ls-dr10-model-grz'),
      findlayer('ls-dr10-resid-grz'),
      findlayer('ls-dr10-south-grz'),
      findlayer('ls-dr10-south-model-grz'),
      findlayer('ls-dr10-south-resid-grz'),
      ]),
    ]),
    
    
    findlayer('ls-dr9', [
        
        findlayer('ls-dr9-model'),
        
        
        findlayer('ls-dr9-resid'),
        
        findlayer('ls-dr9.1.1', [,
         findlayer('ls-dr9.1.1-model'),
         findlayer('ls-dr9.1.1-resid'),
        ]),
    

    
    findlayer('ls-dr9-north', [
        findlayer('ls-dr9-north-model'),
        findlayer('ls-dr9-north-resid'),
    ]),
    
    
    findlayer('ls-dr9-south', [
        
        findlayer('ls-dr9-south-model'),
        
        
        findlayer('ls-dr9-south-resid'),
        
    ]),
    

    
    // nested in dr9
    ]),
    


    
     { label: 'Older Legacy Surveys',
       children: [
    
    findlayer('ls-dr8', [
        
        findlayer('ls-dr8-model'),
        
        
        findlayer('ls-dr8-resid'),
        
    ]),
    
    
    findlayer('ls-dr8-north', [
        
        findlayer('ls-dr8-north-model'),
        
        
        findlayer('ls-dr8-north-resid'),
        
    ]),
    
    
    findlayer('ls-dr8-south', [
        
        findlayer('ls-dr8-south-model'),
        
        
        findlayer('ls-dr8-south-resid'),
        
    ]),
    
    
    findlayer('ls-dr67'),
    
    
    findlayer('decals-dr7', [
        findlayer('decals-dr7-model'),
        findlayer('decals-dr7-resid'),
    ]),
    
    
    //{
    findlayer('mzls+bass-dr6', [
        findlayer('mzls+bass-dr6-model'),
        findlayer('mzls+bass-dr6-resid'),
    ]),
    
    findlayer('decals-dr5', [
        findlayer('decals-dr5-model'),
        findlayer('decals-dr5-resid'),
    ]),
    findlayer('eboss'),

     ]},
    

    
    findlayer('unwise-neo7', [
        findlayer('unwise-neo6'),
        
        findlayer('unwise-neo4'),
        findlayer('unwise-cat-model'),
        
        findlayer('wssa'),
        
    ]),
    
    
    {
        label: 'More surveys',
        children: moresurveys,
    },
    
]);

var baseTree = [];
for (var x in testTree) {
  baseTree.push(testTree[x]);
}
for (var x in baseTree1) {
  baseTree.push(baseTree1[x]);
}

console.log('baseTree:', baseTree);

bt = { label: 'Images', children: baseTree };
baseTree = bt;

if (!added) {
    defaultTile.addTo(map);
}

var namedOverlays = {};
for (var i=0,len=overlays.length; i<len; i++) {
    namedOverlays[overlays[i]._name] = overlays[i];
    // The '.getGroup()' object is the one passed into the overlay tree, so
    // tag a name onto it.
    group = overlays[i].getGroup();
    group._name = overlays[i]._name;
}

function findoverlay(name, children=[]) {
    rtn =  { label: namedOverlays[name]._pretty,
             layer: namedOverlays[name].getGroup() };
    console.log('findoverlay: ' + name);
    console.log('  -> got overlay: label=' + rtn['label'] + ', layer=' + rtn['layer']);
    if (children.length) {
        rtn['children'] = children;
    }
    return rtn;
}

var overlayTree = [];







 overlayTree = overlayTree.concat([
     
     { label: 'Boundaries', children: [

     findoverlay('decam-footprint'),
     findoverlay('decals-bricks'),
     
     findoverlay('dr10-ccds'),
     findoverlay('dr10-exps'),
     
     
     findoverlay('dr9-ccds', [
       
       findoverlay('dr9-north-ccds'),
       
       
       findoverlay('dr9-south-ccds'),
       findoverlay('dr9-south-exps'),
       
       findoverlay('masks-dr9'),
     ]),
     
     
     findoverlay('dr8-ccds', [
       
       findoverlay('dr8-north-ccds'),
       
       
       findoverlay('dr8-south-ccds'),
       
       
       findoverlay('dr8-south-exps'),
       
     ]),
     
     
     findoverlay('decals-dr7-ccds', [
       
       findoverlay('decals-dr7-exps', [
         
         findoverlay('decals-dr5-exps'),
         
       ]),
       
         
         findoverlay('mzls+bass-dr6-ccds'),
         
         
         findoverlay('decals-dr5-ccds'),
         
     ]),
     
     
     findoverlay('sdss-ccds'),
         
     
     
     findoverlay('unwise-tiles'),
     
         
     ]},
     // end of Boundaries

     
                                        
     
     { label: 'Imaging catalogs', children: [

     // findoverlay('cfis-dr2'),
         

     
     findoverlay('ls-dr10'),
     findoverlay('ls-dr10-south'),
     

     
     findoverlay('ls-dr9', [
       
       findoverlay('ls-dr9-north'),
       
       
       findoverlay('ls-dr9-south'),
       
       ]),
     

     
     findoverlay('ls-dr8', [
       
       findoverlay('ls-dr8-north'),
       
       
       findoverlay('ls-dr8-south'),
       
       ]),
     

     
     findoverlay('decals-dr7', [
       
       findoverlay('mzls+bass-dr6'),
       
       
       findoverlay('decals-dr5'),
       
     ]),
     

     findoverlay('gaia-dr2'),
     findoverlay('gaia-edr3'),
     
     findoverlay('hsc-dr2-cosmos'),
     findoverlay('sdss-cat'),

     ]},
     // end of Imaging catalogs
     

     
     { label: 'Spectroscopy',
       children: [
           findoverlay('manga'),
           findoverlay('spec'),
           findoverlay('sdss-plates'),
           findoverlay('spec-deep2'),
       ],
     },
     

     
     { label: 'DESI',
       children: [
         
           
           findoverlay('desi-footprint'),
           findoverlay('desi-fiberpos'),
           
           
           findoverlay('desi-tiles-edr'),
           findoverlay('desi-spec-edr'),
           
           
           findoverlay('desi-tiles-dr1'),
           findoverlay('desi-spec-dr1'),
           
           
         
           { label: 'DESI Targets',
             children: [
           findoverlay('targets-dr9-main-dark'),
           findoverlay('targets-dr9-main-bright'),
           findoverlay('targets-dr9-main-sec-dark'),
           findoverlay('targets-dr9-main-sec-bright'),
           findoverlay('targets-dr9-sv3-dark'),
           findoverlay('targets-dr9-sv3-bright'),
           findoverlay('targets-dr9-sv3-sec-dark'),
           findoverlay('targets-dr9-sv3-sec-bright'),
           findoverlay('targets-dr9-sv1-dark'),
           findoverlay('targets-dr9-sv1-bright'),
           findoverlay('targets-dr9-sv1-sec-dark'),
           findoverlay('targets-dr9-sv1-sec-bright'),
           //findoverlay('targets-dr9-sv1-supp'),
           findoverlay('targets-dr8'),
           //findoverlay('targets-sv-dr8'),
           //findoverlay('targets-cmx-dr7'),
           //findoverlay('targets-dr67'),
           //findoverlay('targets-bgs-dr67'),
           //findoverlay('targets-sky-dr67'),
           //findoverlay('targets-bright-dr67'),
           //findoverlay('targets-dark-dr67'),
             ]},
         
       ]},
       

     { label: 'Bright Objects', children: [
     findoverlay('bright'),
     findoverlay('tycho2'),
     findoverlay('GCs-PNe'),
     findoverlay('gals'),
     findoverlay('sga'),
     
     findoverlay('sga-parent'),
     findoverlay('photoz-dr9'),
     
     //findoverlay('masks-dr8'),
     //
     findoverlay('const'),
     ]},
 ]);


var layerTree = L.control.layers.tree(baseTree,
                      { label: 'Overlays', children: overlayTree },
                      { collapsed: false }).addTo(map);

 $(document).ready(function() {
     // This is fragile wrt the DOM structure of the tree layer control widget.
     var sel = $(".leaflet-layerstree-opened").parent().parent();
     //console.log('Parents:');
     //console.log(sel);

     // These are menus to collapse
     txts = [
         
         'Legacy Surveys DR10 images',
         'Legacy Surveys DR10-south images',
         
         
         'Legacy Surveys DR9 images',
         'Legacy Surveys DR9.1.1 COSMOS deep images',
         
         
         'Legacy Surveys DR9-north images',
         
         
         'Legacy Surveys DR9-south images',
         
         'Older Legacy Surveys',
         'More surveys',
         
         'Legacy Surveys DR8 images',
         
         
         'Legacy Surveys DR8-north images',
         
         
         'Legacy Surveys DR8-south images',
         
         
         'Legacy Surveys DR6+DR7 images',
         
         'DECaLS DR7 images',
         'MzLS+BASS DR6 images',
         'DECaLS DR5 images',
         'DECaPS images',
         'DECaPS 2 images',
         'unWISE W1/W2 NEO7',
         'DECaLS DR7 catalog',
         'DECaLS DR7 CCDs',
         'DECaLS DR7 Exposures',
         'Other catalogs',
         'Spectroscopy',
         'Bright Objects',
         
         'Legacy Surveys DR8 Catalog',
         'Legacy Surveys DR8 CCDs',
         
         'Boundaries',
         'Imaging catalogs',
         
         
         
         'DESI Targets',
         
     ];

     for (var i=0,len=txts.length; i<len; i++) {
         var txt = txts[i];
         var sel = $(".leaflet-layerstree-header").filter(":contains('" + txt + "')");
         sel = sel.children().children().filter(".leaflet-layerstree-opened");
         sel.trigger('click');
     }
 });
 
/*
  The overlays DOM looks like this:

  <div class="leaflet-control-layers-overlays">
  <label>
  <input class="leaflet-control-layers-selector" type="checkbox">
  <span> Sources</span>
  </label>
  <label>
  <input class="leaflet-control-layers-selector" type="checkbox">
  <span> Bricks</span>
  </label>
  <label>
  </div>
*/
// We iterate through the <input> tags, getting the text from the next sibling.
function getOverlayCheckbox(name) {
    var ov = false;
    var ovs = $('.leaflet-control-layers-overlays .leaflet-control-layers-selector');
    ovs.each(function(i) {
        var o = $(this);
        var text = $.trim(o.next().text());
        //console.log('Looking for overlay "' + name + '", found "' + text + '"');
        if (text == name) {
            ov = o;
        }
    });
    return ov;
}

function onMapZoomEnd(e) {
    // update the RA,Dec,zoom info box
    if (typeof(lastLatLng) != 'undefined') {
        onMouseMove({ latlng: lastLatLng });
    }
}

map.setView([ dec2lat(dec_initial), ra2long_C(ra_initial, 180.) ], zoom_initial);
var lastLatLng = map.getCenter();

if ('mark' in qstr) {
    var coords = qstr['mark'];
    coords = coords.split(';');
    //console.log('coords: ' + coords.length);
    var clong = map.getCenter().lng;
    var circleList = new Array(coords.length);
    for (var i=0; i<coords.length; i++) {
        var words = coords[i].split(',');
        var r = Number.parseFloat(words[0]);
        var d = Number.parseFloat(words[1]);
        var lat = dec2lat(d);
        var lng = ra2long_C(r, clong);
        var rad_arcsec = 5;
        if (words.length > 2) {
            rad_arcsec = Number.parseFloat(words[2]);
        }
        var rad = arcsecToMeters(rad_arcsec);
        var color = 'yellow';
        var circ = L.circle([lat, lng], rad,
                            {'color':color, 'fillOpacity':0, 'weight':5});
        circleList[i] = circ;
    }
    var lg = L.layerGroup(circleList);
    map.addLayer(lg);
}

if ('poly' in qstr) {
    var coords = qstr['poly'];
    segments = coords.split(';');
    var bounds = L.latLngBounds([map.getCenter()]);
    var group = [];
    var clong = map.getCenter().lng;
    var color = 'orange';
    for (var i=0; i<segments.length; i++) {
        var seg = segments[i];
        if (seg.startsWith('color:')) {
            var cc = seg.substring(6, seg.length);
            color = cc;
            console.log('Setting color to ' + color);
            continue;
        }
        coords = seg.split(',');
        var nc = coords.length/2;
        var poly = [];
        for (var j=0; j<nc; j++) {
            var r = Number.parseFloat(coords[j*2+0]);
            var d = Number.parseFloat(coords[j*2+1]);
            var lat = dec2lat(d);
            var lng = ra2long_C(r, clong);
            bounds.extend(L.latLng(lat,lng));
            poly.push([lat, lng]);
        }
        var pline = L.polygon(poly, {fill:false, color:color, weight:4});
        group.push(pline);
    }
    var lg = L.layerGroup(group);
    map.addLayer(lg);
    var z = map.getBoundsZoom(bounds);
    map.setZoom(z);
}

function onViewReset(e) {
    updateInfoBox(map.getCenter());
}

map.on('mousemove', onMouseMove);
map.on('viewreset', onViewReset);
map.on('overlayadd', overlayAdded);
map.on('overlayremove', overlayRemoved);
map.on('click', onMapClick);
map.on('zoomend', onMapZoomEnd);

map.on('baselayerchange', function(e) {
    console.log('baselayerchange: ' + e);
    console.log('layer: ' + e.layer);
    console.log('layer_name: ' + e.layer.name);
    last_layer_name = layer_name;
    layer_name = e.layer.name;
    console.log('new layer_name: ' + layer_name + ', new last_layer_name: ' + last_layer_name);
});

// When space bar is pressed, switch back to previous layer.  This allows a quick "blink" between layers.
function keyDown(e) {
    //console.log('keyDown ' + e + ' keycode ' + e.keyCode + ', char ' + e.char + ' charCode ' + e.charCode);
    //console.log('objquery has focus? ' + $('#objquery').is(":focus"));

    if ($('#objquery').is(":focus")) {
        return;
    }

    // space bar
    if (e.keyCode == 32) {
        //console.log('space bar!');
        //console.log('layer_name ' + layer_name + ', last_layer_name ' + last_layer_name);
        if (last_layer_name != layer_name) {
            console.log('Switching from layer ' + layer_name + ' back to previous layer ' + last_layer_name);
            var toadd = false;
            var torm  = false;
            for (k in namedLayers) {
                layer = namedLayers[k];
                if (layer_name == k) {
                    torm = layer;
                } else if (last_layer_name == k) {
                    toadd = layer;
                }
            }
            if (toadd && torm) {
                torm.removeFrom(map);
                toadd.addTo(map);
            }
        }
        e.preventDefault();
        e.stopPropagation();
    }
}
document.addEventListener('keydown', keyDown);
//map.getContainer().addEventListener('keypress', keyDown);

// A scale bar that shows arcsec / arcmin / degrees rather than meters
var AstroControl = L.Control.Scale.extend({
    options: {
	    imperial: false,
	    maxWidth: 300,
    },
    _updateMetric: function (maxMeters) {
	    // meters -> arcsec
	    var maxArcsec = maxMeters / 30.87;
	    var maxUnit = maxArcsec;
	    var unitName = 'arcsec';

	    if (maxArcsec > 7200) {
	        // degrees
	        maxUnit /= 3600;
	        unitName = 'deg';
	    } else if (maxArcsec >= 180) {
	        // arcmin
	        maxUnit /= 60;
	        unitName = 'arcmin';
	    }
	    var unit = this._getRoundNum(maxUnit);
        var ratio = unit/maxUnit;
		this._mScale.style.width = Math.round(this.options.maxWidth * ratio) + 'px';
	    this._mScale.innerHTML = unit + ' ' + unitName;
    },

    // Yep, astronomers even have different ideas about what numbers are round.
    // _getRoundNum: function (num) {
    // 	var pow10 = Math.pow(10, (Math.floor(num) + '').length - 1),
    // 	d = num / pow10;
    // 	d = d >= 10 ? 10 : d >= 5 ? 5 : d >= 3 ? 3 : d >= 2 ? 2 : 1;
    // 	return pow10 * d;
    // }

});

new AstroControl().addTo(map);

console.log('adding layers from qstr');
for (var i=0,len=overlays.length; i<len; i++) {
    ov = overlays[i]
    if (ov._url_term in qstr) {
        console.log('adding layer ' + ov._url_term + ', ' + ov._pretty + ': ' + qstr[ov._url_term]);
        ov.initLinkHere(qstr[ov._url_term]);
        map.addLayer(ov.getGroup());
    }
}
console.log('done adding layers from qstr');

// These are from the IAU boundary definitions
// http://vizier.cfa.harvard.edu/viz-bin/VizieR-3?-source=VI/49/bound_20
// This is parallel to the constellation_shortnames array below.
// With patches for UMi, Oct from
// https://www.iau.org/public/themes/constellations/#umi
var constellation_boundaries = [
    // Aql
    [
        [ 280.350209,0.115489, 280.326232,2.115346, 284.576426,2.165905, 284.525985,6.415608, 281.458569,6.379194, 281.388045,12.128774, 284.456262,12.165196, 284.373636,18.664709, 286.375494,18.688223, 286.405477,16.355068, 298.921166,16.495729, 298.926000,16.079084, 303.558997,16.127516, 303.636675,8.877912, 306.013956,8.901824, 306.079101,2.402147, 309.579877,2.436087, 309.598846,0.436177, 309.684648,-8.563417, 301.693696,-8.643075, 301.726369,-11.676234, 284.744054,-11.866436, 284.647293,-3.833677, 280.398187,-3.884223, ],
    ],
    // And
    [
        [ 344.465304,35.168236, 344.342851,53.168030, 351.452894,53.187004, 351.465682,50.687019, 355.270557,50.692913, 355.276079,48.692917, 4.146367,48.694935, 4.143279,46.694935, 14.776077,46.675754, 14.788867,48.675739, 18.588408,48.663269, 18.605904,50.663235, 22.407936,50.647877, 26.968524,50.625744, 26.931439,47.625843, 32.621491,47.592751, 32.673801,51.092583, 39.885479,51.042374, 39.679341,37.293156, 31.871091,37.347084, 31.854251,35.597138, 22.910835,35.645336, 22.897426,33.645370, 12.443064,33.681896, 12.413491,24.431932, 14.424064,24.426624, 14.414816,21.676638, 3.739921,21.695192, 3.740644,22.695192, 2.610016,22.695759, 2.612842,28.695759, 1.606216,28.696035, 1.606977,32.029365, 357.828741,32.028503, 357.828082,32.778507, 354.049158,32.774647, 354.044179,35.191311, ],
    ],
    // Scl
    [
        [ 346.680966,-24.825045, 359.110564,-24.804201, 26.458889,-24.872909, 26.350728,-39.372623, 351.692704,-39.312759, 351.683377,-36.312767, 346.727514,-36.324974, ],
    ],
    // Ara
    [
        [ 249.034681,-60.264458, 248.570624,-45.767052, 269.809284,-45.516346, 272.309017,-45.485973, 272.672253,-56.983772, 265.168189,-57.074776, 265.775729,-67.571106, 258.242482,-67.661087, 255.724983,-67.690582, 255.542392,-65.191643, 254.283514,-65.206253, 254.195137,-63.790093, 251.676321,-63.818996, 251.537847,-61.236458, 249.081630,-61.264195, ],
    ],
    // Lib
    [
        [ 227.853012,-0.474289, 221.603092,-0.526939, 221.667108,-8.526685, 215.408506,-8.573134, 215.513091,-22.572775, 215.533691,-25.072702, 225.576554,-24.995110, 225.630769,-29.994879, 236.929980,-29.889616, 236.813064,-20.390202, 240.571776,-20.351618, 240.437279,-8.352324, 240.386954,-3.602587, 227.881951,-3.724160, ],
    ],
    // Cet
    [
        [ 6.601329,0.692540, 6.603787,2.692538, 31.615266,2.597881, 31.665247,10.514395, 50.946411,10.363207, 50.852984,0.446972, 50.836683,-1.302952, 41.339221,-1.221027, 41.148759,-23.853603, 26.465999,-23.756258, 26.458889,-24.872909, 359.110564,-24.804201, 359.103299,-6.304202, 6.592702,-6.307455, ],
    ],
    // Ari
    [
        [ 31.665247,10.514395, 26.655734,10.543240, 26.744674,25.626335, 30.513711,25.605070, 30.530616,27.855019, 38.070149,27.804764, 38.103194,31.221315, 42.628380,31.186502, 52.426668,31.100361, 52.290622,19.434334, 51.037234,19.446114, 50.946411,10.363207, ],
    ],
    // Sct
    [
        [ 275.549526,-15.943572, 284.793720,-15.832812, 284.744054,-11.866436, 284.647293,-3.833677, 280.398187,-3.884223, 275.399122,-3.944483, ],
    ],
    // Pyx
    [
        [ 126.927094,-17.411257, 130.184340,-17.442471, 130.163512,-19.442373, 137.684970,-19.508831, 137.636776,-24.508631, 141.904335,-24.542519, 141.771599,-37.292015, 126.677799,-37.160038, ],
    ],
    // Boo
    [
        [ 227.781486,7.525393, 204.063849,7.360577, 204.028931,14.360494, 203.953872,27.860313, 210.788827,27.897652, 210.770859,30.147596, 211.888934,30.154539, 211.698732,47.903938, 211.584391,54.903576, 217.251249,54.942238, 229.591054,55.044865, 229.657374,52.545174, 237.084474,52.617477, 237.124586,51.117680, 237.365427,39.618908, 232.643652,39.572113, 232.746978,32.572613, 229.015919,32.537678, 229.099516,25.538057, 227.605491,25.524611, ],
    ],
    // Cae
    [
        [ 65.076412,-39.700729, 64.882386,-48.699665, 68.362248,-48.738449, 68.424096,-46.238796, 73.402083,-46.295902, 73.482371,-42.796368, 75.974444,-42.825550, 76.254937,-27.077204, 73.759296,-27.047979, 71.763331,-27.024877, 71.722419,-29.774643, 69.976651,-29.754660, 69.862376,-36.754005, 65.129850,-36.701023, ],
    ],
    // Cha
    [
        [ 111.652114,-82.775886, 209.111109,-83.120071, 207.781434,-75.623596, 169.856973,-75.684013, 135.243687,-75.495468, 114.214704,-75.289917, ],
    ],
    // Cnc
    [
        [ 140.404259,6.470069, 122.921391,6.630238, 120.548343,6.654985, 120.580672,9.654814, 118.832489,9.673426, 118.871606,13.173217, 118.947544,19.672808, 120.070124,19.660820, 120.171646,27.660282, 121.915969,27.641914, 121.993231,33.141514, 140.645985,32.969116, ],
    ],
    // Cap
    [
        [ 309.684648,-8.563417, 301.693696,-8.643075, 301.726369,-11.676234, 301.915969,-27.641914, 306.897956,-27.591339, 321.831636,-27.459667, 321.807776,-24.959761, 329.770289,-24.904041, 329.656162,-8.404400, 321.668415,-8.460295, 321.716451,-14.460111, 309.743901,-14.563136, ],
    ],
    // Car
    [
        [ 170.155921,-57.184345, 166.337256,-57.174442, 133.323656,-56.973972, 133.380174,-54.974220, 127.567119,-54.920471, 127.609291,-53.420677, 123.320116,-53.378220, 123.381129,-51.128529, 120.861697,-51.102585, 90.748902,-50.754547, 90.693705,-52.504211, 93.194354,-52.534576, 93.107400,-55.034050, 98.114276,-55.094559, 97.995078,-58.093842, 103.011117,-58.153702, 102.703314,-64.151878, 136.094727,-64.499039, 135.243687,-75.495468, 169.856973,-75.684013, 170.084811,-64.684265, ],
    ],
    // Cas
    [
        [ 344.342851,53.168030, 344.304027,56.917961, 344.269124,59.751232, 348.859664,59.764675, 348.816491,63.681290, 355.217571,63.692879, 355.197859,66.692871, 6.763764,66.692444, 6.922914,77.692345, 55.308749,77.416313, 54.237034,68.421440, 49.395457,68.466286, 48.900930,57.468498, 38.762337,57.551300, 38.802356,59.051155, 30.795626,59.104610, 30.773624,58.104675, 27.595222,58.122719, 27.533641,54.622883, 22.456014,54.647770, 22.407936,50.647877, 18.605904,50.663235, 18.588408,48.663269, 14.788867,48.675739, 14.776077,46.675754, 4.143279,46.694935, 4.146367,48.694935, 355.276079,48.692917, 355.270557,50.692913, 351.465682,50.687019, 351.452894,53.187004, ],
    ],
    // Cen
    [
        [ 166.479363,-35.674656, 166.456504,-40.424622, 166.337256,-57.174442, 170.155921,-57.184345, 170.084811,-64.684265, 179.057364,-64.695785, 179.070768,-55.695793, 194.334511,-55.677105, 194.438381,-64.676964, 204.680286,-64.637940, 220.514974,-64.539024, 220.234466,-55.540089, 214.656816,-55.579952, 214.450264,-42.580647, 225.796279,-42.494175, 225.630769,-29.994879, 190.417399,-30.186390, 190.427199,-33.686378, 185.387434,-33.693893, 185.390296,-35.693890, ],
    ],
    // Cep
    [
        [ 300.573262,59.851078, 300.485201,61.850620, 306.811867,61.914379, 306.517381,67.412956, 310.334014,67.449028, 309.573041,75.445526, 301.873398,75.370873, 300.673800,80.364777, 313.705874,80.486786, 308.720970,86.465622, 308.331356,86.630630, 343.510666,86.836891, 339.260988,88.663887, 135.832471,87.568916, 130.402751,86.097542, 127.953615,84.610375, 84.536118,85.123947, 80.488894,80.147850, 57.530490,80.398666, 56.726209,77.402596, 55.308749,77.416313, 6.922914,77.692345, 6.763764,66.692444, 355.197859,66.692871, 355.217571,63.692879, 348.816491,63.681290, 348.859664,59.764675, 344.269124,59.751232, 344.304027,56.917961, 335.910930,56.882576, 335.931301,55.632626, 333.137626,55.617844, 333.174676,53.367943, 330.639210,53.353271, 330.602189,55.436489, 309.831361,55.275326, 309.623794,61.357697, 308.660804,61.348644, 308.716593,59.932240, ],
    ],
    // Com
    [
        [ 179.604536,13.304049, 179.608941,28.304047, 181.595664,28.303963, 181.594506,33.303963, 186.554261,33.307430, 186.557694,31.307434, 200.207748,31.343737, 200.226574,27.843775, 203.953872,27.860313, 204.028931,14.360494, 194.059066,14.322509, 194.062027,13.322513, ],
    ],
    // Cvn
    [
        [ 181.594506,33.303963, 181.591416,44.303963, 182.826434,44.304336, 182.818522,52.304336, 203.742399,52.359806, 203.795114,47.859928, 211.698732,47.903938, 211.888934,30.154539, 210.770859,30.147596, 210.788827,27.897652, 203.953872,27.860313, 200.226574,27.843775, 200.207748,31.343737, 186.557694,31.307434, 186.554261,33.307430, ],
    ],
    // Aur
    [
        [ 69.486937,30.921875, 69.573841,36.254715, 72.457344,36.221851, 72.840285,52.719647, 77.484762,52.665554, 77.606764,56.164833, 94.131089,55.965809, 94.057366,53.966255, 100.046031,53.893829, 99.919459,49.894588, 104.406359,49.841003, 104.265303,44.341839, 112.734124,44.243549, 112.560719,35.244530, 100.090276,35.390564, 99.965658,27.891312, 90.221071,28.009291, 90.228903,28.509243, 73.212476,28.712440, 73.235343,30.212309, 69.476789,30.255260, ],
    ],
    // Col
    [
        [ 75.974444,-42.825550, 76.254937,-27.077204, 92.992566,-27.278799, 92.899068,-33.028233, 99.903859,-33.112816, 99.708916,-43.111649, 90.951777,-43.005779, ],
    ],
    // Cir
    [
        [ 204.680286,-64.637940, 204.707479,-65.637878, 207.268023,-65.624954, 207.460871,-70.624443, 224.166441,-70.511543, 224.003634,-68.012207, 226.557126,-67.990929, 226.353536,-64.075127, 230.166579,-64.041565, 230.054569,-61.458748, 232.589764,-61.435307, 232.549867,-60.435493, 232.381911,-55.436283, 228.083511,-55.475494, 220.234466,-55.540089, 220.514974,-64.539024, ],
    ],
    // Crt
    [
        [ 162.827139,-6.662179, 162.807914,-11.662143, 162.775541,-19.662083, 164.030586,-19.666622, 164.008083,-25.166582, 179.091311,-25.195795, 179.096760,-11.695797, 179.098606,-6.695797, 174.342299,-6.691692, ],
    ],
    // CrA
    [
        [ 269.625464,-37.017460, 289.596319,-36.778565, 289.769640,-45.277565, 272.309017,-45.485973, 269.809284,-45.516346, ],
    ],
    // CrB
    [
        [ 229.099516,25.538057, 229.015919,32.537678, 232.746978,32.572613, 232.643652,39.572113, 237.365427,39.618908, 246.071949,39.711720, 246.279802,26.712872, 243.786706,26.685524, 243.800182,25.685595, 241.805734,25.664141, ],
    ],
    // Crv
    [
        [ 194.133052,-11.677388, 179.096760,-11.695797, 179.091311,-25.195795, 190.404525,-25.186401, 190.398502,-22.686409, 194.166870,-22.677342, ],
    ],
    // Cru
    [
        [ 179.070768,-55.695793, 179.057364,-64.695785, 194.438381,-64.676964, 194.334511,-55.677105, ],
    ],
    // Cyg
    [
        [ 290.132646,27.732408, 290.095252,30.232197, 291.598777,30.249315, 291.492604,36.748714, 292.119656,36.755802, 291.983527,43.755035, 288.470307,43.714939, 288.375521,47.714394, 287.120647,47.699867, 286.876459,55.698448, 291.904593,55.756004, 291.809550,58.255470, 297.100554,58.313873, 297.039241,59.813541, 300.573262,59.851078, 308.716593,59.932240, 308.660804,61.348644, 309.623794,61.357697, 309.831361,55.275326, 330.602189,55.436489, 330.639210,53.353271, 330.762663,44.603645, 329.878606,44.598251, 329.881639,44.348263, 329.376641,44.345120, 329.461012,36.595383, 327.319965,36.581547, 327.395181,28.581795, 322.620164,28.548054, 315.083914,28.487188, 315.072584,29.487139, 296.250944,29.301058, 296.272201,27.801174, ],
    ],
    // Del
    [
        [ 309.579877,2.436087, 306.079101,2.402147, 306.013956,8.901824, 303.636675,8.877912, 303.558997,16.127516, 305.186949,16.143963, 305.134049,20.893700, 309.896937,20.939947, 309.907665,19.939997, 317.178783,20.004641, 317.248364,12.338261, 314.618596,12.315764, 314.671096,6.482664, 314.045505,6.477161, 314.081097,2.477318, ],
    ],
    // Dor
    [
        [ 58.318788,-52.796844, 60.797896,-52.822811, 60.692919,-56.155586, 65.650462,-56.209385, 65.554590,-58.708855, 69.274534,-58.750664, 68.794019,-67.247925, 68.581524,-69.746719, 98.454423,-70.104134, 98.937249,-64.107025, 90.173643,-64.001053, 90.345061,-61.002098, 82.857614,-60.911289, 83.018804,-57.412262, 75.547743,-57.323040, 75.677017,-53.823803, 68.217746,-53.737637, 68.362248,-48.738449, 64.882386,-48.699665, 62.149908,-48.669972, 62.098639,-50.669701, 58.377166,-50.630478, ],
    ],
    // Dra
    [
        [ 140.615474,72.974136, 142.191195,81.467766, 163.105416,81.339607, 162.818598,79.340179, 174.531584,79.308342, 174.434796,76.308411, 195.820612,76.328911, 196.097474,69.329361, 210.650811,69.399117, 210.820556,65.399651, 235.329566,65.602348, 235.050630,69.600944, 247.841062,69.738304, 247.220707,74.734787, 261.536637,74.903313, 260.217904,79.895348, 267.656021,79.985748, 261.722231,85.949570, 308.720970,86.465622, 313.705874,80.486786, 300.673800,80.364777, 301.873398,75.370873, 309.573041,75.445526, 310.334014,67.449028, 306.517381,67.412956, 306.811867,61.914379, 300.485201,61.850620, 300.573262,59.851078, 297.039241,59.813541, 297.100554,58.313873, 291.809550,58.255470, 291.904593,55.756004, 286.876459,55.698448, 287.120647,47.699867, 274.342376,47.547604, 274.257689,50.547089, 255.786352,50.324444, 255.756826,51.324268, 237.124586,51.117680, 237.084474,52.617477, 229.657374,52.545174, 229.591054,55.044865, 217.251249,54.942238, 217.045254,62.441482, 203.573641,62.359398, 203.550539,63.359344, 181.581559,63.303963, 181.579256,65.803963, 171.849346,65.812607, 171.961369,72.812500, ],
    ],
    // Nor
    [
        [ 232.549867,-60.435493, 249.034681,-60.264458, 248.570624,-45.767052, 248.494777,-42.267479, 242.152806,-42.336678, 237.124586,-42.388638, 237.247281,-48.388023, 232.207246,-48.437107, 232.353372,-54.436417, 228.056716,-54.475617, 228.083511,-55.475494, 232.381911,-55.436283, ],
    ],
    // Eri
    [
        [ 55.352906,0.403726, 70.852361,0.237501, 71.602314,0.228916, 71.556359,-3.770820, 77.804396,-3.843729, 77.720031,-10.843229, 75.221751,-10.813805, 75.178714,-14.313553, 73.929798,-14.298972, 73.759296,-27.047979, 71.763331,-27.024877, 71.722419,-29.774643, 69.976651,-29.754660, 69.862376,-36.754005, 65.129850,-36.701023, 65.076412,-39.700729, 59.105884,-39.636826, 59.031364,-43.636440, 52.326772,-43.569405, 52.289002,-45.569221, 46.090771,-45.512478, 46.034514,-48.512234, 41.085309,-48.471004, 41.047694,-50.470860, 37.341210,-50.442570, 37.283346,-53.442356, 33.584144,-53.416470, 33.489424,-57.916157, 21.206229,-57.848415, 21.273262,-52.848560, 24.967354,-52.865856, 24.993847,-50.865921, 28.693257,-50.885922, 28.738323,-47.552723, 36.152947,-47.600494, 36.264014,-39.434216, 46.187261,-39.512898, 46.193322,-39.096256, 53.644284,-39.165096, 53.699606,-35.582035, 57.430512,-35.619244, 57.588901,-24.003378, 41.148759,-23.853603, 41.339221,-1.221027, 50.836683,-1.302952, 55.335582,-1.346189, ],
    ],
    // Sge
    [
        [ 284.373636,18.664709, 284.339133,21.247835, 290.096311,21.314816, 290.121288,19.398298, 298.885689,19.495539, 298.860255,21.578733, 305.125409,21.643656, 305.134049,20.893700, 305.186949,16.143963, 303.558997,16.127516, 298.926000,16.079084, 298.921166,16.495729, 286.405477,16.355068, 286.375494,18.688223, ],
    ],
    // For
    [
        [ 26.465999,-23.756258, 41.148759,-23.853603, 57.588901,-24.003378, 57.430512,-35.619244, 53.699606,-35.582035, 53.644284,-39.165096, 46.193322,-39.096256, 46.187261,-39.512898, 36.264014,-39.434216, 26.350728,-39.372623, 26.458889,-24.872909, ],
    ],
    // Gem
    [
        [ 96.372764,11.933297, 96.443917,17.432865, 95.069576,17.449507, 95.124127,21.449177, 90.125156,21.509872, 90.144037,22.843086, 90.221071,28.009291, 99.965658,27.891312, 100.090276,35.390564, 112.560719,35.244530, 118.289709,35.181053, 118.258080,33.181229, 121.993231,33.141514, 121.915969,27.641914, 120.171646,27.660282, 120.070124,19.660820, 118.947544,19.672808, 118.871606,13.173217, 114.252727,13.223806, 114.241004,12.223872, 106.748227,12.309598, 106.717879,9.809775, 105.718459,9.821487, 105.742815,11.821345, ],
    ],
    // Cam
    [
        [ 94.131089,55.965809, 77.606764,56.164833, 77.484762,52.665554, 72.840285,52.719647, 52.313086,52.936607, 52.381901,55.436283, 49.854022,55.459652, 49.913496,57.459385, 48.900930,57.468498, 49.395457,68.466286, 54.237034,68.421440, 55.308749,77.416313, 56.726209,77.402596, 57.530490,80.398666, 80.488894,80.147850, 84.536118,85.123947, 127.953615,84.610375, 130.402751,86.097542, 213.022957,85.930809, 216.782856,79.444984, 203.809189,79.362930, 204.157019,76.363815, 195.820612,76.328911, 174.434796,76.308411, 174.531584,79.308342, 162.818598,79.340179, 163.105416,81.339607, 142.191195,81.467766, 140.615474,72.974136, 123.086229,73.138374, 122.129101,59.643398, 107.753197,59.803726, 107.851552,61.803146, 94.407456,61.964127, ],
    ],
    // CMa
    [
        [ 93.215625,-11.030153, 111.973399,-11.252145, 111.677199,-33.250469, 99.903859,-33.112816, 92.899068,-33.028233, 92.992566,-27.278799, ],
    ],
    // UMa
    [
        [ 145.709238,41.431675, 139.512491,41.478596, 139.590711,46.478279, 128.440104,46.577728, 128.799134,59.575989, 122.129101,59.643398, 123.086229,73.138374, 140.615474,72.974136, 171.961369,72.812500, 171.849346,65.812607, 181.579256,65.803963, 181.581559,63.303963, 203.550539,63.359344, 203.573641,62.359398, 217.045254,62.441482, 217.251249,54.942238, 211.584391,54.903576, 211.698732,47.903938, 203.795114,47.859928, 203.742399,52.359806, 182.818522,52.304336, 182.826434,44.304336, 181.591416,44.303963, 181.594506,33.303963, 181.595664,28.303963, 179.608941,28.304047, 166.693998,28.325026, 166.714226,33.324993, 163.489409,33.335678, 163.523169,39.335613, 154.359412,39.377411, 154.378224,41.377361, ],
    ],
    // Gru
    [
        [ 321.928053,-36.459297, 322.042321,-44.958858, 322.117366,-49.458572, 331.998825,-49.391174, 332.113695,-56.390835, 351.768522,-56.312687, 351.692704,-39.312759, 351.683377,-36.312767, 346.727514,-36.324974, ],
    ],
    // Her
    [
        [ 245.558595,3.703381, 242.809668,3.673514, 242.676630,15.672800, 240.181074,15.646335, 240.111007,21.645968, 241.856576,21.664411, 241.805734,25.664141, 243.800182,25.685595, 243.786706,26.685524, 246.279802,26.712872, 246.071949,39.711720, 237.365427,39.618908, 237.124586,51.117680, 255.756826,51.324268, 255.786352,50.324444, 274.257689,50.547089, 274.342376,47.547604, 273.466874,47.536987, 273.824386,30.039156, 276.700773,30.073977, 276.762886,26.074350, 284.269867,26.164097, 284.277162,25.664141, 284.339133,21.247835, 284.373636,18.664709, 284.456262,12.165196, 281.388045,12.128774, 275.203084,12.054331, 275.173274,14.387479, 260.176878,14.206035, 260.195847,12.706148, 252.701482,12.617938, 252.805909,3.785211, ],
    ],
    // Hor
    [
        [ 65.076412,-39.700729, 64.882386,-48.699665, 62.149908,-48.669972, 62.098639,-50.669701, 58.377166,-50.630478, 58.318788,-52.796844, 53.365002,-52.747078, 53.236816,-57.079784, 48.791131,-57.037785, 48.362689,-67.035820, 33.202361,-66.915192, 33.489424,-57.916157, 33.584144,-53.416470, 37.283346,-53.442356, 37.341210,-50.442570, 41.047694,-50.470860, 41.085309,-48.471004, 46.034514,-48.512234, 46.090771,-45.512478, 52.289002,-45.569221, 52.326772,-43.569405, 59.031364,-43.636440, 59.105884,-39.636826, ],
    ],
    // Hya
    [
        [ 122.849007,-0.369390, 122.921391,6.630238, 140.404259,6.470069, 145.398417,6.432767, 145.348906,-0.567059, 145.270272,-11.566781, 162.807914,-11.662143, 162.775541,-19.662083, 164.030586,-19.666622, 164.008083,-25.166582, 179.091311,-25.195795, 190.404525,-25.186401, 190.398502,-22.686409, 194.166870,-22.677342, 215.513091,-22.572775, 215.533691,-25.072702, 225.576554,-24.995110, 225.630769,-29.994879, 190.417399,-30.186390, 190.427199,-33.686378, 185.387434,-33.693893, 185.390296,-35.693890, 166.479363,-35.674656, 163.958516,-35.666496, 163.977885,-31.833201, 160.201379,-31.818586, 160.212894,-29.818613, 155.181327,-29.794784, 155.199337,-27.128162, 147.659283,-27.083504, 147.679681,-24.583571, 141.904335,-24.542519, 137.636776,-24.508631, 137.684970,-19.508831, 130.163512,-19.442373, 130.184340,-17.442471, 126.927094,-17.411257, 126.989779,-11.411565, 122.734179,-11.368799, ],
    ],
    // Hyi
    [
        [ 68.794019,-67.247925, 68.581524,-69.746719, 67.957485,-74.743164, 52.075782,-74.574127, 50.091656,-82.064453, 1.533391,-81.803955, 1.566297,-74.303963, 12.332437,-74.318573, 12.295414,-75.318527, 20.654051,-75.347221, 21.206229,-57.848415, 33.489424,-57.916157, 33.202361,-66.915192, 48.362689,-67.035820, ],
    ],
    // Ind
    [
        [ 323.184757,-74.454468, 351.997833,-74.312462, 351.861391,-66.812599, 332.398567,-66.889992, 332.113695,-56.390835, 331.998825,-49.391174, 322.117366,-49.458572, 322.042321,-44.958858, 307.169295,-45.090000, 307.458801,-56.588577, 307.564801,-59.588055, 322.348651,-59.457684, ],
    ],
    // Lac
    [
        [ 329.461012,36.595383, 329.376641,44.345120, 329.881639,44.348263, 329.878606,44.598251, 330.762663,44.603645, 330.639210,53.353271, 333.174676,53.367943, 333.137626,55.617844, 335.931301,55.632626, 335.910930,56.882576, 344.304027,56.917961, 344.342851,53.168030, 344.465304,35.168236, 343.709193,35.165615, 343.706532,35.665611, 331.359558,35.606934, 331.350461,36.606907, ],
    ],
    // Mon
    [
        [ 95.225681,-0.053710, 95.348031,9.945548, 96.347666,9.933448, 96.372764,11.933297, 105.742815,11.821345, 105.718459,9.821487, 106.717879,9.809775, 106.664322,5.310089, 106.914274,5.307168, 106.867396,1.307442, 109.616919,1.275572, 109.599666,-0.224329, 122.849007,-0.369390, 122.734179,-11.368799, 111.973399,-11.252145, 93.215625,-11.030153, 88.965791,-10.978532, 89.052372,-3.979057, 95.177142,-4.053416, ],
    ],
    // Lep
    [
        [ 73.759296,-27.047979, 76.254937,-27.077204, 92.992566,-27.278799, 93.215625,-11.030153, 88.965791,-10.978532, 77.720031,-10.843229, 75.221751,-10.813805, 75.178714,-14.313553, 73.929798,-14.298972, ],
    ],
    // Leo
    [
        [ 162.849712,-0.662221, 162.876019,6.337730, 145.398417,6.432767, 140.404259,6.470069, 140.645985,32.969116, 150.084386,32.902279, 150.042344,27.902409, 159.238401,27.852917, 159.210877,22.852978, 162.942539,22.837605, 162.951494,24.837589, 166.680937,24.825045, 166.693998,28.325026, 179.608941,28.304047, 179.604536,13.304049, 179.603734,10.304049, 174.365688,10.308291, 174.350524,-0.691698, 174.342299,-6.691692, 162.827139,-6.662179, ],
    ],
    // Lup
    [
        [ 214.656816,-55.579952, 220.234466,-55.540089, 228.083511,-55.475494, 228.056716,-54.475617, 232.353372,-54.436417, 232.207246,-48.437107, 237.247281,-48.388023, 237.124586,-42.388638, 242.152806,-42.336678, 241.947699,-29.837763, 236.929980,-29.889616, 225.630769,-29.994879, 225.796279,-42.494175, 214.450264,-42.580647, ],
    ],
    // Lyn
    [
        [ 112.560719,35.244530, 112.734124,44.243549, 104.265303,44.341839, 104.406359,49.841003, 99.919459,49.894588, 100.046031,53.893829, 94.057366,53.966255, 94.131089,55.965809, 94.407456,61.964127, 107.851552,61.803146, 107.753197,59.803726, 122.129101,59.643398, 128.799134,59.575989, 128.440104,46.577728, 139.590711,46.478279, 139.512491,41.478596, 145.709238,41.431675, 145.681972,39.181767, 140.721631,39.218819, 140.645985,32.969116, 121.993231,33.141514, 118.258080,33.181229, 118.289709,35.181053, ],
    ],
    // Lyr
    [
        [ 284.277162,25.664141, 284.269867,26.164097, 276.762886,26.074350, 276.700773,30.073977, 273.824386,30.039156, 273.466874,47.536987, 274.342376,47.547604, 287.120647,47.699867, 288.375521,47.714394, 288.470307,43.714939, 291.983527,43.755035, 292.119656,36.755802, 291.492604,36.748714, 291.598777,30.249315, 290.095252,30.232197, 290.132646,27.732408, 290.161314,25.732574, ],
    ],
    // Ant
    [
        [ 141.904335,-24.542519, 141.771599,-37.292015, 141.734061,-40.291874, 166.456504,-40.424622, 166.479363,-35.674656, 163.958516,-35.666496, 163.977885,-31.833201, 160.201379,-31.818586, 160.212894,-29.818613, 155.181327,-29.794784, 155.199337,-27.128162, 147.659283,-27.083504, 147.679681,-24.583571, ],
    ],
    // Mic
    [
        [ 306.897956,-27.591339, 321.831636,-27.459667, 321.928053,-36.459297, 322.042321,-44.958858, 307.169295,-45.090000, ],
    ],
    // Mus
    [
        [ 170.084811,-64.684265, 169.856973,-75.684013, 207.781434,-75.623596, 207.460871,-70.624443, 207.268023,-65.624954, 204.707479,-65.637878, 204.680286,-64.637940, 194.438381,-64.676964, 179.057364,-64.695785, ],
    ],
    // Oct
    [
        //[ 1.533391,-81.803955, 50.091655,-82.064453, 48.232920,-84.555382, 109.019709,-85.261444, 111.652115,-82.775886, 209.111109,-83.120071, 276.865998,-82.458275, 274.195060,-74.974518, 323.184757,-74.454468, 351.997833,-74.312462, 1.566306,-74.303963, ],
        // Hand-edited and WRONG
        [ 0., -90., 0.,-81.803955,
          1.533391,-81.803955, 50.091655,-82.064453, 48.232920,-84.555382, 109.019709,-85.261444, 111.652115,-82.775886, 209.111109,-83.120071, 276.865998,-82.458275, 274.195060,-74.974518, 323.184757,-74.454468, 351.997833,-74.312462, //1.566306,-74.303963,
          359.999999,-74.303963,
          359.999999,-90.0,
        ],
    ],
    // Aps
    [
        [ 209.111109,-83.120071, 276.865998,-82.458275, 274.195061,-74.974518, 273.280077,-67.480080, 265.775729,-67.571106, 258.242482,-67.661087, 258.470679,-70.159744, 224.166441,-70.511543, 207.460871,-70.624443, 207.781434,-75.623596, ],
    ],
    // Oph
    [
        [ 245.602627,-0.296377, 245.558595,3.703381, 252.805909,3.785211, 252.701482,12.617938, 260.195847,12.706148, 260.176878,14.206035, 275.173274,14.387479, 275.203084,12.054331, 281.388045,12.128774, 281.458569,6.379194, 275.274611,6.304763, 275.296011,4.554893, 277.921056,4.586618, 277.939224,3.086727, 275.314236,3.055003, 275.350599,0.055224, 269.101038,-0.020647, 269.149704,-4.020351, 271.149674,-3.996055, 271.223716,-9.995605, 266.723757,-10.050234, 266.744700,-11.716777, 265.494404,-11.731914, 265.473491,-10.065370, 259.222069,-10.140438, 259.297428,-16.139990, 265.800191,-16.061882, 266.001836,-30.060663, 253.235349,-30.212309, 253.155671,-24.796097, 245.891446,-24.878118, 245.822984,-19.545166, 247.450676,-19.527155, 247.438230,-18.527226, 245.810681,-18.545235, 245.691204,-8.295890, 240.437279,-8.352324, 240.386954,-3.602587, 245.638389,-3.546180, ],
    ],
    // Ori
    [
        [ 70.852361,0.237501, 71.034029,15.736463, 76.288926,15.675535, 76.295279,16.175499, 81.798712,16.110105, 81.792232,15.610145, 85.793646,15.561920, 85.755057,12.562155, 88.255369,12.531851, 88.327167,18.031416, 87.326982,18.043549, 87.393794,22.876472, 90.144037,22.843086, 90.125156,21.509872, 95.124127,21.449177, 95.069576,17.449507, 96.443917,17.432865, 96.372764,11.933297, 96.347666,9.933448, 95.348031,9.945548, 95.225681,-0.053710, 95.177142,-4.053416, 89.052372,-3.979057, 88.965791,-10.978532, 77.720031,-10.843229, 77.804396,-3.843729, 71.556359,-3.770820, 71.602314,0.228916, ],
    ],
    // Pav
    [
        [ 274.195061,-74.974518, 323.184757,-74.454468, 322.348651,-59.457684, 307.564801,-59.588055, 307.458801,-56.588577, 272.672253,-56.983772, 265.168189,-57.074776, 265.775729,-67.571106, 273.280077,-67.480080, ],
    ],
    // Peg
    [
        [ 321.583471,2.539380, 321.501102,13.039063, 318.244515,13.013201, 318.250264,12.346555, 317.248364,12.338261, 317.178783,20.004641, 320.188409,20.029081, 320.151701,24.028936, 322.662019,24.048210, 322.620164,28.548054, 327.395181,28.581795, 327.319965,36.581547, 329.461012,36.595383, 331.350461,36.606907, 331.359558,35.606934, 343.706532,35.665611, 343.709193,35.165615, 344.465304,35.168236, 354.044179,35.191311, 354.049158,32.774647, 357.828082,32.778507, 357.828741,32.028503, 1.606977,32.029365, 1.606216,28.696035, 2.612842,28.695759, 2.610016,22.695759, 3.740644,22.695192, 3.739921,21.695192, 3.734118,13.195194, 1.603174,13.196035, 1.602731,10.696035, 359.097119,10.695797, 359.098034,8.195797, 342.821416,8.162168, 342.842217,2.662207, 331.587267,2.607607, 331.588755,2.357612, 326.587086,2.325691, 326.580219,3.325668, 323.578749,3.304391, 323.584271,2.554411, ],
    ],
    // Pic
    [
        [ 90.951777,-43.005779, 75.974444,-42.825550, 73.482371,-42.796368, 73.402083,-46.295902, 68.424096,-46.238796, 68.362248,-48.738449, 68.217746,-53.737637, 75.677017,-53.823803, 75.547743,-57.323040, 83.018804,-57.412262, 82.857614,-60.911289, 90.345061,-61.002098, 90.173643,-64.001053, 98.937249,-64.107025, 102.703314,-64.151878, 103.011117,-58.153702, 97.995078,-58.093842, 98.114276,-55.094559, 93.107400,-55.034050, 93.194354,-52.534576, 90.693705,-52.504211, 90.748902,-50.754547, ],
    ],
    // Per
    [
        [ 42.628380,31.186502, 42.666468,34.519676, 40.402383,34.537514, 40.434659,37.287388, 39.679341,37.293156, 39.885479,51.042374, 32.673801,51.092583, 32.621491,47.592751, 26.931439,47.625843, 26.968524,50.625744, 22.407936,50.647877, 22.456014,54.647770, 27.533641,54.622883, 27.595222,58.122719, 30.773624,58.104675, 30.795626,59.104610, 38.802356,59.051155, 38.762337,57.551300, 48.900930,57.468498, 49.913496,57.459385, 49.854022,55.459652, 52.381901,55.436283, 52.313086,52.936607, 72.840285,52.719647, 72.457344,36.221851, 69.573841,36.254715, 69.486937,30.921875, 52.426668,31.100361, ],
    ],
    // Equ
    [
        [ 314.081097,2.477318, 314.045505,6.477161, 314.671096,6.482664, 314.618596,12.315764, 317.248364,12.338261, 318.250264,12.346555, 318.244515,13.013201, 321.501102,13.039063, 321.583471,2.539380, ],
    ],
    // CMi
    [
        [ 122.849007,-0.369390, 109.599666,-0.224329, 109.616919,1.275572, 106.867396,1.307442, 106.914274,5.307168, 106.664322,5.310089, 106.717879,9.809775, 106.748227,12.309598, 114.241004,12.223872, 114.252727,13.223806, 118.871606,13.173217, 118.832489,9.673426, 120.580672,9.654814, 120.548343,6.654985, 122.921391,6.630238, ],
    ],
    // LMi
    [
        [ 140.645985,32.969116, 140.721631,39.218819, 145.681972,39.181767, 145.709238,41.431675, 154.378224,41.377361, 154.359412,39.377411, 163.523169,39.335613, 163.489409,33.335678, 166.714226,33.324993, 166.693998,28.325026, 166.680937,24.825045, 162.951494,24.837589, 162.942539,22.837605, 159.210877,22.852978, 159.238401,27.852917, 150.042344,27.902409, 150.084386,32.902279, ],
    ],
    // Vul
    [
        [ 284.339133,21.247835, 284.277162,25.664141, 290.161314,25.732574, 290.132646,27.732408, 296.272201,27.801174, 296.250944,29.301058, 315.072584,29.487139, 315.083914,28.487188, 322.620164,28.548054, 322.662019,24.048210, 320.151701,24.028936, 320.188409,20.029081, 317.178783,20.004641, 309.907665,19.939997, 309.896937,20.939947, 305.134049,20.893700, 305.125409,21.643656, 298.860255,21.578733, 298.885689,19.495539, 290.121288,19.398298, 290.096311,21.314816, ],
    ],
    // UMi
    [
        [ 195.820612,76.328911, 196.097474,69.329361, 210.650811,69.399117, 210.820555,65.399651, 235.329565,65.602348, 235.050630,69.600944, 247.841063,69.738304, 247.220708,74.734787, 261.536637,74.903313, 260.217905,79.895348, 267.656020,79.985748, 261.722230,85.949570, 308.720970,86.465622, 308.331355,86.630630, 343.510666,86.836891, 339.260988,88.663887, 135.832471,87.568916, 130.402750,86.097542, 213.022958,85.930809, 216.782856,79.444984, 203.809190,79.362930, 204.157019,76.363815, ],
    ],
    // Phe
    [
        [ 351.692704,-39.312759, 351.768522,-56.312687, 351.778394,-57.812679, 21.206229,-57.848415, 21.273262,-52.848560, 24.967354,-52.865856, 24.993847,-50.865921, 28.693257,-50.885922, 28.738323,-47.552723, 36.152947,-47.600494, 36.264014,-39.434216, 26.350728,-39.372623, ],
    ],
    // Psc
    [
        [ 342.849712,0.662221, 342.842217,2.662207, 342.821416,8.162168, 359.098034,8.195797, 359.097119,10.695797, 1.602731,10.696035, 1.603174,13.196035, 3.734118,13.195194, 3.739921,21.695192, 14.414816,21.676638, 14.424064,24.426624, 12.413491,24.431932, 12.443064,33.681896, 22.897426,33.645370, 22.866420,28.645439, 26.764710,28.626282, 26.744674,25.626335, 26.655734,10.543240, 31.665247,10.514395, 31.615266,2.597881, 6.603787,2.692538, 6.601329,0.692540, 6.592702,-6.307455, 359.103299,-6.304202, 359.102211,-3.304202, 342.864704,-3.337751, ],
    ],
    // PsA
    [
        [ 346.680966,-24.825045, 329.770289,-24.904041, 321.807776,-24.959761, 321.831636,-27.459667, 321.928053,-36.459297, 346.727514,-36.324974, ],
    ],
    // Vol
    [
        [ 98.937249,-64.107025, 98.454423,-70.104134, 97.770709,-75.100037, 114.214704,-75.289917, 135.243687,-75.495468, 136.094727,-64.499039, 102.703314,-64.151878, ],
    ],
    // Pup
    [
        [ 111.973399,-11.252145, 111.677199,-33.250469, 99.903859,-33.112816, 99.708916,-43.111649, 90.951777,-43.005779, 90.748902,-50.754547, 120.861697,-51.102585, 121.038279,-43.353504, 126.572313,-43.409519, 126.677799,-37.160038, 126.927094,-17.411257, 126.989779,-11.411565, 122.734179,-11.368799, ],
    ],
    // Ret
    [
        [ 48.362689,-67.035820, 68.794019,-67.247925, 69.274534,-58.750664, 65.554590,-58.708855, 65.650462,-56.209385, 60.692919,-56.155586, 60.797896,-52.822811, 58.318788,-52.796844, 53.365002,-52.747078, 53.236816,-57.079784, 48.791131,-57.037785, ],
    ],
    // Sgr
    [
        [ 284.744054,-11.866436, 284.793720,-15.832812, 275.549526,-15.943572, 265.800191,-16.061882, 266.001836,-30.060663, 269.502811,-30.018208, 269.625464,-37.017460, 289.596319,-36.778565, 289.769640,-45.277565, 307.169295,-45.090000, 306.897956,-27.591339, 301.915969,-27.641914, 301.726369,-11.676234, ],
    ],
    // Sco
    [
        [ 240.437279,-8.352324, 245.691204,-8.295890, 245.810681,-18.545235, 247.438230,-18.527226, 247.450676,-19.527155, 245.822984,-19.545166, 245.891446,-24.878118, 253.155671,-24.796097, 253.235349,-30.212309, 266.001836,-30.060663, 269.502811,-30.018208, 269.625464,-37.017460, 269.809284,-45.516346, 248.570624,-45.767052, 248.494777,-42.267479, 242.152806,-42.336678, 241.947699,-29.837763, 236.929980,-29.889616, 236.813064,-20.390202, 240.571776,-20.351618, ],
    ],
    // Ser
    [
        [ 227.853012,-0.474289, 227.781486,7.525393, 227.605491,25.524611, 229.099516,25.538057, 241.805734,25.664141, 241.856576,21.664411, 240.111007,21.645968, 240.181074,15.646335, 242.676630,15.672800, 242.809668,3.673514, 245.558595,3.703381, 245.602627,-0.296377, 245.638389,-3.546180, 240.386954,-3.602587, 227.881951,-3.724160, ],
        [ 275.350599,0.055224, 275.314236,3.055003, 277.939224,3.086727, 277.921056,4.586618, 275.296011,4.554893, 275.274611,6.304763, 281.458569,6.379194, 284.525985,6.415608, 284.576426,2.165905, 280.326232,2.115346, 280.350209,0.115489, 280.398187,-3.884223, 275.399122,-3.944483, 275.549526,-15.943572, 265.800191,-16.061882, 259.297428,-16.139990, 259.222069,-10.140438, 265.473491,-10.065370, 265.494404,-11.731914, 266.744700,-11.716777, 266.723757,-10.050234, 271.223716,-9.995605, 271.149674,-3.996055, 269.149704,-4.020351, 269.101038,-0.020647, ],
    ],
    // Sextans
    [
        [ 145.348906,-0.567059, 145.398417,6.432767, 162.876019,6.337730, 162.849712,-0.662221, 162.827139,-6.662179, 162.807914,-11.662143, 145.270272,-11.566781, ],
    ],
    // Men
    [
        [ 109.019709,-85.261444, 48.232920,-84.555382, 50.091656,-82.064453, 52.075782,-74.574127, 67.957485,-74.743164, 68.581524,-69.746719, 98.454423,-70.104134, 97.770709,-75.100037, 114.214704,-75.289917, 111.652114,-82.775886, ],
    ],
    // Tau
    [
        [ 50.836683,-1.302952, 50.852984,0.446972, 50.946411,10.363207, 51.037234,19.446114, 52.290622,19.434334, 52.426668,31.100361, 69.486937,30.921875, 69.476789,30.255260, 73.235343,30.212309, 73.212476,28.712440, 90.228903,28.509243, 90.221071,28.009291, 90.144037,22.843086, 87.393794,22.876472, 87.326982,18.043549, 88.327167,18.031416, 88.255369,12.531851, 85.755057,12.562155, 85.793646,15.561920, 81.792232,15.610145, 81.798712,16.110105, 76.295279,16.175499, 76.288926,15.675535, 71.034029,15.736463, 70.852361,0.237501, 55.352906,0.403726, 55.335582,-1.346189, ],
    ],
    // Tel
    [
        [ 307.458801,-56.588577, 307.169295,-45.090000, 289.769640,-45.277565, 272.309017,-45.485973, 272.672253,-56.983772, ],
    ],
    // Tuc
    [
        [ 351.997833,-74.312462, 1.566297,-74.303963, 12.332437,-74.318573, 12.295414,-75.318527, 20.654051,-75.347221, 21.206229,-57.848415, 351.778394,-57.812679, 351.768522,-56.312687, 332.113695,-56.390835, 332.398567,-66.889992, 351.861391,-66.812599, ],
    ],
    // Tri
    [
        [ 26.744674,25.626335, 26.764710,28.626282, 22.866420,28.645439, 22.897426,33.645370, 22.910835,35.645336, 31.854251,35.597138, 31.871091,37.347084, 39.679341,37.293156, 40.434659,37.287388, 40.402383,34.537514, 42.666468,34.519676, 42.628380,31.186502, 38.103194,31.221315, 38.070149,27.804764, 30.530616,27.855019, 30.513711,25.605070, ],
    ],
    // Tra
    [
        [ 224.166441,-70.511543, 224.003634,-68.012207, 226.557126,-67.990929, 226.353536,-64.075127, 230.166579,-64.041565, 230.054569,-61.458748, 232.589764,-61.435307, 232.549867,-60.435493, 249.034681,-60.264458, 249.081630,-61.264195, 251.537847,-61.236458, 251.676321,-63.818996, 254.195137,-63.790093, 254.283514,-65.206253, 255.542392,-65.191643, 255.724983,-67.690582, 258.242482,-67.661087, 258.470679,-70.159744, ],
    ],
    // Aqr
    [
        [ 309.598846,0.436177, 309.579877,2.436087, 314.081097,2.477318, 321.583471,2.539380, 323.584271,2.554411, 323.578749,3.304391, 326.580219,3.325668, 326.587086,2.325691, 331.588755,2.357612, 331.587267,2.607607, 342.842217,2.662207, 342.849712,0.662221, 342.864704,-3.337751, 359.102211,-3.304202, 359.103299,-6.304202, 359.110564,-24.804201, 346.680966,-24.825045, 329.770289,-24.904041, 329.656162,-8.404400, 321.668415,-8.460295, 321.716451,-14.460111, 309.743901,-14.563136, 309.684648,-8.563417, ],
    ],
    // Vir
    [
        [ 174.350524,-0.691698, 174.365688,10.308291, 179.603734,10.304049, 179.604536,13.304049, 194.062027,13.322513, 194.059066,14.322509, 204.028931,14.360494, 204.063849,7.360577, 227.781486,7.525393, 227.853012,-0.474289, 221.603092,-0.526939, 221.667108,-8.526685, 215.408506,-8.573134, 215.513091,-22.572775, 194.166870,-22.677342, 194.133052,-11.677388, 179.096760,-11.695797, 179.098606,-6.695797, 174.342299,-6.691692, ],
    ],
    // Vel
    [
        [ 166.337256,-57.174442, 166.456504,-40.424622, 141.734061,-40.291874, 141.771599,-37.292015, 126.677799,-37.160038, 126.572313,-43.409519, 121.038279,-43.353504, 120.861697,-51.102585, 123.381129,-51.128529, 123.320116,-53.378220, 127.609291,-53.420677, 127.567119,-54.920471, 133.380174,-54.974220, 133.323656,-56.973972, ],
    ],
];


// These are from Astrometry.net's stellarium_constellations.c

var constellation_shortnames =  [ "Aql","And","Scl","Ara","Lib","Cet","Ari","Sct","Pyx","Boo","Cae","Cha","Cnc","Cap","Car","Cas","Cen","Cep","Com","Cvn","Aur","Col","Cir","Crt","CrA","CrB","Crv","Cru","Cyg","Del","Dor","Dra","Nor","Eri","Sge","For","Gem","Cam","CMa","UMa","Gru","Her","Hor","Hya","Hyi","Ind","Lac","Mon","Lep","Leo","Lup","Lyn","Lyr","Ant","Mic","Mus","Oct","Aps","Oph","Ori","Pav","Peg","Pic","Per","Equ","CMi","LMi","Vul","UMi","Phe","Psc","PsA","Vol","Pup","Ret","Sgr","Sco","Ser","Sex","Men","Tau","Tel","Tuc","Tri","Tra","Aqr","Vir","Vel" ];

var constellation_longnames = [ "Aquila", "Andromeda", "Sculptor", "Ara", "Libra", "Cetus", "Aries", "Scutum", "Pyxis", "Bootes", "Caelum", "Chamaeleon", "Cancer", "Capricornus", "Carina", "Cassiopeia", "Centaurus", "Cepheus", "Coma Berenices", "Canes Venatici", "Auriga", "Columba", "Circinus", "Crater", "Corona Austrina", "Corona Borealis", "Corvus", "Crux", "Cygnus", "Delphinus", "Dorado", "Draco", "Norma", "Eridanus", "Sagitta", "Fornax", "Gemini", "Camelopardalis", "Canis Major", "Ursa Major", "Grus", "Hercules", "Horologium", "Hydra", "Hydrus", "Indus", "Lacerta", "Monoceros", "Lepus", "Leo", "Lupus", "Lynx", "Lyra", "Antlia", "Microscopium", "Musca", "Octans", "Apus", "Ophiuchus", "Orion", "Pavo", "Pegasus", "Pictor", "Perseus", "Equuleus", "Canis Minor", "Leo Minor", "Vulpecula", "Ursa Minor", "Phoenix", "Pisces", "Piscis Austrinus", "Volans", "Puppis", "Reticulum", "Sagittarius", "Scorpius", "Serpens", "Sextans", "Mensa", "Taurus", "Telescopium", "Tucana", "Triangulum", "Triangulum Australe", "Aquarius", "Virgo", "Vela" ];

//'","'.join(['#%02x%02x%02x' % (x[0],x[1],x[2]) for x in (np.random.randint(128, size=(88,3))+128)])
var constellation_colors = ["#90d581","#e1f093","#d18693","#f5ea94","#96d495","#93abaf","#d49eac","#b2f9b1","#ab9cd5","#e4a9dc","#bfa6d1","#b2faee","#eaa8cb","#8d82aa","#96cfde","#f7a5f2","#e5d6cf","#d5f483","#8785d4","#87f3b7","#fea7b4","#b4f0b2","#ce84c7","#bdf3b8","#aa9898","#8cbc91","#dcecd5","#c4c5ee","#deb7e4","#efed9c","#b0d4eb","#b9e9d9","#b4c3c6","#92c0a6","#d8fe84","#bfc4d3","#89a3f0","#c2c19c","#b384f9","#fdb1cc","#beb4d2","#b1bcf3","#bfeca9","#f4b2b1","#9492e0","#efd590","#90b6c2","#d19a81","#c6d781","#def7cd","#9cd581","#ab8199","#d0fdd4","#b9b4d3","#f6cdde","#85aeba","#cb9ad3","#81859d","#cedf93","#95f495","#aabeba","#c5f5a6","#aca4b3","#a2e0ab","#8c8bc5","#dceac2","#f4ddcd","#d0c785","#d5f58a","#c5fafe","#a595be","#e6f6ab","#e2eddf","#96f4b8","#fea5a2","#aaf3e3","#9da4a5","#dff99b","#f3c1ce","#b484c4","#9cf6d4","#c2c6bc","#8ff5a7","#9d8be4","#9e9ac3","#f5eb99","#d3d9d2","#f6cff3"];

var constellation_lines = [
    [582,579,579,576,579,568,568,580,591,580,568,555,555,551,568,556],
    [0,11,11,24,47,24,24,17,17,15],
    [685,18,18,681,681,685],
    [516,496,496,480,480,475,475,494,494,491,491,490,490,516],
    [444,432,432,419,419,412,412,416,416,432],
    [50,57,35,13,13,4,13,23,23,27,27,37,37,55,55,62,62,68,68,59,59,35,53,62,53,61,61,67,67,78,78,77,77,69,69,57,57,60,60,67],
    [72,48,48,43,43,39],
    [537,538,538,542,542,529,529,531,531,537],
    [256,261,261,267],
    [404,395,395,408,408,418,418,415,415,400,400,399,399,395,395,387,387,384],
    [120,126,126,127],
    [248,314,314,352],
    [264,260,260,249,260,262,262,247,262,269],
    [592,593,593,611,611,619,619,625,625,630,619,622,622,611,593,603,611,608],
    [277,302,302,316,316,317,317,325,325,321,321,311,311,305,305,279,258,250,250,197,276,279,276,258,197,203,250,242],
    [42,28,28,16,16,12,12,1],
    [403,391,391,382,382,388,388,389,389,386,386,385,385,380,380,377,385,393,386,401,401,414,388,365,365,356,356,346,346,335,335,336],
    [642,666,666,623,623,617,617,642,666,686,686,623],
    [374,375,375,355],
    [362,371],
    [180,179,179,148,148,140,140,138,153,138,153,180],
    [193,190,190,177,177,171,171,178,171,163,163,155],
    [406,425,406,420],
    [322,327,327,332,332,330,330,322,330,331,331,337,337,345,345,338,338,332],
    [534,546,546,549,549,557,557,560,560,561,561,559,559,553,553,545,534,530],
    [428,427,427,429,429,434,434,439,439,447,447,451],
    [359,357,357,351,351,348,348,347,348,363,363,357],
    [358,354,368,349],
    [563,570,570,575,575,594,594,600,594,604,604,613,613,627,594,583,583,571],
    [596,597,597,599,599,605,605,601,601,597],
    [166,173,173,159,159,166,159,121,121,111],
    [511,513,513,492,492,498,498,511,511,562,562,578,578,522,522,482,482,462,462,452,452,426,426,392,392,361,361,333],
    [456,460,460,463,463,453,453,460,453,456],
    [33,44,44,52,52,56,56,64,64,66,66,76,76,87,87,99,99,101,101,113,113,116,116,122,122,97,97,92,92,86,86,79,79,70,70,75,75,85,85,91,91,94,94,124,124,130,130,134,134,142,142,143,143,125],
    [574,577,577,573,577,584,584,589],
    [71,84],
    [202,219,219,228,228,227,227,206,228,235,235,239,235,240,235,230,230,222,222,234,222,210,222,204,204,199,204,195,195,189,189,183],
    [90,104,104,136,90,102,102,136,102,151],
    [211,218,218,213,213,205,205,217,217,220,220,224,224,229,215,216,216,220,216,212,212,201,201,200,201,194,201,205,215,208,192,215,213,211],
    [383,378,378,369,369,350,350,324,324,323,323,344,344,350,344,341,341,326,326,306,326,308,323,293,293,288,288,273,288,270,293,291,291,253,253,286,286,324],
    [675,650,650,638,638,659,659,677,677,675,659,672,659,664,638,635,635,632],
    [503,512,512,489,489,487,487,486,486,471,471,467,467,459,459,443,471,470,470,465,465,461,470,481,481,493,493,485,508,514,514,517,514,508,481,486],
    [109,65,65,80],
    [259,255,255,254,254,265,265,266,266,259,266,268,268,278,278,287,287,284,284,283,283,292,292,301,301,309,309,319,319,334,334,343,343,373,373,376],
    [7,98,98,63,63,54,54,45],
    [618,598,598,609,609,618],
    [643,652,652,651,651,648,648,647,647,654,654,651],
    [188,198,198,223,223,196,196,186,223,245,245,237],
    [184,176,176,167,167,158,158,145,158,172,172,165,165,154,154,141,158,154,145,149,145,146,141,145,146,144,149,150],
    [342,329,329,300,300,297,297,307,307,328,328,342,307,304,304,294,294,290,328,329],
    [442,455,455,449,449,442,449,431,431,423,423,424,423,413,431,433,433,417,417,405,417,402,405,397,405,413],
    [281,280,280,274,274,271,271,251,251,231,231,214,214,191],
    [532,535,535,539,539,550,550,541,541,535],
    [310,296],
    [616,610,610,607],
    [367,339,339,360,360,364,364,367],
    [626,661,661,398,398,626],
    [410,466,466,472],
    [500,506,483,506,500,479,479,458,458,469,469,483,483,495],
    [164,161,161,157,182,187,187,185,185,174,187,181,181,175,175,164,164,169,169,147,147,157,157,152,152,160,160,175,152,131,131,133,133,135,135,139,131,132,132,137,185,181],
    [595,621,621,602,602,590,590,595,590,586,586,533,533,547,547,590,547,540,540,524,524,518,518,540,518,507],
    [3,674,673,660,660,639,673,667,667,662,662,637,637,629,674,663,663,658,658,641,641,628,0,673,0,3],
    [207,170,170,168],
    [96,103,103,107,107,105,105,93,93,88,88,81,81,74,88,83,83,82,82,73],
    [612,614,614,620,620,615,615,612],
    [236,232],
    [320,312,312,298,298,289,298,320],
    [569,587],
    [58,497,497,473,473,435,435,457,457,422,422,411,411,435],
    [22,21,21,8,8,22,21,31,31,41,41,21,21,29,29,8,8,9,9,2,2,8],
    [19,25,19,26,26,25,25,32,32,36,36,46,46,40,40,34,34,30,30,20,20,14,14,6,6,689,689,687,687,688,688,683,683,679,679,684,684,687],
    [671,657,657,633,633,631,631,640,640,655,655,670],
    [238,221,221,244,244,238,244,225,244,252,252,272,272,244],
    [243,241,241,226,226,203,203,209,209,233,233,242,242,243],
    [110,112,112,106,106,95,95,110],
    [521,527,520,525,525,515,515,509,515,521,521,525,525,552,552,536,536,521,536,527,527,519,552,558,558,543,543,536,543,548,548,554,554,564,564,565,558,572,572,588,588,585,585,581,581,567,581,566],
    [499,505,505,510,510,501,501,484,484,478,478,477,477,476,476,468,468,464,464,450,464,448,464,454],
    [440,441,441,436,436,430,430,437,437,446,446,438,438,437,544,523,523,504,504,502,502,488],
    [313,299],
    [156,129],
    [153,128,128,118,123,162,114,115,114,108,108,89,123,118,123,119,119,114,118,117,117,115,115,100],
    [528,526],
    [645,680,680,5,680,10],
    [51,49,49,38,38,51],
    [474,421,421,445,445,474],
    [624,634,634,646,646,649,649,656,656,668,668,678,678,682,634,644,644,636,644,653,653,665,665,669,669,676,606,624],
    [340,353,353,366,366,379,379,394,394,396,396,407,379,381,381,390,390,409,381,370,370,372,370,366],
    [246,257,257,263,263,282,282,295,295,318,318,315,315,303,303,285,285,275,275,246]];

var constellation_stars = [2.09654,29.0908,2.29204,59.1502,2.35225,-45.747,3.30896,15.1836,4.857,-8.82383,5.00796,-64.8776,5.14942,8.19025,6.41333,-77.255,6.5505,-43.6799,6.57029,-42.3051,7.88567,-62.9581,9.83167,30.8612,10.1266,56.5374,10.8968,-17.9867,12.0722,7.29992,12.4535,41.0789,14.1771,60.7168,14.1879,38.4992,14.6515,-29.3575,15.7045,31.8043,15.7361,7.89008,16.5213,-46.7185,17.0961,-55.2458,17.1469,-10.1819,17.4325,35.6208,18.4373,24.5838,19.8666,27.2641,21.006,-8.18275,21.4525,60.2354,22.0914,-43.3177,22.5456,6.14394,22.8124,-49.0731,22.8708,15.3458,24.4281,-57.2367,25.358,5.48761,26.0214,-15.9396,26.3483,9.15764,27.865,-10.3349,28.2704,29.5794,28.3824,19.2941,28.3889,3.18747,28.4117,-46.3024,28.5987,63.6701,28.6598,20.8083,28.9868,-51.6096,29.6911,-61.5699,30.5117,2.76375,30.9747,42.3299,31.7929,23.4628,32.3855,34.9874,33.25,8.84675,33.9846,33.359,34.1271,-51.5121,34.8366,-2.97706,35.4376,-68.6594,36.4875,-12.2904,36.7462,-47.7038,37.0397,8.46008,37.9462,89.2641,38.022,-15.2443,38.9687,5.59331,39.8706,0.328528,39.8905,-11.8716,39.8968,-68.2669,39.9497,-42.8916,40.1649,-54.5499,40.1664,-39.8553,40.8255,3.23617,41.0306,-13.8587,41.2349,10.1142,41.2749,-18.5726,42.2723,-32.4063,42.4958,27.2608,42.6455,38.3189,42.6741,55.8955,44.1067,-8.89761,44.5655,-40.3047,44.9287,8.90739,45.5938,4.35286,45.5983,-23.6243,45.9038,-59.7376,46.1991,53.5064,46.2938,38.8405,47.0422,40.9556,48.0178,-28.9891,48.9585,-8.81983,49.879,-21.7579,49.9717,-43.0716,51.0806,49.8613,51.2035,9.02906,52.2672,59.9403,53.2351,-9.45831,53.4469,-21.6328,55.7312,47.7877,55.8123,-9.76519,56.0481,-64.8071,56.0797,32.2883,56.7125,-23.2484,56.8093,-74.2393,57.1493,-37.6201,57.2905,24.0535,57.3637,-36.2001,57.5895,71.3324,58.533,31.8837,59.356,63.0723,59.4634,40.0103,59.6864,-61.4001,59.7412,35.791,60.1701,12.4904,63.5003,-42.2939,63.606,-62.474,64.0062,-51.4871,64.1212,-59.3018,64.4734,-33.7983,64.948,15.6277,65.7335,17.5426,66.009,-34.017,66.3722,17.928,67.1539,19.1805,67.1653,15.8709,67.7087,-44.9538,68.4988,-55.045,68.8878,-30.5623,68.98,16.5098,69.0797,-3.35244,69.5453,-14.3036,70.1409,-41.8636,70.5144,-37.1448,70.5613,22.957,70.7665,-70.9311,71.3756,-3.25461,72.4589,6.96125,72.653,8.90025,72.8015,5.60511,73.2237,-5.45275,73.3448,2.50828,73.5125,66.3427,73.7237,10.1511,74.2484,33.1661,74.6371,1.71403,75.6195,41.0759,76.3652,-22.3709,76.9626,-5.08625,77.2866,-8.75408,78.0745,-11.8691,78.2328,-16.2054,78.3079,-12.9413,78.6345,-8.20164,79.1721,45.999,79.8939,-13.1768,79.996,-12.3156,80.6407,79.2308,81.2828,6.34972,81.5729,28.6079,82.0614,-20.7592,82.8031,-35.4704,82.9694,-76.3417,83.0017,-0.299083,83.1825,-17.8223,83.4063,-62.4899,83.7845,9.93417,84.0534,-1.20192,84.4112,21.1426,84.9123,-34.0741,85.1897,-1.94258,86.1165,-22.4475,86.1934,-65.7355,86.739,-14.8219,86.8212,-51.0667,86.9391,-9.66961,87.4566,-56.1665,87.7398,-35.7693,87.8298,-20.8775,88.5246,-63.091,88.5962,20.2764,88.7929,7.40703,89.1013,-14.168,89.3842,-35.2833,89.7866,-42.8151,89.8824,44.9474,89.9302,37.2128,90.5958,9.64736,90.864,19.6906,91.0301,23.2636,91.5389,-14.9353,91.893,14.7685,92.2412,2.49972,92.985,14.2088,93.7139,-6.27472,93.7196,22.5068,94.1381,-35.1407,94.9058,59.0109,95.0783,-30.0634,95.5285,-33.4363,95.675,-17.9559,95.74,22.5139,95.9421,4.59283,95.9879,-52.6957,97.2045,-7.03306,97.2408,20.2122,98.7641,-22.9648,99.1708,-19.2557,99.4279,16.3994,99.4403,-43.1959,100.983,25.1312,101.289,-16.7131,101.323,12.8961,102.048,-61.942,102.46,-32.5085,102.484,-50.6144,103.197,33.9614,103.548,-12.0386,103.554,-23.9284,104.034,-17.0543,104.319,58.4231,104.656,-28.9721,105.43,-27.9348,105.756,-23.8333,105.94,-15.6333,106.027,20.5703,107.098,-26.3932,107.187,-70.4992,107.785,30.2453,107.966,-0.492778,108.703,-26.7727,109.208,-67.9572,109.286,-37.0975,109.523,16.5405,110.031,21.9823,111.024,-29.3031,111.432,27.7983,111.679,49.2116,111.788,8.28942,112.308,-43.3019,113.65,31.8886,113.981,26.896,114.827,5.2275,115.312,-9.55108,115.455,-72.6061,116.112,24.3981,116.331,28.0263,117.257,-24.9123,120.896,-40.0032,121.886,-24.3044,121.983,-68.6171,122.149,-2.98378,122.383,-47.3366,124.129,9.18567,124.63,-76.92,125.016,27.2186,125.629,-59.5095,125.709,43.1884,126.434,-66.1365,127.567,60.7184,129.414,5.70381,129.689,3.34147,130.026,-35.3083,130.073,-52.922,130.154,-59.761,130.806,3.39867,130.822,21.4686,130.898,-33.1864,131.171,18.1549,131.176,-54.7086,131.674,28.76,131.694,6.41892,132.108,5.83789,132.633,-27.7101,133.849,5.94553,134.622,11.8578,134.804,48.0424,135.161,41.7834,135.612,-66.3958,135.907,47.1567,136.632,38.4523,136.999,-43.4326,137.742,-58.9669,138.301,-69.7175,138.591,2.31503,139.273,-59.2752,139.711,36.8029,140.264,34.3925,140.528,-55.0107,141.897,-8.65869,142.287,-2.76894,142.675,-40.4669,142.882,63.0618,142.996,-1.18467,143.218,51.6786,143.556,36.3976,146.463,23.7743,147.749,59.0391,147.869,-14.8466,148.026,54.0643,148.192,26.0071,149.216,-54.5678,149.718,-35.8909,151.833,16.7627,151.857,35.2447,151.985,-0.371639,152.094,11.9672,152.648,-12.3538,153.435,-70.0379,153.684,-42.1221,154.173,23.4173,154.271,-61.3323,154.275,42.9145,154.992,19.8419,155.582,41.4994,156.523,-16.8361,156.788,-31.0678,156.97,-58.7394,156.971,36.7075,157.573,-0.636972,158.868,-78.6078,159.326,-48.2256,160.739,-64.3945,160.885,-60.5666,161.692,-49.4201,162.406,-16.1941,163.328,34.2156,163.373,-58.8533,164.945,-18.2991,165.46,56.3823,165.933,61.7511,167.147,-58.9751,167.416,44.4986,167.915,-22.8256,168.527,20.524,168.56,15.4298,169.836,-14.7791,171.153,-10.8594,171.221,-17.684,172.851,69.3311,173.251,-31.8575,173.69,-54.2641,173.946,-63.0198,174.171,-9.80225,176.191,-18.3506,176.402,-66.7288,176.465,6.52981,176.513,47.7793,177.266,14.5723,178.227,-33.9081,178.457,53.6947,179.004,-17.1508,182.09,-50.7224,182.103,-24.7288,182.531,-22.6198,183.787,-58.7489,183.856,57.0326,183.952,-17.542,184.587,-79.3123,184.668,-0.787139,186.65,-63.0991,186.735,28.2686,187.01,-50.2306,187.467,-16.5151,187.791,-57.1126,188.019,-16.1959,188.117,-72.133,188.371,69.7882,188.438,41.3568,188.597,-23.3966,189.296,-69.1355,190.38,-48.9599,190.417,-1.44953,191.57,-68.1081,191.93,-59.6887,193.507,55.9598,193.902,3.39761,194.008,38.3182,195.545,10.9591,197.264,-23.118,197.498,17.5291,197.97,27.876,199.73,-23.1714,200.15,-36.7121,200.981,54.9254,201.298,-11.1613,202.761,-39.4073,203.674,-0.595944,204.972,-53.4664,206.886,49.3133,207.37,15.7978,207.376,-41.6877,207.404,-42.4737,208.671,18.3986,208.885,-47.2883,209.67,-44.8035,210.412,1.54458,210.956,-60.373,211.098,64.3758,211.672,-36.3687,213.224,-10.2741,213.918,19.1873,214.004,-5.99953,216.545,-45.3792,216.732,-83.6679,217.958,30.3711,218.02,38.3079,218.877,-42.1577,219.472,-49.4258,219.92,-60.8351,220.287,13.7283,220.482,-47.3881,220.628,-64.9746,220.765,-5.65742,221.247,27.0742,221.562,1.89294,221.966,-79.0447,222.677,74.1555,222.72,-16.0416,224.633,-43.1339,224.79,-42.1041,225.487,40.3906,226.018,-25.2819,228.072,-52.0991,228.875,33.3151,229.252,-9.38286,229.379,-58.8009,229.728,-68.6795,230.182,71.834,230.343,-40.6475,230.452,-36.2612,230.844,-59.3207,231.232,58.966,231.958,29.1055,233.232,31.3592,233.672,26.7149,233.701,10.5389,233.785,-41.1667,233.881,-14.7896,234.514,-42.5675,235.686,26.2955,236.014,77.7945,236.067,6.42553,236.547,15.4219,237.185,18.1418,237.399,26.0686,237.405,-3.43014,237.704,4.47758,237.74,-33.6271,238.167,42.45,238.456,-16.7296,238.787,-63.4297,239.112,15.6647,239.397,26.878,239.713,-26.1141,240.031,-38.3966,240.083,-22.6216,240.361,29.8511,240.474,58.5644,240.804,-49.2297,241.359,-19.8054,241.817,-36.7555,243.37,-54.6304,244.377,75.7547,244.58,-4.69261,244.935,46.3133,244.961,-50.1554,245.48,19.153,245.998,61.5141,246.796,-47.5547,247.352,-26.4319,247.555,21.4896,248.364,-78.897,248.526,42.4369,248.971,-28.216,249.29,-10.5671,250.323,31.6019,250.724,38.9225,250.773,-77.5166,251.492,82.0372,252.166,-69.0276,252.446,-59.0413,252.543,-34.2926,252.968,-38.0473,253.499,-42.362,254.418,9.37506,254.655,-55.9901,255.073,30.9263,257.197,65.7146,257.594,-15.7251,258.038,-43.2385,258.758,24.8396,258.762,36.8092,259.418,37.2913,260.207,-12.8469,260.921,37.1459,261.325,-55.5298,261.349,-56.3777,262.608,52.3014,262.685,26.1106,262.775,-60.6836,262.854,-23.9626,262.961,-49.876,263.054,86.5863,263.066,55.1728,263.402,-37.1037,263.733,12.5606,264.33,-42.9978,264.397,-15.3984,264.866,46.0063,265.354,-12.8752,265.622,-39.0299,265.868,4.56692,266.433,-64.7237,266.615,27.7225,266.89,-27.8307,266.896,-40.127,268.382,56.8724,269.063,37.2505,269.152,51.4889,269.441,29.2479,271.452,-30.4236,271.658,-50.0914,271.886,28.7625,272.145,-63.6681,273.441,-21.0588,274.407,-36.7613,275.248,-29.828,275.26,72.7337,275.329,-2.89711,275.807,-61.4939,276.043,-34.3843,276.743,-45.9683,276.993,-25.4212,277.207,-49.07,277.299,-14.5658,278.089,-39.7039,278.802,-8.24331,279.234,38.783,280.759,-71.4277,280.946,-38.3233,281.193,37.6051,281.414,-26.9908,281.794,-4.74783,281.871,-5.70508,282.52,33.3627,283.054,-62.1876,283.626,36.8986,283.68,-15.603,283.816,-26.2966,284.055,4.20353,284.071,-42.7106,284.169,-37.3432,284.238,-67.2335,284.432,-21.1066,284.681,-37.1071,284.736,32.6896,284.906,15.0685,285.653,-29.8801,285.778,-42.095,286.171,-21.7414,286.353,13.8637,286.562,-4.88233,286.604,-37.0628,286.735,-27.6698,287.087,-40.4966,287.368,-37.9043,287.507,-39.3407,288.138,67.6613,289.275,53.3682,289.409,-18.9529,290.418,-17.8472,290.804,-44.7996,290.971,-40.6156,291.374,3.11458,292.177,24.6652,292.426,51.7295,292.68,27.9597,294.007,-24.719,295.024,18.0139,295.262,17.4761,296.244,45.1307,296.565,10.6133,296.847,18.5343,297.043,70.2678,297.695,8.86739,298.118,1.00567,298.815,-41.8684,298.828,6.40794,299.077,35.0835,299.689,19.4921,299.934,-35.2762,300.147,-72.9102,300.275,27.7536,300.664,-27.7099,301.289,19.9909,302.174,-66.1793,302.826,-0.821472,304.513,-12.5449,305.253,-14.7814,305.557,40.2567,306.412,-56.7349,308.303,11.3033,309.387,14.5952,309.392,-47.2917,309.771,15.8382,310.358,45.2803,310.865,15.0747,311.24,-66.2032,311.524,-25.2705,311.552,33.9694,311.665,16.1248,311.919,-9.49569,312.492,-33.7797,312.955,-26.9191,313.702,-58.4541,315.323,-32.2578,316.487,-17.2327,317.585,10.1319,318.234,30.2271,318.62,10.0077,318.956,5.24808,319.484,-32.1725,319.644,62.5854,319.966,-53.4493,320.562,-16.8346,320.723,6.81111,321.61,-65.3681,321.667,-22.4114,322.165,70.5607,322.89,-5.57117,325.022,-16.6623,325.369,-77.3895,326.035,28.7432,326.046,9.875,326.161,25.645,326.76,-16.1266,326.934,-30.8983,328.482,-37.3648,330.209,-28.4538,331.446,-0.319833,331.529,-39.5431,331.609,-13.8695,331.752,25.3451,332.058,-46.9606,332.307,33.1725,332.535,-32.5484,332.549,6.19778,332.714,58.2012,333.992,37.7487,334.208,-7.78325,334.626,-60.2595,335.414,-1.38736,335.89,52.2295,336.129,49.4764,337.207,-0.0200556,337.317,-43.4956,337.383,47.7069,337.622,43.1234,337.662,-10.6779,337.822,50.2824,337.876,-32.346,338.839,-0.117361,340.164,-27.0436,340.365,10.8314,340.666,-46.8846,340.751,30.2213,341.516,-81.3816,341.633,23.5657,341.673,12.1741,342.138,-51.3167,342.398,-13.5925,342.42,66.2007,342.5,24.6017,343.154,-7.57967,343.663,-15.8208,343.987,-32.5397,344.412,-29.6218,345.22,-52.7541,345.943,28.0824,346.19,15.2054,346.72,-43.5203,347.361,-21.1725,347.589,-45.2466,348.972,-9.08769,349.29,3.28225,349.358,-58.2359,349.706,-32.5318,350.743,-20.1003,351.733,1.25583,351.992,6.37911,353.242,-37.8184,354.837,77.632,354.987,5.62736,355.512,1.78042,359.828,6.86358];

var buildConstellations = function() {
    //console.log('buildConstellations()');
    conGroup.clearLayers();
    for (var i in constellation_lines) {
        //console.log('Constellation ' + constellation_shortnames[i]);
        var lines = constellation_lines[i];
        var latlngs = [];
        var clong = map.getCenter().lng;
        var s1 = lines[0];
        var ra1  = constellation_stars[2*s1];
        var long1 = ra2long_C(ra1, clong);
        // duplicate this constellation if the viewpoint is wider than 360 degrees?
    
        for (var j=0; j<lines.length/2; j++) {
    	    var s1 = lines[2*j];
    	    var s2 = lines[2*j+1];
    	    var ra1  = constellation_stars[2*s1];
    	    var dec1 = constellation_stars[2*s1+1];
    	    var ra2  = constellation_stars[2*s2];
    	    var dec2 = constellation_stars[2*s2+1];
            if ((Math.abs(dec1) > 85) && (Math.abs(dec2) > 85)) {
                continue;
            }
            var latlng1 = L.latLng(dec2lat(dec1), ra2long_C(ra1, long1));
            var latlng2 = L.latLng(dec2lat(dec2), ra2long_C(ra2, long1));
    	    latlngs.push([ latlng1, latlng2 ]);
            //if (i == 0) console.log('  line from star ' + s1 + ' to ' + s2 + ', ra,dec ' + ra1 + ',' + dec1 + ' to ' + ra2 + ',' + dec2 + '; latlng ' + latlng1 + ' to ' + latlng2);
        }
        var mpl = L.polyline(latlngs, {'color': constellation_colors[i]});
        conGroup.addLayer(mpl);

        // add a fake Circle marker to hold the label.
        // compute center of mass of stars in this constellation
        ustars = new Set(lines);
        //console.log('Constellation ' + constellation_longnames[i] + ': ' + ustars.size + ' ustars');
        var xc = 0.;
        var yc = 0.;
        var decc = 0.;
        ustars.forEach(function(s) {
            var ra  = Math.PI / 180. * constellation_stars[2*s];
            var dec = Math.PI / 180. * constellation_stars[2*s+1];
            xc += Math.cos(dec) * Math.cos(ra);
            yc += Math.cos(dec) * Math.sin(ra);
            decc += constellation_stars[2*s+1];
        });
        xc /= (ustars.size + 0.0);
        yc /= (ustars.size + 0.0);
        ra  = 180. / Math.PI * Math.atan2(yc, xc);
        dec = decc / (ustars.size + 0.0);

        var latlng = L.latLng(dec2lat(dec), ra2long_C(ra, long1));
        var circ = L.circle(latlng, 0., {'color':'red', 'opacity':0.,
                                         'fillOpacity':0, 'weight':5});
        circ.bindTooltip(constellation_longnames[i],
                         {interactive: true, permanent: true,
                          direction: 'center' });
        conGroup.addLayer(circ);
    }
};

var boundaryGeoJ = 0;

var buildConstellationBoundaries = function() {
    conBoundaryGroup.clearLayers();
    var geojs = [];

    // var bb = map.getBounds();
    // var westmost = bb.getWest();
    // var eastmost = bb.getWest();

    for (var i in constellation_boundaries) {
        //if (constellation_shortnames[i] != 'Oct') {
        //    continue;
        //}
        //console.log('Boundary of ' + constellation_longnames[i]);
        var segments = constellation_boundaries[i];
        var clong = map.getCenter().lng;
        var latlngs = [];
        var display_latlngs = [];
        for (var j in segments) {
            var lines = segments[j];
            var seglatlngs = [];
            var d_seglatlngs = [];

            // Average RA,Dec via xyz
            var x=0.0;
            var y=0.0;
            var N = lines.length/2;
            for (var k=0; k<N; k++) {
    	        var r = lines[2*k]   * Math.PI / 180.0;
    	        var d = lines[2*k+1] * Math.PI / 180.0;
                x += Math.cos(d) * Math.cos(r);
                y += Math.cos(d) * Math.sin(r);
            }
            var rac = Math.atan2(y, x) * 180.0 / Math.PI;
            if (rac < 0)
                rac += 360;
            // South pole special-case!
            if (constellation_shortnames[i] == 'Oct')
                rac = 180.;

            var long1 = ra2long_C(rac, 0.);
            //console.log('Avg RA:', rac);
            //console.log('Avg longitude: ' + long1);
            // assume they all start in...
            var inbounds = true;
            var last_latlng = false;
            for (var k=0; k<lines.length/2; k++) {
    	        var ra1  = lines[2*k];
    	        var dec1 = lines[2*k+1];
                var lng = ra2long_C(ra1, long1);
                var latlng1 = L.latLng(dec2lat(dec1), lng);
                //console.log('RA,Dec ' + ra1 + ', ' + dec1);
                var LIM = 85;
                if (inbounds && Math.abs(dec1) > LIM) {
                    // add the first out-of-bounds one
                    d_seglatlngs.push(latlng1);
                    inbounds = false;
                    //console.log('Going out of bounds.');
                } else if (!inbounds && Math.abs(dec1 < LIM)) {
                    // add the previous out-of-bounds one
                    d_seglatlngs.push(last_latlng);
                    //console.log('Coming back into bounds.');
                    inbounds = true;
                }
                if (inbounds)
                    d_seglatlngs.push(latlng1);
    	        seglatlngs.push(latlng1);
                last_latlng = latlng1;
            }
            // Wrapped-around copies!
            //latlngs.push([seglatlngs]);
            //display_latlngs.push([d_seglatlngs]);
            for (var w=-1; w<=1; w++) {
                wll = []
                for (var k in seglatlngs) {
                    ll = seglatlngs[k];
                    wll.push(L.latLng(ll.lat, ll.lng + 360*w));
                }
                // extra layer of list because Polygon allows holes
                latlngs.push([wll]);
                wll = []
                for (var k in d_seglatlngs) {
                    ll = d_seglatlngs[k];
                    wll.push(L.latLng(ll.lat, ll.lng + 360*w));
                }
                display_latlngs.push([wll]);
            }
        }
        var mpl = L.polygon(display_latlngs, {'color': constellation_colors[i],
                                              'fillOpacity': 0});
        conBoundaryGroup.addLayer(mpl);

        // for getConstellation()
        mpl = L.polygon(latlngs);
        var geoj = mpl.toGeoJSON();
        geoj.properties['name'] = constellation_longnames[i];
        geojs.push(geoj);
    }

    var geo = {type:'FeatureCollection', features:geojs};
    boundaryGeoJ = L.geoJson(geo);
};

var getConstellation = function(ra, dec) {
    var clong = map.getCenter().lng;
    var latlng = L.latLng(dec2lat(dec), ra2long_C(ra, clong));
    return getConstellationLatLng(latlng);
};
var getConstellationLatLng = function(latlng) {
    var inside = leafletPip.pointInLayer(latlng, boundaryGeoJ);
    // should be exactly one match...
    for (var i=0; i<inside.length; i++) {
        return inside[i].feature.properties.name;
    }
    return '(none)';
};

var rebuildConstellations = function() {
    buildConstellations();
    buildConstellationBoundaries();
    conGroup.addLayer(conBoundaryGroup);
};
rebuildConstellations();

// console.log('Constellation(0,0): ' + getConstellation(0, 0));
// console.log('Constellation(359,45): ' + getConstellation(359, 45));
// console.log('Constellation(1,45): ' + getConstellation(1, 45));
// console.log('Constellation(0,90): ' + getConstellation(0, 90));
// console.log('Constellation(0,-90): ' + getConstellation(0, -90));
// console.log('Constellation(0,84): ' + getConstellation(0, 84));
// console.log('Constellation(0,-84): ' + getConstellation(0, -84));




</script>
</body>

</html>
